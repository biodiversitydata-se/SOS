{"ast":null,"code":"import { Directive, EventEmitter, Input, NgZone, Output } from '@angular/core';\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\nimport { LeafletUtil } from '../core/leaflet.util';\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../core/leaflet.directive';\n\nvar LeafletLayerDirective =\n/** @class */\nfunction () {\n  function LeafletLayerDirective(leafletDirective, zone) {\n    this.zone = zone; // Layer Events\n\n    this.onAdd = new EventEmitter();\n    this.onRemove = new EventEmitter();\n    this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n  }\n\n  LeafletLayerDirective.prototype.ngOnInit = function () {\n    // Init the map\n    this.leafletDirective.init();\n  };\n\n  LeafletLayerDirective.prototype.ngOnDestroy = function () {\n    if (null != this.layer) {\n      // Unregister the event handlers\n      this.removeLayerEventListeners(this.layer); // Remove the layer from the map\n\n      this.layer.remove();\n    }\n  };\n\n  LeafletLayerDirective.prototype.ngOnChanges = function (changes) {\n    var _this = this;\n\n    if (changes['layer']) {\n      // Update the layer\n      var p_1 = changes['layer'].previousValue;\n      var n_1 = changes['layer'].currentValue;\n      this.zone.runOutsideAngular(function () {\n        if (null != p_1) {\n          _this.removeLayerEventListeners(p_1);\n\n          p_1.remove();\n        }\n\n        if (null != n_1) {\n          _this.addLayerEventListeners(n_1);\n\n          _this.leafletDirective.getMap().addLayer(n_1);\n        }\n      });\n    }\n  };\n\n  LeafletLayerDirective.prototype.addLayerEventListeners = function (l) {\n    var _this = this;\n\n    this.onAddLayerHandler = function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onAdd, e);\n    };\n\n    l.on('add', this.onAddLayerHandler);\n\n    this.onRemoveLayerHandler = function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onRemove, e);\n    };\n\n    l.on('remove', this.onRemoveLayerHandler);\n  };\n\n  LeafletLayerDirective.prototype.removeLayerEventListeners = function (l) {\n    l.off('add', this.onAddLayerHandler);\n    l.off('remove', this.onRemoveLayerHandler);\n  };\n\n  LeafletLayerDirective.ctorParameters = function () {\n    return [{\n      type: LeafletDirective\n    }, {\n      type: NgZone\n    }];\n  };\n\n  LeafletLayerDirective.propDecorators = {\n    layer: [{\n      type: Input,\n      args: ['leafletLayer']\n    }],\n    onAdd: [{\n      type: Output,\n      args: ['leafletLayerAdd']\n    }],\n    onRemove: [{\n      type: Output,\n      args: ['leafletLayerRemove']\n    }]\n  };\n\n  LeafletLayerDirective.ɵfac = function LeafletLayerDirective_Factory(t) {\n    return new (t || LeafletLayerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LeafletDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  LeafletLayerDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LeafletLayerDirective,\n    selectors: [[\"\", \"leafletLayer\", \"\"]],\n    inputs: {\n      layer: [\"leafletLayer\", \"layer\"]\n    },\n    outputs: {\n      onAdd: \"leafletLayerAdd\",\n      onRemove: \"leafletLayerRemove\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LeafletLayerDirective;\n}();\n\nexport { LeafletLayerDirective }; //# sourceMappingURL=leaflet-layer.directive.js.map","map":null,"metadata":{},"sourceType":"module"}