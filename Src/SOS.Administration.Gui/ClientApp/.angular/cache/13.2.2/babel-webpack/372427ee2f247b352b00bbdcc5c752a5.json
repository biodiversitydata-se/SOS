{"ast":null,"code":"// Line Annotation implementation\nmodule.exports = function (Chart) {\n  var chartHelpers = Chart.helpers;\n\n  var helpers = require('../helpers.js')(Chart);\n\n  var horizontalKeyword = 'horizontal';\n  var verticalKeyword = 'vertical';\n  var LineAnnotation = Chart.Annotation.Element.extend({\n    setDataLimits: function () {\n      var model = this._model;\n      var options = this.options; // Set the data range for this annotation\n\n      model.ranges = {};\n      model.ranges[options.scaleID] = {\n        min: options.value,\n        max: options.endValue || options.value\n      };\n    },\n    configure: function () {\n      var model = this._model;\n      var options = this.options;\n      var chartInstance = this.chartInstance;\n      var ctx = chartInstance.chart.ctx;\n      var scale = chartInstance.scales[options.scaleID];\n      var pixel, endPixel;\n\n      if (scale) {\n        pixel = helpers.isValid(options.value) ? scale.getPixelForValue(options.value) : NaN;\n        endPixel = helpers.isValid(options.endValue) ? scale.getPixelForValue(options.endValue) : pixel;\n      }\n\n      if (isNaN(pixel)) {\n        return;\n      }\n\n      var chartArea = chartInstance.chartArea; // clip annotations to the chart area\n\n      model.clip = {\n        x1: chartArea.left,\n        x2: chartArea.right,\n        y1: chartArea.top,\n        y2: chartArea.bottom\n      };\n\n      if (this.options.mode == horizontalKeyword) {\n        model.x1 = chartArea.left;\n        model.x2 = chartArea.right;\n        model.y1 = pixel;\n        model.y2 = endPixel;\n      } else {\n        model.y1 = chartArea.top;\n        model.y2 = chartArea.bottom;\n        model.x1 = pixel;\n        model.x2 = endPixel;\n      }\n\n      model.line = new LineFunction(model);\n      model.mode = options.mode; // Figure out the label:\n\n      model.labelBackgroundColor = options.label.backgroundColor;\n      model.labelFontFamily = options.label.fontFamily;\n      model.labelFontSize = options.label.fontSize;\n      model.labelFontStyle = options.label.fontStyle;\n      model.labelFontColor = options.label.fontColor;\n      model.labelXPadding = options.label.xPadding;\n      model.labelYPadding = options.label.yPadding;\n      model.labelCornerRadius = options.label.cornerRadius;\n      model.labelPosition = options.label.position;\n      model.labelXAdjust = options.label.xAdjust;\n      model.labelYAdjust = options.label.yAdjust;\n      model.labelEnabled = options.label.enabled;\n      model.labelContent = options.label.content;\n      ctx.font = chartHelpers.fontString(model.labelFontSize, model.labelFontStyle, model.labelFontFamily);\n      var textWidth = ctx.measureText(model.labelContent).width;\n      var textHeight = ctx.measureText('M').width;\n      var labelPosition = calculateLabelPosition(model, textWidth, textHeight, model.labelXPadding, model.labelYPadding);\n      model.labelX = labelPosition.x - model.labelXPadding;\n      model.labelY = labelPosition.y - model.labelYPadding;\n      model.labelWidth = textWidth + 2 * model.labelXPadding;\n      model.labelHeight = textHeight + 2 * model.labelYPadding;\n      model.borderColor = options.borderColor;\n      model.borderWidth = options.borderWidth;\n      model.borderDash = options.borderDash || [];\n      model.borderDashOffset = options.borderDashOffset || 0;\n    },\n    inRange: function (mouseX, mouseY) {\n      var model = this._model;\n      return (// On the line\n        model.line && model.line.intersects(mouseX, mouseY, this.getHeight()) || // On the label\n        model.labelEnabled && model.labelContent && mouseX >= model.labelX && mouseX <= model.labelX + model.labelWidth && mouseY >= model.labelY && mouseY <= model.labelY + model.labelHeight\n      );\n    },\n    getCenterPoint: function () {\n      return {\n        x: (this._model.x2 + this._model.x1) / 2,\n        y: (this._model.y2 + this._model.y1) / 2\n      };\n    },\n    getWidth: function () {\n      return Math.abs(this._model.right - this._model.left);\n    },\n    getHeight: function () {\n      return this._model.borderWidth || 1;\n    },\n    getArea: function () {\n      return Math.sqrt(Math.pow(this.getWidth(), 2) + Math.pow(this.getHeight(), 2));\n    },\n    draw: function () {\n      var view = this._view;\n      var ctx = this.chartInstance.chart.ctx;\n\n      if (!view.clip) {\n        return;\n      }\n\n      ctx.save(); // Canvas setup\n\n      ctx.beginPath();\n      ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);\n      ctx.clip();\n      ctx.lineWidth = view.borderWidth;\n      ctx.strokeStyle = view.borderColor;\n\n      if (ctx.setLineDash) {\n        ctx.setLineDash(view.borderDash);\n      }\n\n      ctx.lineDashOffset = view.borderDashOffset; // Draw\n\n      ctx.beginPath();\n      ctx.moveTo(view.x1, view.y1);\n      ctx.lineTo(view.x2, view.y2);\n      ctx.stroke();\n\n      if (view.labelEnabled && view.labelContent) {\n        ctx.beginPath();\n        ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);\n        ctx.clip();\n        ctx.fillStyle = view.labelBackgroundColor; // Draw the tooltip\n\n        chartHelpers.drawRoundedRectangle(ctx, view.labelX, // x\n        view.labelY, // y\n        view.labelWidth, // width\n        view.labelHeight, // height\n        view.labelCornerRadius // radius\n        );\n        ctx.fill(); // Draw the text\n\n        ctx.font = chartHelpers.fontString(view.labelFontSize, view.labelFontStyle, view.labelFontFamily);\n        ctx.fillStyle = view.labelFontColor;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(view.labelContent, view.labelX + view.labelWidth / 2, view.labelY + view.labelHeight / 2);\n      }\n\n      ctx.restore();\n    }\n  });\n\n  function LineFunction(view) {\n    // Describe the line in slope-intercept form (y = mx + b).\n    // Note that the axes are rotated 90Â° CCW, which causes the\n    // x- and y-axes to be swapped.\n    var m = (view.x2 - view.x1) / (view.y2 - view.y1);\n    var b = view.x1 || 0;\n    this.m = m;\n    this.b = b;\n\n    this.getX = function (y) {\n      // Coordinates are relative to the origin of the canvas\n      return m * (y - view.y1) + b;\n    };\n\n    this.getY = function (x) {\n      return (x - b) / m + view.y1;\n    };\n\n    this.intersects = function (x, y, epsilon) {\n      epsilon = epsilon || 0.001;\n      var dy = this.getY(x),\n          dx = this.getX(y);\n      return (!isFinite(dy) || Math.abs(y - dy) < epsilon) && (!isFinite(dx) || Math.abs(x - dx) < epsilon);\n    };\n  }\n\n  function calculateLabelPosition(view, width, height, padWidth, padHeight) {\n    var line = view.line;\n    var ret = {},\n        xa = 0,\n        ya = 0;\n\n    switch (true) {\n      // top align\n      case view.mode == verticalKeyword && view.labelPosition == \"top\":\n        ya = padHeight + view.labelYAdjust;\n        xa = width / 2 + view.labelXAdjust;\n        ret.y = view.y1 + ya;\n        ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;\n        break;\n      // bottom align\n\n      case view.mode == verticalKeyword && view.labelPosition == \"bottom\":\n        ya = height + padHeight + view.labelYAdjust;\n        xa = width / 2 + view.labelXAdjust;\n        ret.y = view.y2 - ya;\n        ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;\n        break;\n      // left align\n\n      case view.mode == horizontalKeyword && view.labelPosition == \"left\":\n        xa = padWidth + view.labelXAdjust;\n        ya = -(height / 2) + view.labelYAdjust;\n        ret.x = view.x1 + xa;\n        ret.y = line.getY(ret.x) + ya;\n        break;\n      // right align\n\n      case view.mode == horizontalKeyword && view.labelPosition == \"right\":\n        xa = width + padWidth + view.labelXAdjust;\n        ya = -(height / 2) + view.labelYAdjust;\n        ret.x = view.x2 - xa;\n        ret.y = line.getY(ret.x) + ya;\n        break;\n      // center align\n\n      default:\n        ret.x = (view.x1 + view.x2 - width) / 2 + view.labelXAdjust;\n        ret.y = (view.y1 + view.y2 - height) / 2 + view.labelYAdjust;\n    }\n\n    return ret;\n  }\n\n  return LineAnnotation;\n};","map":null,"metadata":{},"sourceType":"script"}