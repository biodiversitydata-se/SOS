{"ast":null,"code":"import * as _moment from 'moment';\nimport _moment__default from 'moment';\nimport { __decorate, __param } from 'tslib';\nimport { InjectionToken, Inject, NgModule, EventEmitter, Renderer2, ElementRef, Output, Input, HostListener, Directive, NgZone, Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { take } from 'rxjs/operators';\n/**\n * Determines the model type of the Date/Time picker another type.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction DlDateTimePickerComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction DlDateTimePickerComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const label_r8 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(label_r8);\n  }\n}\n\nfunction DlDateTimePickerComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 11);\n    ɵngcc0.ɵɵtemplate(1, DlDateTimePickerComponent_div_8_div_1_Template, 2, 1, \"div\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1._model.rowLabels);\n  }\n}\n\nfunction DlDateTimePickerComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵlistener(\"click\", function DlDateTimePickerComponent_div_9_div_1_Template_div_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const cell_r11 = restoredCtx.$implicit;\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12._onDateClick(cell_r11);\n    })(\"keydown.space\", function DlDateTimePickerComponent_div_9_div_1_Template_div_keydown_space_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const cell_r11 = restoredCtx.$implicit;\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14._onDateClick(cell_r11);\n    })(\"keydown.enter\", function DlDateTimePickerComponent_div_9_div_1_Template_div_keydown_enter_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13);\n      const cell_r11 = restoredCtx.$implicit;\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15._onDateClick(cell_r11);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r11 = ctx.$implicit;\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"col dl-abdtp-date-button dl-abdtp-\", ctx_r10._model.viewName, \"\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", cell_r11.classes);\n    ɵngcc0.ɵɵattribute(\"aria-label\", cell_r11.ariaLabel)(\"aria-disabled\", cell_r11.classes[\"dl-abdtp-disabled\"])(\"dl-abdtp-value\", cell_r11.value)(\"tabindex\", cell_r11.classes[\"dl-abdtp-active\"] ? 0 : -1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(cell_r11.display);\n  }\n}\n\nfunction DlDateTimePickerComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵtemplate(1, DlDateTimePickerComponent_div_9_div_1_Template, 2, 9, \"div\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r9 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", row_r9.cells);\n  }\n}\n\nfunction DlDateTimePickerComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4._model.viewLabel);\n  }\n}\n\nfunction DlDateTimePickerComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 17);\n    ɵngcc0.ɵɵlistener(\"click\", function DlDateTimePickerComponent_ng_template_12_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16._onUpClick();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelement(2, \"span\", 18);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r6._model.upButton.classes);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r6._model.upButton.ariaLabel)(\"dl-abdtp-value\", ctx_r6._model.upButton.value)(\"title\", ctx_r6._model.upButton.ariaLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", ctx_r6._model.viewLabel, \"\\u00A0\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r6.upIconClass);\n  }\n}\n\nclass DlDateAdapter {}\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\n\n\nconst moment = _moment;\n/**\n * Adapts `moment` to be usable as a date by date/time components that work with dates.\n **/\n\nlet DlDateAdapterMoment = /*#__PURE__*/(() => {\n  class DlDateAdapterMoment extends DlDateAdapter {\n    /**\n     * Create a new instance of a `moment` type from milliseconds.\n     * @param milliseconds\n     *  a time value as milliseconds (local time zone)\n     * @returns\n     *  an instance of `moment` for the specified moment in time.\n     */\n    fromMilliseconds(milliseconds) {\n      return moment(milliseconds);\n    }\n    /**\n     * Returns a moment in time value as milliseconds (local time zone).\n     * @param value\n     *  a moment or `null`.\n     * @returns\n     *  a `moment.valueOf()` result for the specified `moment` or `null`\n     */\n\n\n    toMilliseconds(value) {\n      return value ? value.valueOf() : undefined;\n    }\n\n  }\n\n  DlDateAdapterMoment.ɵfac = /*@__PURE__*/function () {\n    let ɵDlDateAdapterMoment_BaseFactory;\n    return function DlDateAdapterMoment_Factory(t) {\n      return (ɵDlDateAdapterMoment_BaseFactory || (ɵDlDateAdapterMoment_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DlDateAdapterMoment)))(t || DlDateAdapterMoment);\n    };\n  }();\n\n  DlDateAdapterMoment.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlDateAdapterMoment,\n    factory: DlDateAdapterMoment.ɵfac\n  });\n  /**\n   * Adapts `Date` to be usable as a date by date/time components that work with dates.\n   **/\n\n  return DlDateAdapterMoment;\n})();\nlet DlDateAdapterNative = /*#__PURE__*/(() => {\n  class DlDateAdapterNative extends DlDateAdapter {\n    /**\n     * Create a new instance of a `moment` type from milliseconds.\n     * @param milliseconds\n     *  a time value as milliseconds (local time zone)\n     * @returns\n     *  an instance of `moment` for the specified moment in time.\n     */\n    fromMilliseconds(milliseconds) {\n      return new Date(milliseconds);\n    }\n    /**\n     * Returns a moment in time value as milliseconds (local time zone).\n     * @param value\n     *  a Date or null.\n     * @returns\n     *  a `value.getTime()` result for the specified `Date` or `null`.\n     */\n\n\n    toMilliseconds(value) {\n      return value ? value.getTime() : undefined;\n    }\n\n  }\n\n  DlDateAdapterNative.ɵfac = /*@__PURE__*/function () {\n    let ɵDlDateAdapterNative_BaseFactory;\n    return function DlDateAdapterNative_Factory(t) {\n      return (ɵDlDateAdapterNative_BaseFactory || (ɵDlDateAdapterNative_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DlDateAdapterNative)))(t || DlDateAdapterNative);\n    };\n  }();\n\n  DlDateAdapterNative.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlDateAdapterNative,\n    factory: DlDateAdapterNative.ɵfac\n  });\n  /**\n   * Adapts `number` to be usable as a date by date/time components that work with dates.\n   * No op adapter.\n   **/\n\n  return DlDateAdapterNative;\n})();\nlet DlDateAdapterNumber = /*#__PURE__*/(() => {\n  class DlDateAdapterNumber extends DlDateAdapter {\n    /**\n     * Returns the specified number.\n     * @param milliseconds\n     *  a moment time time.\n     * @returns\n     *  the specified moment in time.\n     */\n    fromMilliseconds(milliseconds) {\n      return milliseconds;\n    }\n    /**\n     * Returns the specified number.\n     * @param value\n     *  a moment time time or `null`\n     * @returns\n     *  the specified moment in time or `null`\n     */\n\n\n    toMilliseconds(value) {\n      return value;\n    }\n\n  }\n\n  DlDateAdapterNumber.ɵfac = /*@__PURE__*/function () {\n    let ɵDlDateAdapterNumber_BaseFactory;\n    return function DlDateAdapterNumber_Factory(t) {\n      return (ɵDlDateAdapterNumber_BaseFactory || (ɵDlDateAdapterNumber_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DlDateAdapterNumber)))(t || DlDateAdapterNumber);\n    };\n  }();\n\n  DlDateAdapterNumber.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlDateAdapterNumber,\n    factory: DlDateAdapterNumber.ɵfac\n  });\n  /**\n   * @internal\n   */\n\n  return DlDateAdapterNumber;\n})();\nlet moment$1 = _moment;\n/* istanbul ignore if */\n\nif ('default' in _moment) {\n  moment$1 = _moment__default;\n}\n/**\n * InjectionToken for string dates that can be used to override default model format.\n **/\n\n\nconst DL_DATE_TIME_DISPLAY_FORMAT = new InjectionToken('DL_DATE_TIME_DISPLAY_FORMAT');\n/**\n * `Moment`'s long date format `lll` used as the default output format\n * for string date's\n */\n\nconst DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT = moment$1.localeData().longDateFormat('lll');\n/**\n * InjectionToken for string dates that can be used to override default input formats.\n **/\n\nconst DL_DATE_TIME_INPUT_FORMATS = new InjectionToken('DL_DATE__TIME_INPUT_FORMATS');\n/**\n *  Default input format's used by `DlDateAdapterString`\n */\n\nconst DL_DATE_TIME_INPUT_FORMATS_DEFAULT = ['YYYY-MM-DDTHH:mm', 'YYYY-MM-DDTHH:mm:ss', 'YYYY-MM-DDTHH:mm:ss.SSS', 'YYYY-MM-DD', 'M/D/YYYY h:m:s A', 'M/D/YYYY h:m A', 'M/D/YYYY h:m A', 'M/D/YYYY', 'M/D/YY h:m:s A', 'M/D/YY h:m A', 'M/D/YY h A', 'M/D/YY', DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT, moment$1.ISO_8601];\n/**\n * InjectionToken for string dates that can be used to override default model format.\n **/\n\nconst DL_DATE_TIME_MODEL_FORMAT = new InjectionToken('DL_DATE_TIME_MODEL_FORMAT');\n/**\n *  Default model format (ISO 8601)`\n */\n\nconst DL_DATE_TIME_MODEL_FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n *\n **/\n\nconst moment$2 = _moment;\n/**\n * Adapts `string` to be usable as a date by date/time components that work with dates.\n **/\n\nlet DlDateAdapterString = /*#__PURE__*/(() => {\n  let DlDateAdapterString = class DlDateAdapterString extends DlDateAdapter {\n    /**\n     *  Constructs a new instance of this class.\n     *\n     * @param inputFormats\n     *  see {@link DL_DATE_TIME_INPUT_FORMATS}\n     * @param modelFormat\n     *  see {@link DL_DATE_TIME_MODEL_FORMAT}\n     */\n    constructor(inputFormats, modelFormat) {\n      super();\n      this.inputFormats = inputFormats;\n      this.modelFormat = modelFormat;\n    }\n    /**\n     * Returns the specified number.\n     * @param milliseconds\n     *  a moment time time.\n     * @returns\n     *  the specified moment in time.\n     */\n\n\n    fromMilliseconds(milliseconds) {\n      return moment$2(milliseconds).format(this.modelFormat);\n    }\n    /**\n     * Returns the specified number.\n     * @param value\n     *  a moment time time or `null`\n     * @returns\n     *  the milliseconds for the specified value or `null`\n     *  `null` is returned when value is not a valid input date string\n     */\n\n\n    toMilliseconds(value) {\n      if (value !== undefined && value !== null) {\n        const newMoment = moment$2(value, this.inputFormats, true);\n        return newMoment.isValid() ? newMoment.valueOf() : undefined;\n      }\n    }\n\n  };\n\n  DlDateAdapterString.ɵfac = function DlDateAdapterString_Factory(t) {\n    return new (t || DlDateAdapterString)(ɵngcc0.ɵɵinject(DL_DATE_TIME_INPUT_FORMATS), ɵngcc0.ɵɵinject(DL_DATE_TIME_MODEL_FORMAT));\n  };\n\n  DlDateAdapterString.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlDateAdapterString,\n    factory: function (t) {\n      return DlDateAdapterString.ɵfac(t);\n    }\n  });\n  DlDateAdapterString = __decorate([__param(0, Inject(DL_DATE_TIME_INPUT_FORMATS)), __param(1, Inject(DL_DATE_TIME_MODEL_FORMAT))], DlDateAdapterString);\n  return DlDateAdapterString;\n})();\nconst ɵ0 = DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT,\n      ɵ1 = DL_DATE_TIME_INPUT_FORMATS_DEFAULT,\n      ɵ2 = DL_DATE_TIME_MODEL_FORMAT_DEFAULT;\n/**\n * Import this module to supply your own `DateAdapter` provider.\n * @internal\n **/\n\nlet DlDateTimeCoreModule = /*#__PURE__*/(() => {\n  let DlDateTimeCoreModule = class DlDateTimeCoreModule {};\n\n  DlDateTimeCoreModule.ɵfac = function DlDateTimeCoreModule_Factory(t) {\n    return new (t || DlDateTimeCoreModule)();\n  };\n\n  DlDateTimeCoreModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimeCoreModule\n  });\n  DlDateTimeCoreModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DL_DATE_TIME_DISPLAY_FORMAT,\n      useValue: ɵ0\n    }, {\n      provide: DL_DATE_TIME_INPUT_FORMATS,\n      useValue: ɵ1\n    }, {\n      provide: DL_DATE_TIME_MODEL_FORMAT,\n      useValue: ɵ2\n    }]\n  });\n  /**\n   * Import this module to store `milliseconds` in the model.\n   * @internal\n   */\n\n  return DlDateTimeCoreModule;\n})();\nlet DlDateTimeNumberModule = /*#__PURE__*/(() => {\n  let DlDateTimeNumberModule = class DlDateTimeNumberModule {};\n\n  DlDateTimeNumberModule.ɵfac = function DlDateTimeNumberModule_Factory(t) {\n    return new (t || DlDateTimeNumberModule)();\n  };\n\n  DlDateTimeNumberModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimeNumberModule\n  });\n  DlDateTimeNumberModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DlDateAdapter,\n      useClass: DlDateAdapterNumber\n    }],\n    imports: [[DlDateTimeCoreModule], DlDateTimeCoreModule]\n  });\n  /**\n   * Import this module to store a native JavaScript `Date` in the model.\n   * @internal\n   */\n\n  return DlDateTimeNumberModule;\n})();\nlet DlDateTimeDateModule = /*#__PURE__*/(() => {\n  let DlDateTimeDateModule = class DlDateTimeDateModule {};\n\n  DlDateTimeDateModule.ɵfac = function DlDateTimeDateModule_Factory(t) {\n    return new (t || DlDateTimeDateModule)();\n  };\n\n  DlDateTimeDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimeDateModule\n  });\n  DlDateTimeDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DlDateAdapter,\n      useClass: DlDateAdapterNative\n    }],\n    imports: [[DlDateTimeCoreModule]]\n  });\n  /**\n   * Import this module to store a `moment` in the model.\n   * @internal\n   */\n\n  return DlDateTimeDateModule;\n})();\nlet DlDateTimeMomentModule = /*#__PURE__*/(() => {\n  let DlDateTimeMomentModule = class DlDateTimeMomentModule {};\n\n  DlDateTimeMomentModule.ɵfac = function DlDateTimeMomentModule_Factory(t) {\n    return new (t || DlDateTimeMomentModule)();\n  };\n\n  DlDateTimeMomentModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimeMomentModule\n  });\n  DlDateTimeMomentModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DlDateAdapter,\n      useClass: DlDateAdapterMoment\n    }],\n    imports: [[DlDateTimeCoreModule]]\n  });\n  return DlDateTimeMomentModule;\n})();\nconst ɵ3 = DL_DATE_TIME_INPUT_FORMATS_DEFAULT,\n      ɵ4 = DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT;\n/**\n * Import this module to store a `string` in the model.\n * @internal\n */\n\nlet DlDateTimeStringModule = /*#__PURE__*/(() => {\n  let DlDateTimeStringModule = class DlDateTimeStringModule {};\n\n  DlDateTimeStringModule.ɵfac = function DlDateTimeStringModule_Factory(t) {\n    return new (t || DlDateTimeStringModule)();\n  };\n\n  DlDateTimeStringModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimeStringModule\n  });\n  DlDateTimeStringModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DL_DATE_TIME_INPUT_FORMATS,\n      useValue: ɵ3\n    }, {\n      provide: DL_DATE_TIME_MODEL_FORMAT,\n      useValue: ɵ4\n    }, {\n      provide: DlDateAdapter,\n      useClass: DlDateAdapterString\n    }],\n    imports: [[DlDateTimeCoreModule]]\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * Emitted when the value of a date/time input changes.\n   */\n\n  return DlDateTimeStringModule;\n})();\n\nclass DlDateTimeInputChange {\n  /**\n   * Constructs a new instance.\n   * @param newValue\n   *  the new value of the date/time picker.\n   */\n  constructor(newValue) {\n    this._value = newValue;\n  }\n  /**\n   * Get the new value of the date/time picker.\n   * @returns the new value or null.\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n}\n\nvar DlDateTimeInputDirective_1;\n/**\n * @internal\n */\n\nconst moment$3 = _moment;\n/**\n *  This directive allows the user to enter dates, using the keyboard, into an input box and\n *  angular will then store a date value in the model.\n *\n *  The input format(s), display format, and model format are independent and fully customizable.\n */\n\nlet DlDateTimeInputDirective = DlDateTimeInputDirective_1 = class DlDateTimeInputDirective {\n  /**\n   * Constructs a new instance of this directive.\n   * @param _renderer\n   *  reference to the renderer.\n   * @param _elementRef\n   *  reference to this element.\n   * @param _dateAdapter\n   *  date adapter for the date type in the model.\n   * @param _displayFormat\n   *  from `DL_DATE_TIME_DISPLAY_FORMAT`, which defines the format to use for a valid date/time value.\n   * @param _inputFormats\n   *  from `DL_DATE_TIME_INPUT_FORMATS`, which defines the input formats that allowed as valid date/time values.\n   *  NB: moment is always in strict parse mode for this directive.\n   */\n  constructor(_renderer, _elementRef, _dateAdapter, _displayFormat, _inputFormats) {\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._dateAdapter = _dateAdapter;\n    this._displayFormat = _displayFormat;\n    this._inputFormats = _inputFormats;\n    /* tslint:disable:member-ordering */\n\n    this._filterValidator = control => {\n      // @ts-ignore\n      return (this._inputFilter || (() => true))(this._value) ? null : {\n        'dlDateTimeInputFilter': {\n          'value': control.value\n        }\n      };\n    };\n\n    this._inputFilter = () => true;\n\n    this._isValid = true;\n\n    this._parseValidator = () => {\n      return this._isValid ? null : {\n        'dlDateTimeInputParse': {\n          'text': this._elementRef.nativeElement.value\n        }\n      };\n    };\n\n    this._changed = [];\n    this._touched = [];\n    this._validator = Validators.compose([this._parseValidator, this._filterValidator]);\n\n    this._onValidatorChange = () => {};\n\n    this._value = undefined;\n    /**\n     * Emits when a `change` event when date/time is selected or\n     * the value of the date/time picker changes.\n     **/\n\n    this.dateChange = new EventEmitter();\n  }\n  /**\n   * Set a function used to determine whether or not the `value` entered by the user is allowed.\n   * @param inputFilterFunction\n   *   a function that returns `true` if the `value` entered by the user is allowed, otherwise `false`.\n   */\n\n\n  set dlDateTimeInputFilter(inputFilterFunction) {\n    this._inputFilter = inputFilterFunction || (() => true);\n\n    this._onValidatorChange();\n  }\n  /* tslint:enable:member-ordering */\n\n  /**\n   * Returns `D` value of the date/time input or `undefined` | `null` if no value is set.\n   **/\n\n\n  get value() {\n    return this._value;\n  }\n  /**\n   * Set the value of the date/time input to a value of `D` | `undefined` | `null`;\n   * @param newValue\n   *  the new value of the date/time input\n   */\n\n\n  set value(newValue) {\n    if (newValue !== this._value) {\n      this._value = newValue;\n\n      this._changed.forEach(onChanged => onChanged(this._value));\n    }\n  }\n  /**\n   * Emit a `change` event when the value of the input changes.\n   */\n\n\n  _onChange() {\n    this.dateChange.emit(new DlDateTimeInputChange(this._value));\n  }\n  /**\n   * Format the input text using {@link DL_DATE_TIME_DISPLAY_FORMAT} and mark the control as touched.\n   */\n\n\n  _onBlur() {\n    if (this._value) {\n      this._setElementValue(this._value);\n    }\n\n    this._touched.forEach(onTouched => onTouched());\n  }\n  /**\n   * Parse the user input into a possibly valid date.\n   * The model value is not set if the input is NOT one of the {@link DL_DATE_TIME_INPUT_FORMATS}.\n   * @param value\n   *   Value of the input control.\n   */\n\n\n  _onInput(value) {\n    const testDate = value === null || value === undefined || value === '' ? undefined : moment$3(value, this._inputFormats, true);\n    this._isValid = testDate && testDate.isValid();\n    this.value = this._isValid ? this._dateAdapter.fromMilliseconds(testDate.valueOf()) : undefined;\n  }\n  /**\n   * @internal\n   */\n\n\n  _setElementValue(value) {\n    if (value !== null && value !== undefined) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'value', moment$3(value).format(this._displayFormat));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  registerOnChange(onChange) {\n    this._changed.push(onChange);\n  }\n  /**\n   * @internal\n   */\n\n\n  registerOnTouched(onTouched) {\n    this._touched.push(onTouched);\n  }\n  /**\n   * @internal\n   */\n\n\n  registerOnValidatorChange(validatorOnChange) {\n    this._onValidatorChange = validatorOnChange;\n  }\n  /**\n   * @internal\n   */\n\n\n  setDisabledState(isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n  /**\n   * @internal\n   */\n\n\n  validate(control) {\n    return this._validator(control);\n  }\n  /**\n   * @internal\n   */\n\n\n  writeValue(value) {\n    this._isValid = true;\n    this.value = value;\n\n    this._setElementValue(value);\n  }\n\n};\n\nDlDateTimeInputDirective.ɵfac = function DlDateTimeInputDirective_Factory(t) {\n  return new (t || DlDateTimeInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DlDateAdapter), ɵngcc0.ɵɵdirectiveInject(DL_DATE_TIME_DISPLAY_FORMAT), ɵngcc0.ɵɵdirectiveInject(DL_DATE_TIME_INPUT_FORMATS));\n};\n\nDlDateTimeInputDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: DlDateTimeInputDirective,\n  selectors: [[\"input\", \"dlDateTimeInput\", \"\"]],\n  hostBindings: function DlDateTimeInputDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"change\", function DlDateTimeInputDirective_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"blur\", function DlDateTimeInputDirective_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"input\", function DlDateTimeInputDirective_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      });\n    }\n  },\n  inputs: {\n    dlDateTimeInputFilter: \"dlDateTimeInputFilter\"\n  },\n  outputs: {\n    dateChange: \"dateChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: DlDateTimeInputDirective_1,\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: DlDateTimeInputDirective_1,\n    multi: true\n  }])]\n});\n\nDlDateTimeInputDirective.ctorParameters = () => [{\n  type: Renderer2\n}, {\n  type: ElementRef\n}, {\n  type: DlDateAdapter\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [DL_DATE_TIME_DISPLAY_FORMAT]\n  }]\n}, {\n  type: Array,\n  decorators: [{\n    type: Inject,\n    args: [DL_DATE_TIME_INPUT_FORMATS]\n  }]\n}];\n\n__decorate([Output()], DlDateTimeInputDirective.prototype, \"dateChange\", void 0);\n\n__decorate([Input()], DlDateTimeInputDirective.prototype, \"dlDateTimeInputFilter\", null);\n\n__decorate([HostListener('change')], DlDateTimeInputDirective.prototype, \"_onChange\", null);\n\n__decorate([HostListener('blur')], DlDateTimeInputDirective.prototype, \"_onBlur\", null);\n\n__decorate([HostListener('input', ['$event.target.value'])], DlDateTimeInputDirective.prototype, \"_onInput\", null);\n\nDlDateTimeInputDirective = DlDateTimeInputDirective_1 = __decorate([__param(3, Inject(DL_DATE_TIME_DISPLAY_FORMAT)), __param(4, Inject(DL_DATE_TIME_INPUT_FORMATS))], DlDateTimeInputDirective);\n/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * Import this module to allow date/time input.\n * @internal\n **/\n\nlet DlDateTimeInputModule = /*#__PURE__*/(() => {\n  let DlDateTimeInputModule = class DlDateTimeInputModule {};\n\n  DlDateTimeInputModule.ɵfac = function DlDateTimeInputModule_Factory(t) {\n    return new (t || DlDateTimeInputModule)();\n  };\n\n  DlDateTimeInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimeInputModule\n  });\n  DlDateTimeInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * Emitted when the value of a date/time picker changes.\n   */\n\n  return DlDateTimeInputModule;\n})();\n\nclass DlDateTimePickerChange {\n  /**\n   * Constructs a new instance.\n   * @param newValue\n   *  the new value of the date/time picker.\n   */\n  constructor(newValue) {\n    this._value = newValue;\n  }\n  /**\n   * Get the new value of the date/time picker.\n   * @returns the new value or null.\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n}\n/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\n\n\nconst moment$4 = _moment;\n/**\n * Default implementation for the `day` view.\n */\n\nlet DlDayModelProvider = /*#__PURE__*/(() => {\n  class DlDayModelProvider {\n    /**\n     * Receives input changes detected by Angular.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n    onChanges( // @ts-ignore\n    changes) {}\n    /**\n     * Returns the `day` model for the specified moment in `local` time with the\n     * `active` day set to the first day of the month.\n     *\n     * The `day` model represents a month (42 days) as six rows with seven columns\n     * and each cell representing one-day increments.\n     *\n     * The `day` always starts at midnight.\n     *\n     * Each cell represents a one-day increment at midnight.\n     *\n     * @param milliseconds\n     *  the moment in time from which the minute model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n\n\n    getModel(milliseconds, selectedMilliseconds) {\n      const startOfMonth = moment$4(milliseconds).startOf('month');\n      const endOfMonth = moment$4(milliseconds).endOf('month');\n      const startOfView = moment$4(startOfMonth).subtract(Math.abs(startOfMonth.weekday()), 'days');\n      const rowNumbers = [0, 1, 2, 3, 4, 5];\n      const columnNumbers = [0, 1, 2, 3, 4, 5, 6];\n      const previousMonth = moment$4(startOfMonth).subtract(1, 'month');\n      const nextMonth = moment$4(startOfMonth).add(1, 'month');\n      const activeValue = moment$4(milliseconds).startOf('day').valueOf();\n      const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined ? selectedMilliseconds : moment$4(selectedMilliseconds).startOf('day').valueOf();\n      return {\n        viewName: 'day',\n        viewLabel: startOfMonth.format('MMM YYYY'),\n        activeDate: activeValue,\n        leftButton: {\n          value: previousMonth.valueOf(),\n          ariaLabel: `Go to ${previousMonth.format('MMM YYYY')}`,\n          classes: {}\n        },\n        upButton: {\n          value: startOfMonth.valueOf(),\n          ariaLabel: `Go to month view`,\n          classes: {}\n        },\n        rightButton: {\n          value: nextMonth.valueOf(),\n          ariaLabel: `Go to ${nextMonth.format('MMM YYYY')}`,\n          classes: {}\n        },\n        rowLabels: columnNumbers.map(column => moment$4().weekday(column).format('dd')),\n        rows: rowNumbers.map(rowOfDays)\n      };\n\n      function rowOfDays(rowNumber) {\n        const currentMoment = moment$4();\n        const cells = columnNumbers.map(columnNumber => {\n          const dayMoment = moment$4(startOfView).add(rowNumber * columnNumbers.length + columnNumber, 'days');\n          return {\n            display: dayMoment.format('D'),\n            ariaLabel: dayMoment.format('ll'),\n            value: dayMoment.valueOf(),\n            classes: {\n              'dl-abdtp-active': activeValue === dayMoment.valueOf(),\n              'dl-abdtp-future': dayMoment.isAfter(endOfMonth),\n              'dl-abdtp-past': dayMoment.isBefore(startOfMonth),\n              'dl-abdtp-selected': selectedValue === dayMoment.valueOf(),\n              'dl-abdtp-now': dayMoment.isSame(currentMoment, 'day')\n            }\n          };\n        });\n        return {\n          cells\n        };\n      }\n    }\n    /**\n     * Move the active `day` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` day being part of a different month than\n     * the specified `fromMilliseconds`, in this case the month represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `day` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `day` one row `down` from the specified moment in time.\n     */\n\n\n    goDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).add(7, 'days').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `day` one row `up` from the specified moment in time.\n     *\n     * Moving `up` can result in the `active` day being part of a different month than\n     * the specified `fromMilliseconds`, in this case the month represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `day` model `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `day` one row `up` from the specified moment in time.\n     */\n\n\n    goUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).subtract(7, 'days').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` day one cell `left` in the current `day` view.\n     *\n     * Moving `left` can result in the `active` day being part of a different month than\n     * the specified `fromMilliseconds`, in this case the month represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `day` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `day` one cell to the `left` of the specified moment in time.\n     */\n\n\n    goLeft(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` day one cell `right` in the current `day` view.\n     *\n     * Moving `right` can result in the `active` day being part of a different month than\n     * the specified `fromMilliseconds`, in this case the month represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `day` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `day` one cell to the `right` of the specified moment in time.\n     */\n\n\n    goRight(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `day` one month `down` from the specified moment in time.\n     *\n     * Paging `down` will result in the `active` day being part of a different month than\n     * the specified `fromMilliseconds`. As a result, the month represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `day` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `day` one month `down` from the specified moment in time.\n     */\n\n\n    pageDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `day` one month `up` from the specified moment in time.\n     *\n     * Paging `up` will result in the `active` day being part of a different month than\n     * the specified `fromMilliseconds`. As a result, the month represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `day` model page `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `day` one month `up` from the specified moment in time.\n     */\n\n\n    pageUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `day` to the last day of the month.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different day than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the last day of the month will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the last cell in the view as the active `day`.\n     */\n\n\n    goEnd(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).endOf('month').startOf('day').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `day` to the first day of the month.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different day than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the first day of the month will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the first cell in the view as the active `day`.\n     */\n\n\n    goHome(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$4(fromMilliseconds).startOf('month').valueOf(), selectedMilliseconds);\n    }\n\n  }\n\n  DlDayModelProvider.ɵfac = function DlDayModelProvider_Factory(t) {\n    return new (t || DlDayModelProvider)();\n  };\n\n  DlDayModelProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlDayModelProvider,\n    factory: DlDayModelProvider.ɵfac\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * Work around for moment namespace conflict when used with webpack and rollup.\n   * See https://github.com/dherges/ng-packagr/issues/163\n   *\n   * Depending on whether rollup is used, moment needs to be imported differently.\n   * Since Moment.js doesn't have a default export, we normally need to import using\n   * the `* as`syntax.\n   *\n   * rollup creates a synthetic default module and we thus need to import it using\n   * the `default as` syntax.\n   *\n   * @internal\n   **/\n\n  return DlDayModelProvider;\n})();\nconst moment$5 = _moment;\n/**\n * Default implementation for the `hour` view.\n */\n\nlet DlHourModelProvider = /*#__PURE__*/(() => {\n  class DlHourModelProvider {\n    /**\n     * Receives input changes detected by Angular.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n    onChanges( // @ts-ignore\n    changes) {}\n    /**\n     * Returns the `hour` model for the specified moment in `local` time with the\n     * `active` hour set to the beginning of the day.\n     *\n     * The `hour` model represents a day (24 hours) as six rows with four columns\n     * and each cell representing one-hour increments.\n     *\n     * The hour always starts at the beginning of the hour.\n     *\n     * Each cell represents a one-hour increment starting at midnight.\n     *\n     * @param milliseconds\n     *  the moment in time from which the minute model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n\n\n    getModel(milliseconds, selectedMilliseconds) {\n      const startDate = moment$5(milliseconds).startOf('day');\n      const rowNumbers = [0, 1, 2, 3, 4, 5];\n      const columnNumbers = [0, 1, 2, 3];\n      const previousDay = moment$5(startDate).subtract(1, 'day');\n      const nextDay = moment$5(startDate).add(1, 'day');\n      const activeValue = moment$5(milliseconds).startOf('hour').valueOf();\n      const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined ? selectedMilliseconds : moment$5(selectedMilliseconds).startOf('hour').valueOf();\n      return {\n        viewName: 'hour',\n        viewLabel: startDate.format('ll'),\n        activeDate: activeValue,\n        leftButton: {\n          value: previousDay.valueOf(),\n          ariaLabel: `Go to ${previousDay.format('ll')}`,\n          classes: {}\n        },\n        upButton: {\n          value: startDate.valueOf(),\n          ariaLabel: `Go to ${startDate.format('MMM YYYY')}`,\n          classes: {}\n        },\n        rightButton: {\n          value: nextDay.valueOf(),\n          ariaLabel: `Go to ${nextDay.format('ll')}`,\n          classes: {}\n        },\n        rows: rowNumbers.map(rowOfHours)\n      };\n\n      function rowOfHours(rowNumber) {\n        const currentMoment = moment$5();\n        const cells = columnNumbers.map(columnNumber => {\n          const hourMoment = moment$5(startDate).add(rowNumber * columnNumbers.length + columnNumber, 'hours');\n          return {\n            display: hourMoment.format('LT'),\n            ariaLabel: hourMoment.format('LLL'),\n            value: hourMoment.valueOf(),\n            classes: {\n              'dl-abdtp-active': activeValue === hourMoment.valueOf(),\n              'dl-abdtp-selected': selectedValue === hourMoment.valueOf(),\n              'dl-abdtp-now': hourMoment.isSame(currentMoment, 'hour')\n            }\n          };\n        });\n        return {\n          cells\n        };\n      }\n    }\n    /**\n     * Move the active `hour` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one row `down` from the specified moment in time.\n     */\n\n\n    goDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).add(4, 'hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `hour` one row `up` from the specified moment in time.\n     *\n     * Moving `up` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one row `up` from the specified moment in time.\n     */\n\n\n    goUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).subtract(4, 'hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` hour one cell `left` in the current `hour` view.\n     *\n     * Moving `left` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `hour` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one cell to the `left` of the specified moment in time.\n     */\n\n\n    goLeft(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` hour one cell `right` in the current `hour` view.\n     *\n     * Moving `right` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `hour` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one cell to the `right` of the specified moment in time.\n     */\n\n\n    goRight(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `hour` one day `down` from the specified moment in time.\n     *\n     * Paging `down` will result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`. As a result, the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one day `down` from the specified moment in time.\n     */\n\n\n    pageDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `hour` one day `up` from the specified moment in time.\n     *\n     * Paging `up` will result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`. As a result, the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model page `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one day `up` from the specified moment in time.\n     */\n\n\n    pageUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `hour` to `11:00 pm` of the current day.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different day than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which `11:00 pm` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `11:00 pm` cell in the view as the active `hour`.\n     */\n\n\n    goEnd(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).endOf('day').startOf('hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `hour` to `midnight` of the current day.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different day than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which `midnight` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `midnight` cell in the view as the active `hour`.\n     */\n\n\n    goHome(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$5(fromMilliseconds).startOf('day').valueOf(), selectedMilliseconds);\n    }\n\n  }\n\n  DlHourModelProvider.ɵfac = function DlHourModelProvider_Factory(t) {\n    return new (t || DlHourModelProvider)();\n  };\n\n  DlHourModelProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlHourModelProvider,\n    factory: DlHourModelProvider.ɵfac\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * Work around for moment namespace conflict when used with webpack and rollup.\n   * See https://github.com/dherges/ng-packagr/issues/163\n   *\n   * Depending on whether rollup is used, moment needs to be imported differently.\n   * Since Moment.js doesn't have a default export, we normally need to import using\n   * the `* as`syntax.\n   *\n   * rollup creates a synthetic default module and we thus need to import it using\n   * the `default as` syntax.\n   *\n   * @internal\n   **/\n\n  return DlHourModelProvider;\n})();\nconst moment$6 = _moment;\n/**\n * Default implementation for the `minute` view.\n */\n\nlet DlMinuteModelProvider = /*#__PURE__*/(() => {\n  class DlMinuteModelProvider {\n    constructor() {\n      this.step = 5;\n    }\n    /**\n     * Receives `minuteStep` configuration changes detected by Angular.\n     *\n     * Changes where the value has not changed are ignored.\n     *\n     * Setting `minuteStep` to `null` or `undefined` will result in a\n     * minuteStep of `5`.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n\n\n    onChanges(changes) {\n      const minuteStepChange = changes['minuteStep'];\n\n      if (minuteStepChange && minuteStepChange.previousValue !== minuteStepChange.currentValue) {\n        this.step = minuteStepChange.currentValue;\n\n        if (this.step === null || this.step === undefined) {\n          this.step = 5;\n        }\n      }\n    }\n    /**\n     * Returns the `minute` model for the specified moment in `local` time with the\n     * `active` minute set to the beginning of the hour.\n     *\n     * The `minute` model represents an hour (60 minutes) as three rows with four columns\n     * and each cell representing 5-minute increments.\n     *\n     * The hour always starts at midnight.\n     *\n     * Each cell represents a 5-minute increment starting at midnight.\n     *\n     * The `active` minute will be the 5-minute increments less than or equal to the specified milliseconds.\n     *\n     * @param milliseconds\n     *  the moment in time from which the minute model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n\n\n    getModel(milliseconds, selectedMilliseconds) {\n      const startDate = moment$6(milliseconds).startOf('hour');\n      const currentMilliseconds = moment$6().valueOf();\n      const minuteSteps = new Array(Math.ceil(60 / this.step)).fill(0).map((zero, index) => zero + index * this.step);\n      const minuteValues = minuteSteps.map(minutesToAdd => moment$6(startDate).add(minutesToAdd, 'minutes').valueOf());\n      const activeValue = moment$6(minuteValues.filter(value => value <= milliseconds).pop()).valueOf();\n      const nowValue = currentMilliseconds >= startDate.valueOf() && currentMilliseconds <= moment$6(startDate).endOf('hour').valueOf() ? moment$6(minuteValues.filter(value => value <= currentMilliseconds).pop()).valueOf() : null;\n      const previousHour = moment$6(startDate).subtract(1, 'hour');\n      const nextHour = moment$6(startDate).add(1, 'hour');\n      const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined ? selectedMilliseconds : moment$6(minuteValues.filter(value => value <= selectedMilliseconds).pop()).valueOf();\n      const rows = new Array(Math.ceil(minuteSteps.length / 4)).fill(0).map((zero, index) => zero + index).map(value => {\n        return {\n          cells: minuteSteps.slice(value * 4, value * 4 + 4).map(rowOfMinutes)\n        };\n      });\n      return {\n        viewName: 'minute',\n        viewLabel: startDate.format('lll'),\n        activeDate: activeValue,\n        leftButton: {\n          value: previousHour.valueOf(),\n          ariaLabel: `Go to ${previousHour.format('lll')}`,\n          classes: {}\n        },\n        upButton: {\n          value: startDate.valueOf(),\n          ariaLabel: `Go to ${startDate.format('ll')}`,\n          classes: {}\n        },\n        rightButton: {\n          value: nextHour.valueOf(),\n          ariaLabel: `Go to ${nextHour.format('lll')}`,\n          classes: {}\n        },\n        rows\n      };\n\n      function rowOfMinutes(stepMinutes) {\n        const minuteMoment = moment$6(startDate).add(stepMinutes, 'minutes');\n        return {\n          display: minuteMoment.format('LT'),\n          ariaLabel: minuteMoment.format('LLL'),\n          value: minuteMoment.valueOf(),\n          classes: {\n            'dl-abdtp-active': activeValue === minuteMoment.valueOf(),\n            'dl-abdtp-selected': selectedValue === minuteMoment.valueOf(),\n            'dl-abdtp-now': nowValue === minuteMoment.valueOf()\n          }\n        };\n      }\n    }\n    /**\n     * Move the active `minute` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` minute being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `minute` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one row `down` from the specified moment in time.\n     */\n\n\n    goDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).add(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `minute` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` minute being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `minute` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one row `down` from the specified moment in time.\n     */\n\n\n    goUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).subtract(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` date one cell to `left` in the current `minute` view.\n     *\n     * Moving `left` can result in the `active` hour being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `minute` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one cell to the `left` of the specified moment in time.\n     */\n\n\n    goLeft(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).subtract(this.step, 'minutes').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move `active` minute one cell to `right` in the current `minute` view.\n     *\n     * Moving `right` can result in the `active` hour being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `minute` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one cell to the `right` of the specified moment in time.\n     */\n\n\n    goRight(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).add(this.step, 'minutes').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `minute` one hour `down` from the specified moment in time.\n     *\n     * The `active` minute will be `one (1) hour after` the specified milliseconds.\n     * This moves the `active` date one `page` `down` from the current `minute` view.\n     *\n     * The next cell `page-down` will be in a different hour than the currently\n     * displayed view and the model time range will include the new active cell.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year `down` from the specified moment in time.\n     */\n\n\n    pageDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `minute` one hour `up` from the specified moment in time.\n     *\n     * The `active` minute will be `one (1) hour before` the specified milliseconds.\n     * This moves the `active` date one `page` `down` from the current `minute` view.\n     *\n     * The next cell `page-up` will be in a different hour than the currently\n     * displayed view and the model time range will include the new active cell.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year `down` from the specified moment in time.\n     */\n\n\n    pageUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `minute` to the last cell of the current hour.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different hour than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the last cell will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the last cell in the view as the active `minute`.\n     */\n\n\n    goEnd(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).endOf('hour').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `minute` to the first cell of the current hour.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different hour than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the first cell will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the first cell in the view as the active `minute`.\n     */\n\n\n    goHome(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$6(fromMilliseconds).startOf('hour').valueOf(), selectedMilliseconds);\n    }\n\n  }\n\n  DlMinuteModelProvider.ɵfac = function DlMinuteModelProvider_Factory(t) {\n    return new (t || DlMinuteModelProvider)();\n  };\n\n  DlMinuteModelProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlMinuteModelProvider,\n    factory: DlMinuteModelProvider.ɵfac\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * Work around for moment namespace conflict when used with webpack and rollup.\n   * See https://github.com/dherges/ng-packagr/issues/163\n   *\n   * Depending on whether rollup is used, moment needs to be imported differently.\n   * Since Moment.js doesn't have a default export, we normally need to import using\n   * the `* as`syntax.\n   *\n   * rollup creates a synthetic default module and we thus need to import it using\n   * the `default as` syntax.\n   *\n   * @internal\n   **/\n\n  return DlMinuteModelProvider;\n})();\nconst moment$7 = _moment;\n/**\n * Default implementation for the `month` view.\n */\n\nlet DlMonthModelProvider = /*#__PURE__*/(() => {\n  class DlMonthModelProvider {\n    /**\n     * Receives input changes detected by Angular.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n    onChanges( // @ts-ignore\n    changes) {}\n    /**\n     * Returns the `month` model for the specified moment in `local` time with the\n     * `active` month set to the first day of the specified month.\n     *\n     * The `month` model represents a year (12 months) as three rows with four columns.\n     *\n     * The year always starts in January.\n     *\n     * Each cell represents midnight on the 1st day of the month.\n     *\n     * The `active` month will be the January of year of the specified milliseconds.\n     *\n     * @param milliseconds\n     *  the moment in time from which the month model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n\n\n    getModel(milliseconds, selectedMilliseconds) {\n      const startDate = moment$7(milliseconds).startOf('year');\n      const rowNumbers = [0, 1, 2];\n      const columnNumbers = [0, 1, 2, 3];\n      const previousYear = moment$7(startDate).subtract(1, 'year');\n      const nextYear = moment$7(startDate).add(1, 'year');\n      const activeValue = moment$7(milliseconds).startOf('month').valueOf();\n      const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined ? selectedMilliseconds : moment$7(selectedMilliseconds).startOf('month').valueOf();\n      return {\n        viewName: 'month',\n        viewLabel: startDate.format('YYYY'),\n        activeDate: activeValue,\n        leftButton: {\n          value: previousYear.valueOf(),\n          ariaLabel: `Go to ${previousYear.format('YYYY')}`,\n          classes: {}\n        },\n        upButton: {\n          value: startDate.valueOf(),\n          ariaLabel: `Go to ${startDate.format('YYYY')}`,\n          classes: {}\n        },\n        rightButton: {\n          value: nextYear.valueOf(),\n          ariaLabel: `Go to ${nextYear.format('YYYY')}`,\n          classes: {}\n        },\n        rows: rowNumbers.map(rowOfMonths)\n      };\n\n      function rowOfMonths(rowNumber) {\n        const currentMoment = moment$7();\n        const cells = columnNumbers.map(columnNumber => {\n          const monthMoment = moment$7(startDate).add(rowNumber * columnNumbers.length + columnNumber, 'months');\n          return {\n            display: monthMoment.format('MMM'),\n            ariaLabel: monthMoment.format('MMM YYYY'),\n            value: monthMoment.valueOf(),\n            classes: {\n              'dl-abdtp-active': activeValue === monthMoment.valueOf(),\n              'dl-abdtp-selected': selectedValue === monthMoment.valueOf(),\n              'dl-abdtp-now': monthMoment.isSame(currentMoment, 'month')\n            }\n          };\n        });\n        return {\n          cells\n        };\n      }\n    }\n    /**\n     * Move the active `month` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` month being part of a different year than\n     * the specified `fromMilliseconds`, in this case the year represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one row `down` from the specified moment in time.\n     */\n\n\n    goDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).add(4, 'month').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `month` one row `up` from the specified moment in time.\n     *\n     * Moving `up` can result in the `active` month being part of a different year than\n     * the specified `fromMilliseconds`, in this case the year represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the previous `month` model `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one row `up` from the specified moment in time.\n     */\n\n\n    goUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).subtract(4, 'month').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `month` one (1) month to the `left` of the specified moment in time.\n     *\n     * Moving `left` can result in the `active` month being part of a different year than\n     * the specified `fromMilliseconds`, in this case the year represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `month` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one month to the `left` of the specified moment in time.\n     */\n\n\n    goLeft(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `month` one (1) month to the `right` of the specified moment in time.\n     *\n     * The `active` month will be `one (1) month after` the specified milliseconds.\n     * This moves the `active` date one month `right` in the current `month` view.\n     *\n     * Moving `right` can result in the `active` month being part of a different year than\n     * the specified `fromMilliseconds`, in this case the year represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `month` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year to the `right` of the specified moment in time.\n     */\n\n\n    goRight(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `month` one year `down` from the specified moment in time.\n     *\n     * Paging `down` will result in the `active` month being part of a different year than\n     * the specified `fromMilliseconds`. As a result, the year represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year `down` from the specified moment in time.\n     */\n\n\n    pageDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).add(12, 'months').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `month` one year `down` from the specified moment in time.\n     *\n     * Paging `up` will result in the `active` month being part of a different year than\n     * the specified `fromMilliseconds`. As a result, the year represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model page `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year `up` from the specified moment in time.\n     */\n\n\n    pageUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).subtract(12, 'months').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `month` to `December` of the current year.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different year than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which `December 1` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `December` cell in the view as the active `month`.\n     */\n\n\n    goEnd(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).endOf('year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `month` to `January` of the current year.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different year than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which `January 1` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `January` cell in the view as the active `month`.\n     */\n\n\n    goHome(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$7(fromMilliseconds).startOf('year').valueOf(), selectedMilliseconds);\n    }\n\n  }\n\n  DlMonthModelProvider.ɵfac = function DlMonthModelProvider_Factory(t) {\n    return new (t || DlMonthModelProvider)();\n  };\n\n  DlMonthModelProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlMonthModelProvider,\n    factory: DlMonthModelProvider.ɵfac\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  /**\n   * Work around for moment namespace conflict when used with webpack and rollup.\n   * See https://github.com/dherges/ng-packagr/issues/163\n   *\n   * Depending on whether rollup is used, moment needs to be imported differently.\n   * Since Moment.js doesn't have a default export, we normally need to import using\n   * the `* as`syntax.\n   *\n   * rollup creates a synthetic default module and we thus need to import it using\n   * the `default as` syntax.\n   *\n   * @internal\n   **/\n\n  return DlMonthModelProvider;\n})();\nconst moment$8 = _moment;\n/**\n * Default implementation for the `year` view.\n */\n\nlet DlYearModelProvider = /*#__PURE__*/(() => {\n  class DlYearModelProvider {\n    /**\n     * Create a moment at midnight january 1 at the start of the current decade.\n     * The start of the decade is always a year ending in zero.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the start of the decade will be determined.\n     * @returns\n     *  moment at midnight january 1 at the start of the current decade.\n     * @internal\n     */\n    static getStartOfDecade(fromMilliseconds) {\n      // Truncate the last digit from the current year to get the start of the decade\n      const startDecade = Math.trunc(moment$8(fromMilliseconds).year() / 10) * 10;\n      return moment$8({\n        year: startDecade\n      }).startOf('year');\n    }\n    /**\n     * Receives input changes detected by Angular.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n\n\n    onChanges( // @ts-ignore\n    changes) {}\n    /**\n     * Returns the `year` model for the specified moment in `local` time with the\n     * `active` year set to January 1 of the specified year.\n     *\n     * The `year` model represents a decade (10 years) as two rows with five columns.\n     *\n     * The decade always starts on a year ending with zero.\n     *\n     * Each cell represents midnight January 1 of the indicated year.\n     *\n     * The `active` year will be the January 1 of year of the specified milliseconds.\n     *\n     * @param milliseconds\n     *  the moment in time from which the year model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n\n\n    getModel(milliseconds, selectedMilliseconds) {\n      const rowNumbers = [0, 1];\n      const columnNumbers = [0, 1, 2, 3, 4];\n      const startYear = moment$8(milliseconds).startOf('year');\n      const startDate = DlYearModelProvider.getStartOfDecade(milliseconds);\n      const futureYear = startDate.year() + 9;\n      const pastYear = startDate.year();\n      const activeValue = startYear.valueOf();\n      const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined ? selectedMilliseconds : moment$8(selectedMilliseconds).startOf('year').valueOf();\n      return {\n        viewName: 'year',\n        viewLabel: `${pastYear}-${futureYear}`,\n        activeDate: activeValue,\n        leftButton: {\n          value: moment$8(startDate).subtract(10, 'years').valueOf(),\n          ariaLabel: `Go to ${pastYear - 10}-${pastYear - 1}`,\n          classes: {}\n        },\n        rightButton: {\n          value: moment$8(startDate).add(10, 'years').valueOf(),\n          ariaLabel: `Go to ${futureYear + 1}-${futureYear + 10}`,\n          classes: {}\n        },\n        rows: rowNumbers.map(rowOfYears.bind(this))\n      };\n\n      function rowOfYears(rowNumber) {\n        const currentMoment = moment$8();\n        const cells = columnNumbers.map(columnNumber => {\n          const yearMoment = moment$8(startDate).add(rowNumber * columnNumbers.length + columnNumber, 'years');\n          return {\n            display: yearMoment.format('YYYY'),\n            value: yearMoment.valueOf(),\n            classes: {\n              'dl-abdtp-active': activeValue === yearMoment.valueOf(),\n              'dl-abdtp-selected': selectedValue === yearMoment.valueOf(),\n              'dl-abdtp-now': yearMoment.isSame(currentMoment, 'year')\n            }\n          };\n        });\n        return {\n          cells\n        };\n      }\n    }\n    /**\n     * Move the active `year` one row `down` from the specified moment in time.\n     *\n     * The `active` year will be the January 1 `five (5) years after` the specified milliseconds.\n     * This moves the `active` date one row `down` in the current `year` view.\n     *\n     * Moving `down` can result in the `active` year being part of a different decade than\n     * the specified `fromMilliseconds`, in this case the decade represented by the model\n     * will change to show the correct decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `year` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `year` one row `down` from the specified moment in time.\n     */\n\n\n    goDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$8(fromMilliseconds).add(5, 'year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `year` one row `up` from the specified moment in time.\n     *\n     * The `active` year will be the January 1 `five (5) years before` the specified milliseconds.\n     * This moves the `active` date one row `up` in the current `year` view.\n     *\n     * Moving `up` can result in the `active` year being part of a different decade than\n     * the specified `fromMilliseconds`, in this case the decade represented by the model\n     * will change to show the correct decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the previous `year` model `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `year` one row `up` from the specified moment in time.\n     */\n\n\n    goUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$8(fromMilliseconds).subtract(5, 'year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `year` one (1) year to the `left` of the specified moment in time.\n     *\n     * The `active` year will be the January 1 `one (1) year before` the specified milliseconds.\n     * This moves the `active` date one year `left` in the current `year` view.\n     *\n     * Moving `left` can result in the `active` year being part of a different decade than\n     * the specified `fromMilliseconds`, in this case the decade represented by the model\n     * will change to show the correct decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `year` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `year` one year to the `left` of the specified moment in time.\n     */\n\n\n    goLeft(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$8(fromMilliseconds).subtract(1, 'year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `year` one (1) year to the `right` of the specified moment in time.\n     *\n     * The `active` year will be the January 1 `one (1) year after` the specified milliseconds.\n     * This moves the `active` date one year `right` in the current `year` view.\n     *\n     * Moving `right` can result in the `active` year being part of a different decade than\n     * the specified `fromMilliseconds`, in this case the decade represented by the model\n     * will change to show the correct decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `year` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `year` one year to the `right` of the specified moment in time.\n     */\n\n\n    goRight(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$8(fromMilliseconds).add(1, 'year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `year` one decade `down` from the specified moment in time.\n     *\n     * The `active` year will be the January 1 `ten (10) years after` the specified milliseconds.\n     * This moves the `active` date one `page` `down` from the current `year` view.\n     *\n     * Paging `down` will result in the `active` year being part of a different decade than\n     * the specified `fromMilliseconds`. As a result, the decade represented by the model\n     * will change to show the correct decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `year` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `year` one decade `down` from the specified moment in time.\n     */\n\n\n    pageDown(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$8(fromMilliseconds).add(10, 'year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the active `year` one decade `up` from the specified moment in time.\n     *\n     * The `active` year will be the January 1 `ten (10) years before` the specified milliseconds.\n     * This moves the `active` date one `page-up` from the current `year` view.\n     *\n     * Paging `up` will result in the `active` year being part of a different decade than\n     * the specified `fromMilliseconds`. As a result, the decade represented by the model\n     * will change to show the correct decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `year` model page `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `year` one decade `up` from the specified moment in time.\n     */\n\n\n    pageUp(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(moment$8(fromMilliseconds).subtract(10, 'year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `year` to the `last` year in the decade.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different decade than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `last` active `year` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `last` cell in the view as the active `year`.\n     */\n\n\n    goEnd(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(DlYearModelProvider.getStartOfDecade(fromMilliseconds).add(9, 'years').endOf('year').valueOf(), selectedMilliseconds);\n    }\n    /**\n     * Move the `active` `year` to the `first` year in the decade.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different decade than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `first` active `year` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `first` cell in the view as the active `year`.\n     */\n\n\n    goHome(fromMilliseconds, selectedMilliseconds) {\n      return this.getModel(DlYearModelProvider.getStartOfDecade(fromMilliseconds).startOf('year').valueOf(), selectedMilliseconds);\n    }\n\n  }\n\n  DlYearModelProvider.ɵfac = function DlYearModelProvider_Factory(t) {\n    return new (t || DlYearModelProvider)();\n  };\n\n  DlYearModelProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DlYearModelProvider,\n    factory: DlYearModelProvider.ɵfac\n  });\n  /**\n   * @license\n   * Copyright 2013-present Dale Lotts All Rights Reserved.\n   * http://www.dalelotts.com\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n   */\n\n  return DlYearModelProvider;\n})();\nvar DlDateTimePickerComponent_1;\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\n\nconst moment$9 = _moment;\n/**\n * Maps key codes to the model provider function name\n * that should be called to perform the action.\n *\n * @internal\n **/\n\nconst keyCodeToModelProviderMethod = {\n  'ArrowDown': 'goDown',\n  'ArrowLeft': 'goLeft',\n  'ArrowRight': 'goRight',\n  'ArrowUp': 'goUp',\n  'Down': 'goDown',\n  'End': 'goEnd',\n  'Home': 'goHome',\n  'Left': 'goLeft',\n  'PageDown': 'pageDown',\n  'PageUp': 'pageUp',\n  'Right': 'goRight',\n  'Up': 'goUp',\n  33: 'pageUp',\n  34: 'pageDown',\n  35: 'goEnd',\n  36: 'goHome',\n  37: 'goLeft',\n  38: 'goUp',\n  39: 'goRight',\n  40: 'goDown'\n};\n/**\n * List of view names for the calendar.\n *\n * This list must be in order from\n * smallest increment of time to largest increment of time.\n *\n * @internal\n **/\n\nconst VIEWS = ['minute', 'hour', 'day', 'month', 'year'];\n/**\n * Component that provides all of the user facing functionality of the date/time picker.\n */\n\nlet DlDateTimePickerComponent = DlDateTimePickerComponent_1 = class DlDateTimePickerComponent {\n  /**\n   * Used to construct a new instance of a date/time picker.\n   *\n   * @param _elementRef\n   *  reference to this element.\n   * @param _ngZone\n   *  reference to an NgZone instance used to select the active element outside of angular.\n   * @param _dateAdapter\n   *  date adapter for the date type in the model.\n   * @param yearModelComponent\n   *  provider for the year view model.\n   * @param monthModelComponent\n   *  provider for the month view model.\n   * @param dayModelComponent\n   *  provider for the day view model.\n   * @param hourModelComponent\n   *  provider for the hour view model.\n   * @param minuteModelComponent\n   *  provider for the minute view model.\n   */\n  constructor(_elementRef, _ngZone, _dateAdapter, // @ts-ignore\n  yearModelComponent, // @ts-ignore\n  monthModelComponent, // @ts-ignore\n  dayModelComponent, // @ts-ignore\n  hourModelComponent, // @ts-ignore\n  minuteModelComponent) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._dateAdapter = _dateAdapter;\n    this.yearModelComponent = yearModelComponent;\n    this.monthModelComponent = monthModelComponent;\n    this.dayModelComponent = dayModelComponent;\n    this.hourModelComponent = hourModelComponent;\n    this.minuteModelComponent = minuteModelComponent;\n    /**\n     * Change listener callback functions registered\n     * via `registerOnChange`\n     * @internal\n     **/\n\n    this._changed = [];\n    /**\n     * Maps view name to the next view (the view for the next smallest increment of time).\n     * @internal\n     **/\n\n    this._nextView = {\n      'year': 'month',\n      'month': 'day',\n      'day': 'hour',\n      'hour': 'minute'\n    };\n    /**\n     * Maps view name to the previous view (the view for the next largest increment of time).\n     * @internal\n     **/\n\n    this._previousView = {\n      'minute': 'hour',\n      'hour': 'day',\n      'day': 'month',\n      'month': 'year'\n    };\n    /**\n     * Touch listener callback functions registered\n     * via `registerOnChange`\n     * @internal\n     **/\n\n    this._touched = [];\n    /**\n     * Emits when a `change` event when date/time is selected or\n     * the value of the date/time picker changes.\n     **/\n\n    this.change = new EventEmitter();\n    /**\n     * Specifies the classes used to display the left icon.\n     *\n     * This component uses OPENICONIC https://useiconic.com/open\n     * by default but any icon library may be used.\n     */\n\n    this.leftIconClass = ['oi', 'oi-chevron-left'];\n    /**\n     * The highest view that the date/time picker can show.\n     * Setting this to a view less than year could make it more\n     * difficult for the end-user to navigate to certain dates.\n     */\n\n    this.maxView = 'year';\n    /**\n     * The view that will be used for date/time selection.\n     *\n     * The default of `minute  means that selection will not happen\n     * until the end-user clicks on a cell in the minute view.\n     *\n     * for example, if you want the end-user to select a only day (date),\n     * setting `minView` to `day` will cause selection to happen when the\n     * end-user selects a cell in the day view.\n     *\n     * NOTE: This must be set lower than or equal to `startView'\n     */\n\n    this.minView = 'minute';\n    /**\n     * The number of minutes between each `.dl-abdtp-minute` button.\n     *\n     * Must be greater than `0` and less than `60`.\n     */\n\n    this.minuteStep = 5;\n    /**\n     * Specifies the classes used to display the right icon.\n     *\n     * This component uses OPENICONIC https://useiconic.com/open\n     * by default but any icon library may be used.\n     */\n\n    this.rightIconClass = ['oi', 'oi-chevron-right'];\n    /* tslint:disable:member-ordering */\n\n    /**\n     *  Determine whether or not the `DateButton` is selectable by the end user.\n     */\n\n    this.selectFilter = () => true;\n    /**\n     * The initial view that the date/time picker will show.\n     * The picker will also return to this view after a date/time\n     * is selected.\n     *\n     * NOTE: This must be set lower than or equal to `maxView'\n     */\n\n\n    this.startView = 'day';\n    /**\n     * Specifies the classes used to display the up icon.\n     *\n     * This component uses OPENICONIC https://useiconic.com/open\n     * by default but any icon library may be used.\n     */\n\n    this.upIconClass = ['oi', 'oi-chevron-top'];\n    this._viewToModelProvider = {\n      year: yearModelComponent,\n      month: monthModelComponent,\n      day: dayModelComponent,\n      hour: hourModelComponent,\n      minute: minuteModelComponent\n    };\n  }\n  /* tslint:enable:member-ordering */\n\n  /**\n   * Set's the model for the current view after applying the selection filter.\n   *\n   * @internal\n   **/\n\n\n  set model(model) {\n    this._model = this.applySelectFilter(model);\n  }\n  /**\n   * Returns `D` value of the date/time picker or undefined/null if no value is set.\n   **/\n\n\n  get value() {\n    return this._value;\n  }\n  /**\n   * Sets value of the date/time picker and emits a change event if the\n   * new value is different from the previous value.\n   **/\n\n\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n      this.model = this._viewToModelProvider[this._model.viewName].getModel(this.getStartDate(), this.valueOf);\n\n      this._changed.forEach(f => f(value));\n\n      this.change.emit(new DlDateTimePickerChange(value));\n    }\n  }\n  /**\n   * Returns `milliseconds` value of the date/time picker or undefined/null if no value is set.\n   **/\n\n\n  get valueOf() {\n    return this._dateAdapter.toMilliseconds(this._value);\n  }\n  /**\n   * Applies the `selectionFilter` by adding the `dl-abdtp-disabled`\n   * class to any `DateButton` where `selectFilter` returned false.\n   *\n   * @param model\n   *  the new model\n   *\n   * @returns\n   *  the supplied model with zero or more `DateButton`'s\n   *  having the `dl-abdtp-disabled` class set to `true` if the\n   *  selection for that date should be disabled.\n   *\n   * @internal\n   */\n\n\n  applySelectFilter(model) {\n    if (this.selectFilter) {\n      model.rows = model.rows.map(row => {\n        row.cells.map(dateButton => {\n          const disabled = !this.selectFilter(dateButton, model.viewName);\n          dateButton.classes['dl-abdtp-disabled'] = disabled;\n\n          if (disabled) {\n            dateButton.classes['aria-disabled'] = true;\n          }\n\n          return dateButton;\n        });\n        return row;\n      });\n    }\n\n    return model;\n  }\n  /**\n   * Focuses the `.dl-abdtp-active` cell after the microtask queue is empty.\n   * @internal\n   **/\n\n\n  focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.dl-abdtp-active').focus();\n      });\n    });\n  }\n  /**\n   * Determines the start date for the picker.\n   * @internal\n   **/\n\n\n  getStartDate() {\n    if (hasValue(this._value)) {\n      return this._dateAdapter.toMilliseconds(this._value);\n    }\n\n    if (hasValue(this.startDate)) {\n      return this.startDate;\n    }\n\n    return moment$9().valueOf();\n  }\n  /**\n   * Determine the start view for the picker\n   * @returns\n   *  the largest time increment view between the `minView` or `minute` view and the `startView` or `day` view.\n   */\n\n\n  getStartView() {\n    const startIndex = Math.max(VIEWS.indexOf(this.minView || 'minute'), VIEWS.indexOf(this.startView || 'day'));\n    return VIEWS[startIndex];\n  }\n  /**\n   * Calls all registered `touch` callback functions.\n   * @internal\n   **/\n\n\n  onTouch() {\n    this._touched.forEach(onTouched => onTouched());\n  }\n  /**\n   * Receives configuration changes detected by Angular and passes the changes on\n   * to the model providers so the provider is aware of any necessary configuration\n   * changes (i.e. minuteStep)\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n\n\n  ngOnChanges(changes) {\n    Object.values(this._viewToModelProvider).forEach(provider => provider.onChanges(changes));\n\n    if (this._model) {\n      // only update the model after ngOnInit has set it the first time.\n      this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.activeDate, this.valueOf);\n    }\n  }\n  /**\n   * Sets the initial model.\n   *\n   * @internal\n   **/\n\n\n  ngOnInit() {\n    this.model = this._viewToModelProvider[this.getStartView()].getModel(this.getStartDate(), this.valueOf);\n  }\n  /**\n   * Handles click (and enter & space key down) events on the date elements.\n   *\n   * If the current view is the minimum view then the date value is selected\n   * and the picker returns to the start view.\n   *\n   * Otherwise the picker displays the next view with the next\n   * smallest time increment.\n   *\n   * @internal\n   **/\n\n\n  _onDateClick(dateButton) {\n    if (dateButton.classes['dl-abdtp-disabled']) {\n      return;\n    }\n\n    let nextView = this._nextView[this._model.viewName];\n\n    if ((this.minView || 'minute') === this._model.viewName) {\n      this.value = this._dateAdapter.fromMilliseconds(dateButton.value);\n      nextView = this.startView;\n    }\n\n    this.model = this._viewToModelProvider[nextView].getModel(dateButton.value, this.valueOf);\n    this.onTouch();\n  }\n  /**\n   * Handles click (and enter & space key down) events on the left button.\n   *\n   * Changes the displayed time range of the picker to the previous time range.\n   * For example, in year view, the previous decade is displayed.\n   *\n   * @internal\n   **/\n\n\n  _onLeftClick() {\n    this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.leftButton.value, this.valueOf);\n    this.onTouch();\n  }\n  /**\n   * Handles click (and enter & space key down) events on the up button.\n   *\n   * Changes the view of the picker to the next largest time increment.\n   * For example, in day view, the next view displayed will be month view.\n   *\n   * @internal\n   **/\n\n\n  _onUpClick() {\n    this.model = this._viewToModelProvider[this._previousView[this._model.viewName]].getModel(this._model.upButton.value, this.valueOf);\n  }\n  /**\n   * Handles click (and enter & space key down) events on the right button.\n   *\n   * Changes the displayed time range of the picker to the next time range.\n   * For example, in year view, the next decade is displayed.\n   *\n   * @internal\n   **/\n\n\n  _onRightClick() {\n    this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.rightButton.value, this.valueOf);\n    this.onTouch();\n  }\n  /**\n   * Handles various key down events to move the `active date` around the calendar.\n   *\n   * @internal\n   **/\n\n\n  _handleKeyDown($event) {\n    const functionName = keyCodeToModelProviderMethod[$event.key];\n\n    if (functionName) {\n      const modelProvider = this._viewToModelProvider[this._model.viewName];\n      this.model = modelProvider[functionName](this._model.activeDate, this.valueOf);\n      this.focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n      $event.preventDefault();\n    }\n  }\n  /**\n   * Implements ControlValueAccessor.registerOnChange to register change listeners.\n   * @internal\n   **/\n\n\n  registerOnChange(fn) {\n    this._changed.push(fn);\n  }\n  /**\n   * Implements ControlValueAccessor.registerOnTouched to register touch listeners.\n   * @internal\n   **/\n\n\n  registerOnTouched(fn) {\n    this._touched.push(fn);\n  }\n  /**\n   * Implements ControlValueAccessor.writeValue to store the value from the model.\n   * @internal\n   **/\n\n\n  writeValue(value) {\n    this.value = value;\n  }\n\n};\n\nDlDateTimePickerComponent.ɵfac = function DlDateTimePickerComponent_Factory(t) {\n  return new (t || DlDateTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DlDateAdapter), ɵngcc0.ɵɵdirectiveInject(DlYearModelProvider), ɵngcc0.ɵɵdirectiveInject(DlMonthModelProvider), ɵngcc0.ɵɵdirectiveInject(DlDayModelProvider), ɵngcc0.ɵɵdirectiveInject(DlHourModelProvider), ɵngcc0.ɵɵdirectiveInject(DlMinuteModelProvider));\n};\n\nDlDateTimePickerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: DlDateTimePickerComponent,\n  selectors: [[\"dl-date-time-picker\"]],\n  inputs: {\n    leftIconClass: \"leftIconClass\",\n    maxView: \"maxView\",\n    minView: \"minView\",\n    minuteStep: \"minuteStep\",\n    rightIconClass: \"rightIconClass\",\n    selectFilter: \"selectFilter\",\n    startView: \"startView\",\n    upIconClass: \"upIconClass\",\n    startDate: \"startDate\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: DlDateTimePickerComponent_1,\n    multi: true\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 14,\n  vars: 17,\n  consts: [[1, \"row\", \"align-items-center\", \"no-gutters\"], [\"type\", \"button\", 1, \"col\", \"dl-abdtp-left-button\", \"align-items-center\", 3, \"click\"], [1, \"left-icon\", 3, \"ngClass\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"type\", \"button\", 1, \"col\", \"dl-abdtp-right-button\", 3, \"click\"], [1, \"right-icon\", 3, \"ngClass\"], [3, \"keydown\"], [\"class\", \"row no-gutters\", 4, \"ngIf\"], [\"class\", \"row align-items-center no-gutters\", 4, \"ngFor\", \"ngForOf\"], [\"maxViewLabel\", \"\"], [\"defaultViewLabel\", \"\"], [1, \"row\", \"no-gutters\"], [\"class\", \"col align-items-center no-gutters dl-abdtp-col-label\", 4, \"ngFor\", \"ngForOf\"], [1, \"col\", \"align-items-center\", \"no-gutters\", \"dl-abdtp-col-label\"], [\"role\", \"gridcell\", 3, \"class\", \"ngClass\", \"click\", \"keydown.space\", \"keydown.enter\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"gridcell\", 3, \"ngClass\", \"click\", \"keydown.space\", \"keydown.enter\"], [1, \"col-10\", \"dl-abdtp-view-label\"], [\"type\", \"button\", 1, \"col-10\", \"dl-abdtp-view-label\", \"dl-abdtp-up-button\", 3, \"ngClass\", \"click\"], [1, \"up-icon\", 3, \"ngClass\"]],\n  template: function DlDateTimePickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(2, \"button\", 1);\n      ɵngcc0.ɵɵlistener(\"click\", function DlDateTimePickerComponent_Template_button_click_2_listener() {\n        return ctx._onLeftClick();\n      });\n      ɵngcc0.ɵɵelement(3, \"span\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(4, DlDateTimePickerComponent_div_4_Template, 1, 0, \"div\", 3);\n      ɵngcc0.ɵɵelementStart(5, \"button\", 4);\n      ɵngcc0.ɵɵlistener(\"click\", function DlDateTimePickerComponent_Template_button_click_5_listener() {\n        return ctx._onRightClick();\n      });\n      ɵngcc0.ɵɵelement(6, \"span\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n      ɵngcc0.ɵɵlistener(\"keydown\", function DlDateTimePickerComponent_Template_div_keydown_7_listener($event) {\n        return ctx._handleKeyDown($event);\n      });\n      ɵngcc0.ɵɵtemplate(8, DlDateTimePickerComponent_div_8_Template, 2, 1, \"div\", 7);\n      ɵngcc0.ɵɵtemplate(9, DlDateTimePickerComponent_div_9_Template, 2, 1, \"div\", 8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(10, DlDateTimePickerComponent_ng_template_10_Template, 2, 1, \"ng-template\", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(12, DlDateTimePickerComponent_ng_template_12_Template, 3, 6, \"ng-template\", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r3 = ɵngcc0.ɵɵreference(11);\n\n      const _r5 = ɵngcc0.ɵɵreference(13);\n\n      ɵngcc0.ɵɵclassMapInterpolate1(\"text-center dl-abdtp-\", ctx._model.viewName, \"-view\");\n      ɵngcc0.ɵɵattribute(\"data-dl-abdtp-view\", ctx._model.viewName);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx._model.leftButton.ariaLabel)(\"dl-abdtp-value\", ctx._model.leftButton.value)(\"title\", ctx._model.leftButton.ariaLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.leftIconClass);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._model.viewName === (ctx.maxView || \"year\"))(\"ngIfThen\", _r3)(\"ngIfElse\", _r5);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx._model.rightButton.ariaLabel)(\"dl-abdtp-value\", ctx._model.rightButton.value)(\"title\", ctx._model.rightButton.ariaLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.rightIconClass);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._model.rowLabels == null ? null : ctx._model.rowLabels.length);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._model.rows);\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf],\n  styles: [\"[_nghost-%COMP%]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.dl-abdtp-col-label[_ngcontent-%COMP%], .dl-abdtp-view-label[_ngcontent-%COMP%]{font-weight:700}.dl-abdtp-date-button[_ngcontent-%COMP%], .dl-abdtp-left-button[_ngcontent-%COMP%], .dl-abdtp-right-button[_ngcontent-%COMP%], .dl-abdtp-view-label[_ngcontent-%COMP%]{padding:5px;border-radius:999px;cursor:pointer;color:rgba(0,0,0,.87);outline:0}.dl-abdtp-date-button[_ngcontent-%COMP%], .dl-abdtp-left-button[_ngcontent-%COMP%], .dl-abdtp-right-button[_ngcontent-%COMP%], .dl-abdtp-up-button[_ngcontent-%COMP%]{border-width:0}.dl-abdtp-active[_ngcontent-%COMP%]:focus, .dl-abdtp-date-button[_ngcontent-%COMP%]:focus, .dl-abdtp-date-button[_ngcontent-%COMP%]:hover, .dl-abdtp-left-button[_ngcontent-%COMP%]:focus, .dl-abdtp-left-button[_ngcontent-%COMP%]:hover, .dl-abdtp-right-button[_ngcontent-%COMP%]:focus, .dl-abdtp-right-button[_ngcontent-%COMP%]:hover, .dl-abdtp-up-button[_ngcontent-%COMP%]:focus, .dl-abdtp-up-button[_ngcontent-%COMP%]:hover, .dl-abdtp-view-label[_ngcontent-%COMP%]:focus{background:rgba(0,0,0,.04)}.dl-abdtp-future[_ngcontent-%COMP%], .dl-abdtp-past[_ngcontent-%COMP%]{color:rgba(0,0,0,.04)}.dl-abdtp-now[_ngcontent-%COMP%], .dl-abdtp-now.disabled[_ngcontent-%COMP%], .dl-abdtp-now.disabled[_ngcontent-%COMP%]:hover, .dl-abdtp-now[_ngcontent-%COMP%]:hover{border-radius:999px;border:1px solid rgba(0,0,0,.25)}.dl-abdtp-selected[_ngcontent-%COMP%]{color:#fff;background:rgba(0,82,204,.75)}.dl-abdtp-selected[_ngcontent-%COMP%]:focus, .dl-abdtp-selected[_ngcontent-%COMP%]:hover{background:#0052cc}.dl-abdtp-disabled[_ngcontent-%COMP%]{cursor:default;color:rgba(0,0,0,.25)}\"],\n  changeDetection: 0\n});\n\nDlDateTimePickerComponent.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: DlDateAdapter\n}, {\n  type: DlYearModelProvider\n}, {\n  type: DlMonthModelProvider\n}, {\n  type: DlDayModelProvider\n}, {\n  type: DlHourModelProvider\n}, {\n  type: DlMinuteModelProvider\n}];\n\n__decorate([Output()], DlDateTimePickerComponent.prototype, \"change\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"leftIconClass\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"maxView\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"minView\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"minuteStep\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"rightIconClass\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"selectFilter\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"startDate\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"startView\", void 0);\n\n__decorate([Input()], DlDateTimePickerComponent.prototype, \"upIconClass\", void 0);\n/** @internal */\n\n\nfunction hasValue(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * Import this module to supply your own `DateAdapter` provider.\n * @internal\n **/\n\n\nlet DlDateTimePickerModule = /*#__PURE__*/(() => {\n  let DlDateTimePickerModule = class DlDateTimePickerModule {};\n\n  DlDateTimePickerModule.ɵfac = function DlDateTimePickerModule_Factory(t) {\n    return new (t || DlDateTimePickerModule)();\n  };\n\n  DlDateTimePickerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DlDateTimePickerModule\n  });\n  DlDateTimePickerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [DlYearModelProvider, DlMonthModelProvider, DlDayModelProvider, DlHourModelProvider, DlMinuteModelProvider],\n    imports: [[CommonModule]]\n  });\n  return DlDateTimePickerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DlDateTimeNumberModule, {\n    imports: [DlDateTimeCoreModule],\n    exports: [DlDateTimeCoreModule]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DlDateTimeDateModule, {\n    imports: [DlDateTimeCoreModule]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DlDateTimeMomentModule, {\n    imports: [DlDateTimeCoreModule]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DlDateTimeStringModule, {\n    imports: [DlDateTimeCoreModule]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DlDateTimeInputModule, {\n    declarations: function () {\n      return [DlDateTimeInputDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [DlDateTimeInputDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DlDateTimePickerModule, {\n    declarations: function () {\n      return [DlDateTimePickerComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [DlDateTimePickerComponent];\n    }\n  });\n})();\n/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DL_DATE_TIME_DISPLAY_FORMAT, DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT, DL_DATE_TIME_INPUT_FORMATS, DL_DATE_TIME_INPUT_FORMATS_DEFAULT, DL_DATE_TIME_MODEL_FORMAT, DL_DATE_TIME_MODEL_FORMAT_DEFAULT, DlDateAdapter, DlDateAdapterMoment, DlDateAdapterNative, DlDateAdapterNumber, DlDateAdapterString, DlDateTimeCoreModule, DlDateTimeDateModule, DlDateTimeInputChange, DlDateTimeInputDirective, DlDateTimeInputModule, DlDateTimeMomentModule, DlDateTimeNumberModule, DlDateTimePickerChange, DlDateTimePickerComponent, DlDateTimePickerModule, DlDateTimeStringModule, DlDayModelProvider, DlHourModelProvider, DlMinuteModelProvider, DlMonthModelProvider, DlYearModelProvider, ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 }; //# sourceMappingURL=angular-bootstrap-datetimepicker.js.map","map":null,"metadata":{},"sourceType":"module"}