{"ast":null,"code":"import { Color, BaseChartDirective } from 'ng2-charts';\nimport * as pluginAnnotations from 'chartjs-plugin-annotation';\nimport { HttpClient } from '@angular/common/http';\nimport stc from 'string-to-color';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ng2-charts\";\nimport * as i4 from \"../load-test/load-test.component\";\nexport let PerformanceChartComponent = /*#__PURE__*/(() => {\n  class PerformanceChartComponent {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.lineChartData = [];\n      this.lineChartOptions = {\n        responsive: true,\n        scales: {\n          // We use this empty structure as a placeholder for dynamic theming.\n          xAxes: [{\n            type: 'time'\n          }],\n          yAxes: [{\n            id: 'y-axis-0',\n            position: 'left',\n            ticks: {\n              callback: function (value, index, values) {\n                return value + 'ms';\n              }\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Time taken (ms)'\n            }\n          }]\n        },\n        annotation: {\n          annotations: [{\n            type: 'line',\n            mode: 'vertical',\n            scaleID: 'x-axis-0',\n            value: 'March',\n            borderColor: 'orange',\n            borderWidth: 2,\n            label: {\n              enabled: true,\n              fontColor: 'orange',\n              content: 'LineAnno'\n            }\n          }]\n        }\n      };\n      this.lineChartLegend = true;\n      this.lineChartType = 'line';\n      this.lineChartPlugins = [pluginAnnotations];\n      this.lineChartColors = [{\n        backgroundColor: 'rgba(148,159,177,0.2)',\n        borderColor: 'rgba(148,159,177,1)',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }, {\n        backgroundColor: 'rgba(77,83,96,0.2)',\n        borderColor: 'rgba(77,83,96,1)',\n        pointBackgroundColor: 'rgba(77,83,96,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(77,83,96,1)'\n      }, {\n        backgroundColor: 'rgba(255,0,0,0.3)',\n        borderColor: 'red',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }];\n      this.filterId = \"30m\";\n    }\n\n    ngOnInit() {\n      this.updateData(\"PT30M\", \"PT1M\");\n    }\n\n    updateData(timespan, interval) {\n      this.http.get(this.baseUrl + 'performance?timespan=' + timespan + \"&interval=\" + interval).subscribe(result => {\n        this.lineChartData = [];\n\n        for (let dat of result.requests) this.lineChartData.push({\n          data: dat.map(p => {\n            return {\n              x: Date.parse(p.timestamp),\n              y: Math.floor(p.timeTakenMs)\n            };\n          }),\n          label: dat[0].requestName,\n          backgroundColor: stc(dat[0].requestName) + '77'\n        });\n      });\n    }\n\n    onChange(value) {\n      console.log(value);\n\n      if (value == \"30m\") {\n        this.updateData(\"PT30M\", \"PT5M\");\n      }\n\n      if (value == \"1h\") {\n        this.updateData(\"PT1H\", \"PT5M\");\n      }\n\n      if (value == \"3h\") {\n        this.updateData(\"PT3H\", \"PT5M\");\n      }\n\n      if (value == \"6h\") {\n        this.updateData(\"PT6H\", \"PT10M\");\n      }\n\n      if (value == \"12h\") {\n        this.updateData(\"PT12H\", \"PT15M\");\n      }\n\n      if (value == \"24h\") {\n        this.updateData(\"PT24H\", \"PT30M\");\n      }\n\n      if (value == \"3d\") {\n        this.updateData(\"PT3D\", \"PT2H\");\n      }\n\n      if (value == \"7d\") {\n        this.updateData(\"PT7D\", \"PT2H\");\n      }\n    }\n\n  }\n\n  PerformanceChartComponent.ɵfac = function PerformanceChartComponent_Factory(t) {\n    return new (t || PerformanceChartComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n  };\n\n  PerformanceChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PerformanceChartComponent,\n    selectors: [[\"app-performance-chart\"]],\n    viewQuery: function PerformanceChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    decls: 25,\n    vars: 7,\n    consts: [[1, \"flex\"], [1, \"flex-item\"], [1, \"form-group\"], [\"name\", \"filter\", \"id\", \"filter\", 1, \"form-control\", 3, \"ngModel\", \"change\", \"ngModelChange\"], [\"value\", \"30m\"], [\"value\", \"1h\"], [\"value\", \"3h\"], [\"value\", \"6h\"], [\"value\", \"12h\"], [\"value\", \"24h\"], [\"value\", \"3d\"], [\"value\", \"7d\"], [2, \"display\", \"block\"], [\"baseChart\", \"\", \"width\", \"400\", \"height\", \"200\", 3, \"datasets\", \"options\", \"colors\", \"legend\", \"chartType\", \"plugins\"]],\n    template: function PerformanceChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"select\", 3);\n        i0.ɵɵlistener(\"change\", function PerformanceChartComponent_Template_select_change_3_listener($event) {\n          return ctx.onChange($event.target.value);\n        })(\"ngModelChange\", function PerformanceChartComponent_Template_select_ngModelChange_3_listener($event) {\n          return ctx.filterId = $event;\n        });\n        i0.ɵɵelementStart(4, \"option\", 4);\n        i0.ɵɵtext(5, \"30 minutes ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"option\", 5);\n        i0.ɵɵtext(7, \"1 hour ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"option\", 6);\n        i0.ɵɵtext(9, \"3 hours ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"option\", 7);\n        i0.ɵɵtext(11, \"6 hours ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"option\", 8);\n        i0.ɵɵtext(13, \"12 hours ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 9);\n        i0.ɵɵtext(15, \"24 hours ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"option\", 10);\n        i0.ɵɵtext(17, \"3 days ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"option\", 11);\n        i0.ɵɵtext(19, \"7 days ago\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 1);\n        i0.ɵɵelementStart(21, \"div\", 12);\n        i0.ɵɵelement(22, \"canvas\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\");\n        i0.ɵɵelement(24, \"app-load-test\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.filterId);\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"options\", ctx.lineChartOptions)(\"colors\", ctx.lineChartColors)(\"legend\", ctx.lineChartLegend)(\"chartType\", ctx.lineChartType)(\"plugins\", ctx.lineChartPlugins);\n      }\n    },\n    directives: [i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgModel, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i3.BaseChartDirective, i4.LoadTestComponent],\n    styles: [\".filterlink[_ngcontent-%COMP%]{color:#0366d6;cursor:pointer}\"]\n  });\n  return PerformanceChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}