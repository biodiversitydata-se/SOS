{"ast":null,"code":"module.exports = function (Chart) {\n  var chartHelpers = Chart.helpers;\n\n  var helpers = require('./helpers.js')(Chart);\n\n  function collapseHoverEvents(events) {\n    var hover = false;\n    var filteredEvents = events.filter(function (eventName) {\n      switch (eventName) {\n        case 'mouseenter':\n        case 'mouseover':\n        case 'mouseout':\n        case 'mouseleave':\n          hover = true;\n          return false;\n\n        default:\n          return true;\n      }\n    });\n\n    if (hover && filteredEvents.indexOf('mousemove') === -1) {\n      filteredEvents.push('mousemove');\n    }\n\n    return filteredEvents;\n  }\n\n  function dispatcher(e) {\n    var ns = this.annotation;\n    var elements = helpers.elements(this);\n    var position = chartHelpers.getRelativePosition(e, this.chart);\n    var element = helpers.getNearestItems(elements, position);\n    var events = collapseHoverEvents(ns.options.events);\n    var dblClickSpeed = ns.options.dblClickSpeed;\n    var eventHandlers = [];\n    var eventHandlerName = helpers.getEventHandlerName(e.type);\n    var options = (element || {}).options; // Detect hover events\n\n    if (e.type === 'mousemove') {\n      if (element && !element.hovering) {\n        // hover started\n        ['mouseenter', 'mouseover'].forEach(function (eventName) {\n          var eventHandlerName = helpers.getEventHandlerName(eventName);\n          var hoverEvent = helpers.createMouseEvent(eventName, e); // recreate the event to match the handler\n\n          element.hovering = true;\n\n          if (typeof options[eventHandlerName] === 'function') {\n            eventHandlers.push([options[eventHandlerName], hoverEvent, element]);\n          }\n        });\n      } else if (!element) {\n        // hover ended\n        elements.forEach(function (element) {\n          if (element.hovering) {\n            element.hovering = false;\n            var options = element.options;\n            ['mouseout', 'mouseleave'].forEach(function (eventName) {\n              var eventHandlerName = helpers.getEventHandlerName(eventName);\n              var hoverEvent = helpers.createMouseEvent(eventName, e); // recreate the event to match the handler\n\n              if (typeof options[eventHandlerName] === 'function') {\n                eventHandlers.push([options[eventHandlerName], hoverEvent, element]);\n              }\n            });\n          }\n        });\n      }\n    } // Suppress duplicate click events during a double click\n    // 1. click -> 2. click -> 3. dblclick\n    //\n    // 1: wait dblClickSpeed ms, then fire click\n    // 2: cancel (1) if it is waiting then wait dblClickSpeed ms then fire click, else fire click immediately\n    // 3: cancel (1) or (2) if waiting, then fire dblclick \n\n\n    if (element && events.indexOf('dblclick') > -1 && typeof options.onDblclick === 'function') {\n      if (e.type === 'click' && typeof options.onClick === 'function') {\n        clearTimeout(element.clickTimeout);\n        element.clickTimeout = setTimeout(function () {\n          delete element.clickTimeout;\n          options.onClick.call(element, e);\n        }, dblClickSpeed);\n        e.stopImmediatePropagation();\n        e.preventDefault();\n        return;\n      } else if (e.type === 'dblclick' && element.clickTimeout) {\n        clearTimeout(element.clickTimeout);\n        delete element.clickTimeout;\n      }\n    } // Dispatch the event to the usual handler, but only if we haven't substituted it\n\n\n    if (element && typeof options[eventHandlerName] === 'function' && eventHandlers.length === 0) {\n      eventHandlers.push([options[eventHandlerName], e, element]);\n    }\n\n    if (eventHandlers.length > 0) {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      eventHandlers.forEach(function (eventHandler) {\n        // [handler, event, element]\n        eventHandler[0].call(eventHandler[2], eventHandler[1]);\n      });\n    }\n  }\n\n  return {\n    dispatcher: dispatcher,\n    collapseHoverEvents: collapseHoverEvents\n  };\n};","map":null,"metadata":{},"sourceType":"script"}