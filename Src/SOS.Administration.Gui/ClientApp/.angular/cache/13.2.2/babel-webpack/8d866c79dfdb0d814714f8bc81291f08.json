{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { circle, icon, latLng, marker, tileLayer } from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n\nfunction ObservationViewerComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ObservationViewerComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.markers.length / 2, \" observations shown\");\n  }\n}\n\nexport let ObservationViewerComponent = /*#__PURE__*/(() => {\n  class ObservationViewerComponent {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.markers = [];\n      this.options = {\n        layers: [tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          maxZoom: 18,\n          attribution: 'OpenStreetMap'\n        })],\n        zoom: 5,\n        center: latLng(59.819541868159256, 17.73797190347293)\n      };\n      this.loadingData = false;\n      this.markerClusterOptions = {};\n      this.markerClusterData = [];\n    }\n\n    ngOnInit() {}\n\n    updateMap() {\n      this.markerClusterData = [];\n      this.loadingData = true;\n      this.http.post(this.baseUrl + 'observations', JSON.parse(this.query)).subscribe(result => {\n        this.markers = result.records.map(function (val, index) {\n          var description = '<span>' + val.occurrenceId + '</span><br/><span>diffusionRadius:' + val.diffusionRadius + '</span><br/><span>DatasetId:' + val.dataSetId + '</span>';\n          var m = marker([val.lat, val.lon], {\n            icon: icon({\n              iconSize: [25, 41],\n              iconAnchor: [13, 41],\n              iconUrl: 'assets/marker-icon.png',\n              shadowUrl: 'assets/marker-shadow.png'\n            })\n          }).bindPopup(description);\n          return m;\n        });\n        var circles = result.records.map(function (val, index) {\n          var m = circle([val.lat, val.lon], {\n            color: 'red',\n            fillColor: '#f03',\n            fillOpacity: 0.3,\n            radius: val.diffusionRadius\n          });\n          return m;\n        });\n        result.records.forEach(val => {\n          this.http.get(this.baseUrl + 'observations/real/' + val.occurrenceId, {\n            headers: new HttpHeaders({\n              \"Content-Type\": \"application/json\"\n            })\n          }).subscribe(innerResult => {\n            console.log(innerResult);\n            var description = '<span>' + val.occurrenceId + '</span>';\n            var m = marker([innerResult.lat, innerResult.lon], {\n              icon: icon({\n                iconSize: [25, 41],\n                iconAnchor: [13, 41],\n                iconUrl: 'assets/marker-icon-realpos.png',\n                shadowUrl: 'assets/marker-shadow.png'\n              })\n            }).bindPopup(description);\n            ;\n            this.markers.push(m);\n          });\n        });\n        this.markers = this.markers.concat(circles);\n        this.loadingData = false;\n      }, error => console.error(error));\n    }\n\n  }\n\n  ObservationViewerComponent.ɵfac = function ObservationViewerComponent_Factory(t) {\n    return new (t || ObservationViewerComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n  };\n\n  ObservationViewerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ObservationViewerComponent,\n    selectors: [[\"app-observation-viewer\"]],\n    decls: 7,\n    vars: 5,\n    consts: [[\"rows\", \"10\", \"cols\", \"80\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"class\", \"spinner-border\", \"role\", \"status\", 4, \"ngIf\"], [4, \"ngIf\"], [\"leaflet\", \"\", 2, \"height\", \"600px\", 3, \"leafletOptions\", \"leafletLayers\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"sr-only\"]],\n    template: function ObservationViewerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"textarea\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function ObservationViewerComponent_Template_textarea_ngModelChange_1_listener($event) {\n          return ctx.query = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function ObservationViewerComponent_Template_button_click_2_listener() {\n          return ctx.updateMap();\n        });\n        i0.ɵɵtext(3, \"Search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, ObservationViewerComponent_div_4_Template, 3, 0, \"div\", 2);\n        i0.ɵɵtemplate(5, ObservationViewerComponent_div_5_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelement(6, \"div\", 4);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.query);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.loadingData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loadingData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"leafletOptions\", ctx.options)(\"leafletLayers\", ctx.markers);\n      }\n    },\n    styles: [\"\"]\n  });\n  return ObservationViewerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}