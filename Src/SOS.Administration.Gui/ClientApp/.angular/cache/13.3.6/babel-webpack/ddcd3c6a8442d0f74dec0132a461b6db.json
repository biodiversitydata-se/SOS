{"ast":null,"code":"import { Directive, EventEmitter, Input, KeyValueDiffers, NgZone, Output } from '@angular/core';\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../../core/leaflet.directive';\n\nvar LeafletBaseLayersDirective =\n/** @class */\nfunction () {\n  function LeafletBaseLayersDirective(leafletDirective, differs, zone) {\n    this.differs = differs;\n    this.zone = zone; // Output for once the layers control is ready\n\n    this.layersControlReady = new EventEmitter();\n    this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    this.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n    this.baseLayersDiffer = this.differs.find({}).create();\n  }\n\n  Object.defineProperty(LeafletBaseLayersDirective.prototype, \"baseLayers\", {\n    get: function () {\n      return this.baseLayersValue;\n    },\n    // Set/get baseLayers\n    set: function (v) {\n      this.baseLayersValue = v;\n      this.updateBaseLayers();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LeafletBaseLayersDirective.prototype.ngOnDestroy = function () {\n    this.baseLayers = {};\n    this.controlLayers.getLayersControl().remove();\n  };\n\n  LeafletBaseLayersDirective.prototype.ngOnInit = function () {\n    var _this = this; // Init the map\n\n\n    this.leafletDirective.init(); // Create the control outside angular to prevent events from triggering chnage detection\n\n    this.zone.runOutsideAngular(function () {\n      // Initially configure the controlLayers\n      _this.controlLayers.init({}, _this.layersControlOptions).addTo(_this.leafletDirective.getMap());\n    });\n    this.updateBaseLayers();\n  };\n\n  LeafletBaseLayersDirective.prototype.ngDoCheck = function () {\n    this.updateBaseLayers();\n  };\n\n  LeafletBaseLayersDirective.prototype.updateBaseLayers = function () {\n    var map = this.leafletDirective.getMap();\n    var layersControl = this.controlLayers.getLayersControl();\n\n    if (null != map && null != layersControl && null != this.baseLayersDiffer) {\n      var changes = this.baseLayersDiffer.diff(this.baseLayersValue);\n      var results = this.controlLayers.applyBaseLayerChanges(changes);\n\n      if (results.changed()) {\n        this.syncBaseLayer();\n      }\n    }\n  };\n  /**\n   * Check the current base layer and change it to the new one if necessary\n   */\n\n\n  LeafletBaseLayersDirective.prototype.syncBaseLayer = function () {\n    var _this = this;\n\n    var map = this.leafletDirective.getMap();\n    var layers = LeafletUtil.mapToArray(this.baseLayers);\n    var foundLayer; // Search all the layers in the map to see if we can find them in the baselayer array\n\n    map.eachLayer(function (l) {\n      foundLayer = layers.find(function (bl) {\n        return l === bl;\n      });\n    }); // Did we find the layer?\n\n    if (null != foundLayer) {\n      // Yes - set the baselayer to the one we found\n      this.baseLayer = foundLayer;\n    } else {\n      // No - set the baselayer to the first in the array and add it to the map\n      if (layers.length > 0) {\n        this.baseLayer = layers[0]; // Add layers outside of angular to prevent events from triggering change detection\n\n        this.zone.runOutsideAngular(function () {\n          _this.baseLayer.addTo(map);\n        });\n      }\n    }\n  };\n\n  LeafletBaseLayersDirective.ctorParameters = function () {\n    return [{\n      type: LeafletDirective\n    }, {\n      type: KeyValueDiffers\n    }, {\n      type: NgZone\n    }];\n  };\n\n  LeafletBaseLayersDirective.propDecorators = {\n    baseLayers: [{\n      type: Input,\n      args: ['leafletBaseLayers']\n    }],\n    layersControlOptions: [{\n      type: Input,\n      args: ['leafletLayersControlOptions']\n    }],\n    layersControlReady: [{\n      type: Output,\n      args: ['leafletLayersControlReady']\n    }]\n  };\n\n  LeafletBaseLayersDirective.ɵfac = function LeafletBaseLayersDirective_Factory(t) {\n    return new (t || LeafletBaseLayersDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LeafletDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  LeafletBaseLayersDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LeafletBaseLayersDirective,\n    selectors: [[\"\", \"leafletBaseLayers\", \"\"]],\n    inputs: {\n      baseLayers: [\"leafletBaseLayers\", \"baseLayers\"],\n      layersControlOptions: [\"leafletLayersControlOptions\", \"layersControlOptions\"]\n    },\n    outputs: {\n      layersControlReady: \"leafletLayersControlReady\"\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LeafletBaseLayersDirective;\n}();\n\nexport { LeafletBaseLayersDirective }; //# sourceMappingURL=leaflet-baselayers.directive.js.map","map":null,"metadata":{},"sourceType":"module"}