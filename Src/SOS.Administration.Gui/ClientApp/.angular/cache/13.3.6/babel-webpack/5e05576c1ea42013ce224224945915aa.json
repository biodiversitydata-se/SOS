{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Color, BaseChartDirective } from 'ng2-charts';\nimport * as pluginAnnotations from 'chartjs-plugin-annotation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LoadTestComponent = /*#__PURE__*/(() => {\n  class LoadTestComponent {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.lineChartData = [];\n      this.lineChartOptions = {\n        responsive: true,\n        scales: {\n          // We use this empty structure as a placeholder for dynamic theming.\n          xAxes: [{\n            type: 'time'\n          }],\n          yAxes: [{\n            id: 'y-axis-0',\n            position: 'left',\n            ticks: {\n              callback: function (value, index, values) {\n                return value + 'ms';\n              }\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'Time taken (ms)'\n            }\n          }]\n        },\n        annotation: {\n          annotations: [{\n            type: 'line',\n            mode: 'vertical',\n            scaleID: 'x-axis-0',\n            value: 'March',\n            borderColor: 'orange',\n            borderWidth: 2,\n            label: {\n              enabled: true,\n              fontColor: 'orange',\n              content: 'LineAnno'\n            }\n          }]\n        }\n      };\n      this.lineChartLegend = true;\n      this.lineChartType = 'line';\n      this.lineChartPlugins = [pluginAnnotations];\n      this.lineChartColors = [{\n        backgroundColor: 'rgba(148,159,177,0.2)',\n        borderColor: 'rgba(148,159,177,1)',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }, {\n        backgroundColor: 'rgba(77,83,96,0.2)',\n        borderColor: 'rgba(77,83,96,1)',\n        pointBackgroundColor: 'rgba(77,83,96,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(77,83,96,1)'\n      }, {\n        backgroundColor: 'rgba(255,0,0,0.3)',\n        borderColor: 'red',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }];\n    }\n\n    ngOnInit() {\n      this.http.get(this.baseUrl + 'performance/loadtestsummary').subscribe(result => {\n        this.loadtestresults = result;\n        this.lineChartData = [];\n        this.lineChartData.push({\n          data: result.map(p => {\n            return {\n              x: Date.parse(p.timestamp),\n              y: Math.floor(p.metrics.iteration_duration.avg)\n            };\n          }),\n          label: \"Avg time per test\"\n        });\n      }, error => console.error(error));\n    }\n\n  }\n\n  LoadTestComponent.ɵfac = function LoadTestComponent_Factory(t) {\n    return new (t || LoadTestComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n  };\n\n  LoadTestComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoadTestComponent,\n    selectors: [[\"app-load-test\"]],\n    viewQuery: function LoadTestComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[1, \"flex\"], [1, \"flex-item\"], [2, \"display\", \"block\"], [\"baseChart\", \"\", \"width\", \"400\", \"height\", \"200\", 3, \"datasets\", \"options\", \"colors\", \"legend\", \"chartType\", \"plugins\"]],\n    template: function LoadTestComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"canvas\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"options\", ctx.lineChartOptions)(\"colors\", ctx.lineChartColors)(\"legend\", ctx.lineChartLegend)(\"chartType\", ctx.lineChartType)(\"plugins\", ctx.lineChartPlugins);\n      }\n    },\n    styles: [\"\"]\n  });\n  return LoadTestComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}