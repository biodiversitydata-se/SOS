{"ast":null,"code":"import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output } from '@angular/core';\nimport { latLng, map } from 'leaflet';\nimport { LeafletUtil } from './leaflet.util';\nimport * as Éµngcc0 from '@angular/core';\n\nvar LeafletDirective =\n/** @class */\nfunction () {\n  function LeafletDirective(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.DEFAULT_ZOOM = 1;\n    this.DEFAULT_CENTER = latLng(38.907192, -77.036871);\n    this.DEFAULT_FPZ_OPTIONS = {};\n    this.fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n    this.panOptions = this.DEFAULT_FPZ_OPTIONS;\n    this.zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n    this.zoomPanOptions = this.DEFAULT_FPZ_OPTIONS; // Default configuration\n\n    this.options = {}; // Configure callback function for the map\n\n    this.mapReady = new EventEmitter();\n    this.zoomChange = new EventEmitter();\n    this.centerChange = new EventEmitter(); // Mouse Map Events\n\n    this.onClick = new EventEmitter();\n    this.onDoubleClick = new EventEmitter();\n    this.onMouseDown = new EventEmitter();\n    this.onMouseUp = new EventEmitter();\n    this.onMouseMove = new EventEmitter();\n    this.onMouseOver = new EventEmitter();\n    this.onMouseOut = new EventEmitter(); // Map Move Events\n\n    this.onMapMove = new EventEmitter();\n    this.onMapMoveStart = new EventEmitter();\n    this.onMapMoveEnd = new EventEmitter(); // Map Zoom Events\n\n    this.onMapZoom = new EventEmitter();\n    this.onMapZoomStart = new EventEmitter();\n    this.onMapZoomEnd = new EventEmitter();\n    this.mapEventHandlers = {}; // Nothing here\n  }\n\n  LeafletDirective.prototype.ngOnInit = function () {\n    var _this = this; // Create the map outside of angular so the various map events don't trigger change detection\n\n\n    this.zone.runOutsideAngular(function () {\n      // Create the map with some reasonable defaults\n      _this.map = map(_this.element.nativeElement, _this.options);\n\n      _this.addMapEventListeners();\n    }); // Only setView if there is a center/zoom\n\n    if (null != this.center && null != this.zoom) {\n      this.setView(this.center, this.zoom);\n    } // Set up all the initial settings\n\n\n    if (null != this.fitBounds) {\n      this.setFitBounds(this.fitBounds);\n    }\n\n    if (null != this.maxBounds) {\n      this.setMaxBounds(this.maxBounds);\n    }\n\n    if (null != this.minZoom) {\n      this.setMinZoom(this.minZoom);\n    }\n\n    if (null != this.maxZoom) {\n      this.setMaxZoom(this.maxZoom);\n    }\n\n    this.doResize(); // Fire map ready event\n\n    this.mapReady.emit(this.map);\n  };\n\n  LeafletDirective.prototype.ngOnChanges = function (changes) {\n    /*\n     * The following code is to address an issue with our (basic) implementation of\n     * zooming and panning. From our testing, it seems that a pan operation followed\n     * by a zoom operation in the same thread will interfere with eachother. The zoom\n     * operation interrupts/cancels the pan, resulting in a final center point that is\n     * inaccurate. The solution seems to be to either separate them with a timeout or\n      * to collapse them into a setView call.\n     */\n    // Zooming and Panning\n    if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n      this.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n    } // Set the zoom level\n    else if (changes['zoom']) {\n      this.setZoom(changes['zoom'].currentValue);\n    } // Set the map center\n    else if (changes['center']) {\n      this.setCenter(changes['center'].currentValue);\n    } // Other options\n\n\n    if (changes['fitBounds']) {\n      this.setFitBounds(changes['fitBounds'].currentValue);\n    }\n\n    if (changes['maxBounds']) {\n      this.setMaxBounds(changes['maxBounds'].currentValue);\n    }\n\n    if (changes['minZoom']) {\n      this.setMinZoom(changes['minZoom'].currentValue);\n    }\n\n    if (changes['maxZoom']) {\n      this.setMaxZoom(changes['maxZoom'].currentValue);\n    }\n  };\n\n  LeafletDirective.prototype.ngOnDestroy = function () {\n    // If this directive is destroyed, the map is too\n    this.map.remove();\n  };\n\n  LeafletDirective.prototype.getMap = function () {\n    return this.map;\n  };\n\n  LeafletDirective.prototype.onResize = function () {\n    this.delayResize();\n  };\n\n  LeafletDirective.prototype.addMapEventListeners = function () {\n    var _this = this;\n\n    var registerEventHandler = function (eventName, handler) {\n      _this.mapEventHandlers[eventName] = handler;\n\n      _this.map.on(eventName, handler);\n    }; // Add all the pass-through mouse event handlers\n\n\n    registerEventHandler('click', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onClick, e);\n    });\n    registerEventHandler('dblclick', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onDoubleClick, e);\n    });\n    registerEventHandler('mousedown', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMouseDown, e);\n    });\n    registerEventHandler('mouseup', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMouseUp, e);\n    });\n    registerEventHandler('mouseover', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMouseOver, e);\n    });\n    registerEventHandler('mouseout', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMouseOut, e);\n    });\n    registerEventHandler('mousemove', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMouseMove, e);\n    });\n    registerEventHandler('zoomstart', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMapZoomStart, e);\n    });\n    registerEventHandler('zoom', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMapZoom, e);\n    });\n    registerEventHandler('zoomend', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMapZoomEnd, e);\n    });\n    registerEventHandler('movestart', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMapMoveStart, e);\n    });\n    registerEventHandler('move', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMapMove, e);\n    });\n    registerEventHandler('moveend', function (e) {\n      return LeafletUtil.handleEvent(_this.zone, _this.onMapMoveEnd, e);\n    }); // Update any things for which we provide output bindings\n\n    var outputUpdateHandler = function () {\n      var zoom = _this.map.getZoom();\n\n      if (zoom !== _this.zoom) {\n        _this.zoom = zoom;\n        LeafletUtil.handleEvent(_this.zone, _this.zoomChange, zoom);\n      }\n\n      var center = _this.map.getCenter();\n\n      if (null != center || null != _this.center) {\n        if ((null == center || null == _this.center) && center !== _this.center || center.lat !== _this.center.lat || center.lng !== _this.center.lng) {\n          _this.center = center;\n          LeafletUtil.handleEvent(_this.zone, _this.centerChange, center);\n        }\n      }\n    };\n\n    registerEventHandler('moveend', outputUpdateHandler);\n    registerEventHandler('zoomend', outputUpdateHandler);\n  };\n  /**\n   * Resize the map to fit it's parent container\n   */\n\n\n  LeafletDirective.prototype.doResize = function () {\n    var _this = this; // Run this outside of angular so the map events stay outside of angular\n\n\n    this.zone.runOutsideAngular(function () {\n      // Invalidate the map size to trigger it to update itself\n      _this.map.invalidateSize({});\n    });\n  };\n  /**\n   * Manage a delayed resize of the component\n   */\n\n\n  LeafletDirective.prototype.delayResize = function () {\n    if (null != this.resizeTimer) {\n      clearTimeout(this.resizeTimer);\n    }\n\n    this.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n  };\n  /**\n   * Set the view (center/zoom) all at once\n   * @param center The new center\n   * @param zoom The new zoom level\n   */\n\n\n  LeafletDirective.prototype.setView = function (center, zoom) {\n    if (this.map && null != center && null != zoom) {\n      this.map.setView(center, zoom, this.zoomPanOptions);\n    }\n  };\n  /**\n   * Set the map zoom level\n   * @param zoom the new zoom level for the map\n   */\n\n\n  LeafletDirective.prototype.setZoom = function (zoom) {\n    if (this.map && null != zoom) {\n      this.map.setZoom(zoom, this.zoomOptions);\n    }\n  };\n  /**\n   * Set the center of the map\n   * @param center the center point\n   */\n\n\n  LeafletDirective.prototype.setCenter = function (center) {\n    if (this.map && null != center) {\n      this.map.panTo(center, this.panOptions);\n    }\n  };\n  /**\n   * Fit the map to the bounds\n   * @param latLngBounds the boundary to set\n   */\n\n\n  LeafletDirective.prototype.setFitBounds = function (latLngBounds) {\n    if (this.map && null != latLngBounds) {\n      this.map.fitBounds(latLngBounds, this.fitBoundsOptions);\n    }\n  };\n  /**\n   * Set the map's max bounds\n   * @param latLngBounds the boundary to set\n   */\n\n\n  LeafletDirective.prototype.setMaxBounds = function (latLngBounds) {\n    if (this.map && null != latLngBounds) {\n      this.map.setMaxBounds(latLngBounds);\n    }\n  };\n  /**\n   * Set the map's min zoom\n   * @param number the new min zoom\n   */\n\n\n  LeafletDirective.prototype.setMinZoom = function (zoom) {\n    if (this.map && null != zoom) {\n      this.map.setMinZoom(zoom);\n    }\n  };\n  /**\n   * Set the map's min zoom\n   * @param number the new min zoom\n   */\n\n\n  LeafletDirective.prototype.setMaxZoom = function (zoom) {\n    if (this.map && null != zoom) {\n      this.map.setMaxZoom(zoom);\n    }\n  };\n\n  LeafletDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  LeafletDirective.propDecorators = {\n    fitBoundsOptions: [{\n      type: Input,\n      args: ['leafletFitBoundsOptions']\n    }],\n    panOptions: [{\n      type: Input,\n      args: ['leafletPanOptions']\n    }],\n    zoomOptions: [{\n      type: Input,\n      args: ['leafletZoomOptions']\n    }],\n    zoomPanOptions: [{\n      type: Input,\n      args: ['leafletZoomPanOptions']\n    }],\n    options: [{\n      type: Input,\n      args: ['leafletOptions']\n    }],\n    mapReady: [{\n      type: Output,\n      args: ['leafletMapReady']\n    }],\n    zoom: [{\n      type: Input,\n      args: ['leafletZoom']\n    }],\n    zoomChange: [{\n      type: Output,\n      args: ['leafletZoomChange']\n    }],\n    center: [{\n      type: Input,\n      args: ['leafletCenter']\n    }],\n    centerChange: [{\n      type: Output,\n      args: ['leafletCenterChange']\n    }],\n    fitBounds: [{\n      type: Input,\n      args: ['leafletFitBounds']\n    }],\n    maxBounds: [{\n      type: Input,\n      args: ['leafletMaxBounds']\n    }],\n    minZoom: [{\n      type: Input,\n      args: ['leafletMinZoom']\n    }],\n    maxZoom: [{\n      type: Input,\n      args: ['leafletMaxZoom']\n    }],\n    onClick: [{\n      type: Output,\n      args: ['leafletClick']\n    }],\n    onDoubleClick: [{\n      type: Output,\n      args: ['leafletDoubleClick']\n    }],\n    onMouseDown: [{\n      type: Output,\n      args: ['leafletMouseDown']\n    }],\n    onMouseUp: [{\n      type: Output,\n      args: ['leafletMouseUp']\n    }],\n    onMouseMove: [{\n      type: Output,\n      args: ['leafletMouseMove']\n    }],\n    onMouseOver: [{\n      type: Output,\n      args: ['leafletMouseOver']\n    }],\n    onMouseOut: [{\n      type: Output,\n      args: ['leafletMouseOut']\n    }],\n    onMapMove: [{\n      type: Output,\n      args: ['leafletMapMove']\n    }],\n    onMapMoveStart: [{\n      type: Output,\n      args: ['leafletMapMoveStart']\n    }],\n    onMapMoveEnd: [{\n      type: Output,\n      args: ['leafletMapMoveEnd']\n    }],\n    onMapZoom: [{\n      type: Output,\n      args: ['leafletMapZoom']\n    }],\n    onMapZoomStart: [{\n      type: Output,\n      args: ['leafletMapZoomStart']\n    }],\n    onMapZoomEnd: [{\n      type: Output,\n      args: ['leafletMapZoomEnd']\n    }],\n    onResize: [{\n      type: HostListener,\n      args: ['window:resize', []]\n    }]\n  };\n\n  LeafletDirective.Éµfac = function LeafletDirective_Factory(t) {\n    return new (t || LeafletDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n  };\n\n  LeafletDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: LeafletDirective,\n    selectors: [[\"\", \"leaflet\", \"\"]],\n    hostBindings: function LeafletDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"resize\", function LeafletDirective_resize_HostBindingHandler() {\n          return ctx.onResize();\n        }, false, Éµngcc0.ÉµÉµresolveWindow);\n      }\n    },\n    inputs: {\n      fitBoundsOptions: [\"leafletFitBoundsOptions\", \"fitBoundsOptions\"],\n      panOptions: [\"leafletPanOptions\", \"panOptions\"],\n      zoomOptions: [\"leafletZoomOptions\", \"zoomOptions\"],\n      zoomPanOptions: [\"leafletZoomPanOptions\", \"zoomPanOptions\"],\n      options: [\"leafletOptions\", \"options\"],\n      zoom: [\"leafletZoom\", \"zoom\"],\n      center: [\"leafletCenter\", \"center\"],\n      fitBounds: [\"leafletFitBounds\", \"fitBounds\"],\n      maxBounds: [\"leafletMaxBounds\", \"maxBounds\"],\n      minZoom: [\"leafletMinZoom\", \"minZoom\"],\n      maxZoom: [\"leafletMaxZoom\", \"maxZoom\"]\n    },\n    outputs: {\n      mapReady: \"leafletMapReady\",\n      zoomChange: \"leafletZoomChange\",\n      centerChange: \"leafletCenterChange\",\n      onClick: \"leafletClick\",\n      onDoubleClick: \"leafletDoubleClick\",\n      onMouseDown: \"leafletMouseDown\",\n      onMouseUp: \"leafletMouseUp\",\n      onMouseMove: \"leafletMouseMove\",\n      onMouseOver: \"leafletMouseOver\",\n      onMouseOut: \"leafletMouseOut\",\n      onMapMove: \"leafletMapMove\",\n      onMapMoveStart: \"leafletMapMoveStart\",\n      onMapMoveEnd: \"leafletMapMoveEnd\",\n      onMapZoom: \"leafletMapZoom\",\n      onMapZoomStart: \"leafletMapZoomStart\",\n      onMapZoomEnd: \"leafletMapZoomEnd\"\n    },\n    features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LeafletDirective;\n}();\n\nexport { LeafletDirective }; //# sourceMappingURL=leaflet.directive.js.map","map":null,"metadata":{},"sourceType":"module"}