{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { ColumnMode } from '@swimlane/ngx-datatable';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n\nfunction InvalidGridComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"span\", 3);\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport let InvalidGridComponent = /*#__PURE__*/(() => {\n  class InvalidGridComponent {\n    constructor(http, baseUrl) {\n      this._dataSetId = \"0\";\n      this._instance = \"0\";\n      this.ColumnMode = ColumnMode;\n      this.page = new Page();\n      this.pageSize = 10;\n      this.columnDefs = [{\n        prop: 'occurrenceID'\n      }, {\n        prop: 'datasetID'\n      }, {\n        name: 'datasetName'\n      }, {\n        name: 'defects'\n      }];\n      this.rowData = [];\n      this.currentSort = {\n        columnName: 'datasetID',\n        direction: 'asc'\n      };\n      this.loadingData = false;\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.page.pageNumber = 0;\n      this.page.size = 20;\n    }\n\n    get dataSetId() {\n      return this._dataSetId;\n    }\n\n    set dataSetId(id) {\n      this._dataSetId = id;\n      this.updateGrid({\n        offset: 0,\n        pageSize: this.pageSize\n      }, {\n        columnName: 'datasetID',\n        direction: 'asc'\n      });\n    }\n\n    get instance() {\n      return this._instance;\n    }\n\n    set instance(id) {\n      this._instance = id;\n      this.updateGrid({\n        offset: 0,\n        pageSize: this.pageSize\n      }, {\n        columnName: 'datasetID',\n        direction: 'asc'\n      });\n    }\n\n    ngOnInit() {\n      this.setPage({\n        offset: 0,\n        pageSize: this.pageSize\n      });\n    }\n\n    onSort(sortInfo) {\n      console.log(sortInfo);\n      this.currentSort.columnName = sortInfo.column.prop;\n      this.currentSort.direction = sortInfo.newValue;\n      this.updateGrid({\n        offset: 0,\n        pageSize: this.pageSize\n      }, this.currentSort);\n    }\n\n    setPage(pageInfo) {\n      this.page.pageNumber = pageInfo.offset;\n      this.updateGrid(pageInfo, this.currentSort);\n    }\n\n    updateGrid(pageInfo, sortInfo) {\n      if (this.loadingData || this.dataSetId == \"-1\") {\n        return;\n      } else {\n        this.loadingData = true;\n      }\n\n      this.rowData = [];\n      this.http.get(this.baseUrl + 'invalidobservations/list?dataSetId=' + this._dataSetId + \"&instanceId=\" + this._instance + \"&pageNr=\" + pageInfo.offset + \"&pageSize=\" + pageInfo.pageSize + \"&sortField=\" + sortInfo.columnName + \"&sortOrder=\" + sortInfo.direction).subscribe(result => {\n        this.rowData = result.observations;\n        this.loadingData = false;\n        this.page.pageNumber = result.pageNumber;\n        this.page.size = result.size;\n        this.page.totalElements = result.totalElements;\n        this.page.totalPages = result.totalPages;\n      }, error => console.error(error));\n    }\n\n  }\n\n  InvalidGridComponent.ɵfac = function InvalidGridComponent_Factory(t) {\n    return new (t || InvalidGridComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n  };\n\n  InvalidGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InvalidGridComponent,\n    selectors: [[\"app-invalid-grid\"]],\n    inputs: {\n      dataSetId: \"dataSetId\",\n      instance: \"instance\"\n    },\n    decls: 3,\n    vars: 10,\n    consts: [[\"class\", \"spinner-border\", \"role\", \"status\", 4, \"ngIf\"], [\"rowHeight\", \"auto\", 1, \"bootstrap\", 3, \"rows\", \"columns\", \"columnMode\", \"headerHeight\", \"footerHeight\", \"externalPaging\", \"count\", \"offset\", \"limit\", \"sort\", \"page\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"sr-only\"]],\n    template: function InvalidGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵtemplate(1, InvalidGridComponent_div_1_Template, 3, 0, \"div\", 0);\n        i0.ɵɵelementStart(2, \"ngx-datatable\", 1);\n        i0.ɵɵlistener(\"sort\", function InvalidGridComponent_Template_ngx_datatable_sort_2_listener($event) {\n          return ctx.onSort($event);\n        })(\"page\", function InvalidGridComponent_Template_ngx_datatable_page_2_listener($event) {\n          return ctx.setPage($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loadingData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"rows\", ctx.rowData)(\"columns\", ctx.columnDefs)(\"columnMode\", ctx.ColumnMode.force)(\"headerHeight\", 50)(\"footerHeight\", 50)(\"externalPaging\", true)(\"count\", ctx.page.totalElements)(\"offset\", ctx.page.pageNumber)(\"limit\", ctx.page.size);\n      }\n    },\n    styles: [\"\"]\n  });\n  return InvalidGridComponent;\n})();\n\nclass Sort {}\n\nclass Page {\n  constructor() {\n    // The number of elements in the page\n    this.size = 0; // The total number of elements\n\n    this.totalElements = 0; // The total number of pages\n\n    this.totalPages = 0; // The current page number\n\n    this.pageNumber = 0;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}