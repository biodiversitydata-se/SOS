{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { icon, latLng, marker, tileLayer } from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@asymmetrik/ngx-leaflet\";\nimport * as i4 from \"@asymmetrik/ngx-leaflet-markercluster\";\n\nfunction InvalidMapComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"span\", 4);\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction InvalidMapComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.markerClusterData.length, \" invalid location observations shown\");\n  }\n}\n\nexport let InvalidMapComponent = /*#__PURE__*/(() => {\n  class InvalidMapComponent {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this._dataSetId = \"0\";\n      this._instance = \"0\";\n      this.options = {\n        layers: [tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          maxZoom: 18,\n          attribution: 'OpenStreetMap'\n        })],\n        zoom: 5,\n        center: latLng(59.819541868159256, 17.73797190347293)\n      };\n      this.loadingData = false;\n      this.markerClusterOptions = {};\n      this.markerClusterData = [];\n    }\n\n    get dataSetId() {\n      return this._dataSetId;\n    }\n\n    set dataSetId(id) {\n      this._dataSetId = id;\n      this.updateMap();\n    }\n\n    get instance() {\n      return this._instance;\n    }\n\n    set instance(id) {\n      this._instance = id;\n      this.updateMap();\n    }\n\n    ngOnInit() {}\n\n    updateMap() {\n      if (this.loadingData || this.dataSetId == \"-1\") {\n        return;\n      } else {\n        this.loadingData = true;\n      }\n\n      this.markerClusterData = [];\n      this.loadingData = true;\n      this.http.get(this.baseUrl + 'invalidobservations?dataSetId=' + this._dataSetId + \"&instanceId=\" + this._instance).subscribe(result => {\n        this.markerClusterData = result.map(function (val, index) {\n          var description = '<span>Id:' + val.occurrenceId + '</span><br/><span>DatasetName:' + val.dataSetName + '</span><br/><span>DatasetId:' + val.dataSetId + '</span>';\n          var m = marker([val.lat, val.lon], {\n            icon: icon({\n              iconSize: [25, 41],\n              iconAnchor: [13, 41],\n              iconUrl: 'assets/marker-icon.png',\n              shadowUrl: 'assets/marker-shadow.png'\n            })\n          }).bindPopup(description);\n          return m;\n        });\n        this.loadingData = false;\n      }, error => console.error(error));\n    }\n\n  }\n\n  InvalidMapComponent.ɵfac = function InvalidMapComponent_Factory(t) {\n    return new (t || InvalidMapComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n  };\n\n  InvalidMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InvalidMapComponent,\n    selectors: [[\"app-invalid-map\"]],\n    inputs: {\n      dataSetId: \"dataSetId\",\n      instance: \"instance\"\n    },\n    decls: 3,\n    vars: 5,\n    consts: [[\"class\", \"spinner-border\", \"role\", \"status\", 4, \"ngIf\"], [4, \"ngIf\"], [\"leaflet\", \"\", 2, \"height\", \"600px\", 3, \"leafletOptions\", \"leafletMarkerCluster\", \"leafletMarkerClusterOptions\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"sr-only\"]],\n    template: function InvalidMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, InvalidMapComponent_div_0_Template, 3, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, InvalidMapComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.loadingData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loadingData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"leafletOptions\", ctx.options)(\"leafletMarkerCluster\", ctx.markerClusterData)(\"leafletMarkerClusterOptions\", ctx.markerClusterOptions);\n      }\n    },\n    directives: [i2.NgIf, i3.LeafletDirective, i4.LeafletMarkerClusterDirective],\n    styles: [\"\"]\n  });\n  return InvalidMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}