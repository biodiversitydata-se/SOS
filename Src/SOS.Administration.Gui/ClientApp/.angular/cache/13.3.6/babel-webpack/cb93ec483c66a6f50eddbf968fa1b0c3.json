{"ast":null,"code":"import { tileLayer } from 'leaflet';\n\nvar LeafletTileLayerDefinition =\n/** @class */\nfunction () {\n  function LeafletTileLayerDefinition(type, url, options) {\n    this.type = type;\n    this.url = url;\n    this.options = options;\n  }\n  /**\n   * Creates a TileLayer from the provided definition. This is a convenience function\n   * to help with generating layers from objects.\n   *\n   * @param layerDef The layer to create\n   * @returns {TileLayer} The TileLayer that has been created\n   */\n\n\n  LeafletTileLayerDefinition.createTileLayer = function (layerDef) {\n    var layer;\n\n    switch (layerDef.type) {\n      case 'xyz':\n        layer = tileLayer(layerDef.url, layerDef.options);\n        break;\n\n      case 'wms':\n      default:\n        layer = tileLayer.wms(layerDef.url, layerDef.options);\n        break;\n    }\n\n    return layer;\n  };\n  /**\n   * Creates a TileLayer for each key in the incoming map. This is a convenience function\n   * for generating an associative array of layers from an associative array of objects\n   *\n   * @param layerDefs A map of key to tile layer definition\n   * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\n   */\n\n\n  LeafletTileLayerDefinition.createTileLayers = function (layerDefs) {\n    var layers = {};\n\n    for (var k in layerDefs) {\n      if (layerDefs.hasOwnProperty(k)) {\n        layers[k] = LeafletTileLayerDefinition.createTileLayer(layerDefs[k]);\n      }\n    }\n\n    return layers;\n  };\n  /**\n   * Create a Tile Layer from the current state of this object\n   *\n   * @returns {TileLayer} A new TileLayer\n   */\n\n\n  LeafletTileLayerDefinition.prototype.createTileLayer = function () {\n    return LeafletTileLayerDefinition.createTileLayer(this);\n  };\n\n  return LeafletTileLayerDefinition;\n}();\n\nexport { LeafletTileLayerDefinition }; //# sourceMappingURL=leaflet-tile-layer-definition.model.js.map","map":null,"metadata":{},"sourceType":"module"}