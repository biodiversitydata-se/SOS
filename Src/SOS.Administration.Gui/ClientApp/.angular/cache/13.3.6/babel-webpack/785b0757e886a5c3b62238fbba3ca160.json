{"ast":null,"code":"import { control } from 'leaflet';\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\n\nvar LeafletControlLayersWrapper =\n/** @class */\nfunction () {\n  function LeafletControlLayersWrapper(zone, layersControlReady) {\n    this.zone = zone;\n    this.layersControlReady = layersControlReady;\n  }\n\n  LeafletControlLayersWrapper.prototype.getLayersControl = function () {\n    return this.layersControl;\n  };\n\n  LeafletControlLayersWrapper.prototype.init = function (controlConfig, controlOptions) {\n    var _this = this;\n\n    var baseLayers = controlConfig.baseLayers || {};\n    var overlays = controlConfig.overlays || {}; // Create the control outside of angular to ensure events don't trigger change detection\n\n    this.zone.runOutsideAngular(function () {\n      _this.layersControl = control.layers(baseLayers, overlays, controlOptions);\n    });\n    this.layersControlReady.emit(this.layersControl);\n    return this.layersControl;\n  };\n\n  LeafletControlLayersWrapper.prototype.applyBaseLayerChanges = function (changes) {\n    var results = new LeafletControlLayersChanges();\n\n    if (null != this.layersControl) {\n      results = this.applyChanges(changes, this.layersControl.addBaseLayer);\n    }\n\n    return results;\n  };\n\n  LeafletControlLayersWrapper.prototype.applyOverlayChanges = function (changes) {\n    var results = new LeafletControlLayersChanges();\n\n    if (null != this.layersControl) {\n      results = this.applyChanges(changes, this.layersControl.addOverlay);\n    }\n\n    return results;\n  };\n\n  LeafletControlLayersWrapper.prototype.applyChanges = function (changes, addFn) {\n    var _this = this;\n\n    var results = new LeafletControlLayersChanges();\n\n    if (null != changes) {\n      // All layer management is outside angular to avoid layer events from triggering change detection\n      this.zone.runOutsideAngular(function () {\n        changes.forEachChangedItem(function (c) {\n          _this.layersControl.removeLayer(c.previousValue);\n\n          addFn.call(_this.layersControl, c.currentValue, c.key);\n          results.layersChanged++;\n        });\n        changes.forEachRemovedItem(function (c) {\n          _this.layersControl.removeLayer(c.previousValue);\n\n          results.layersRemoved++;\n        });\n        changes.forEachAddedItem(function (c) {\n          addFn.call(_this.layersControl, c.currentValue, c.key);\n          results.layersAdded++;\n        });\n      });\n    }\n\n    return results;\n  };\n\n  return LeafletControlLayersWrapper;\n}();\n\nexport { LeafletControlLayersWrapper }; //# sourceMappingURL=leaflet-control-layers.wrapper.js.map","map":null,"metadata":{},"sourceType":"module"}