{"ast":null,"code":"'use strict';\n\nconst hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nmodule.exports = (hex, options = {}) => {\n  if (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n    throw new TypeError('Expected a valid hex string');\n  }\n\n  hex = hex.replace(/^#/, '');\n  let alphaFromHex = 1;\n\n  if (hex.length === 8) {\n    alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n    hex = hex.slice(0, 6);\n  }\n\n  if (hex.length === 4) {\n    alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n    hex = hex.slice(0, 3);\n  }\n\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  const number = Number.parseInt(hex, 16);\n  const red = number >> 16;\n  const green = number >> 8 & 255;\n  const blue = number & 255;\n  const alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n\n  if (options.format === 'array') {\n    return [red, green, blue, alpha];\n  }\n\n  if (options.format === 'css') {\n    const alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n    return `rgb(${red} ${green} ${blue}${alphaString})`;\n  }\n\n  return {\n    red,\n    green,\n    blue,\n    alpha\n  };\n};","map":null,"metadata":{},"sourceType":"script"}