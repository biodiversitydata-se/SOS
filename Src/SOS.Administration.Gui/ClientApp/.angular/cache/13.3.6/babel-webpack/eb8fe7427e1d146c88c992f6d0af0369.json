{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { format, parseISO } from 'date-fns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n\nfunction FunctionalTestsComponent_ul_12_ul_4__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 3);\n    i0.ɵɵelement(1, \"path\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FunctionalTestsComponent_ul_12_ul_4__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 1);\n    i0.ɵɵelement(1, \"path\", 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FunctionalTestsComponent_ul_12_ul_4_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const test_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", test_r4.errorMessages, \"]\");\n  }\n}\n\nfunction FunctionalTestsComponent_ul_12_ul_4_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const test_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", test_r4.timeTakenMs, \"ms\");\n  }\n}\n\nfunction FunctionalTestsComponent_ul_12_ul_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 12)(1, \"li\");\n    i0.ɵɵtemplate(2, FunctionalTestsComponent_ul_12_ul_4__svg_svg_2_Template, 2, 0, \"svg\", 13);\n    i0.ɵɵtemplate(3, FunctionalTestsComponent_ul_12_ul_4__svg_svg_3_Template, 2, 0, \"svg\", 14);\n    i0.ɵɵtext(4);\n    i0.ɵɵtemplate(5, FunctionalTestsComponent_ul_12_ul_4_span_5_Template, 2, 1, \"span\", 15);\n    i0.ɵɵtemplate(6, FunctionalTestsComponent_ul_12_ul_4_span_6_Template, 2, 1, \"span\", 16);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const test_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r3.getTestClass(test_r4.currentStatus));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", test_r4.currentStatus == \"Failed\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", test_r4.currentStatus == \"Succeeded\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", test_r4.description, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", test_r4.errorMessages.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", test_r4.currentStatus != \"Unknown\");\n  }\n}\n\nfunction FunctionalTestsComponent_ul_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 9)(1, \"li\", 10)(2, \"h4\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, FunctionalTestsComponent_ul_12_ul_4_Template, 7, 7, \"ul\", 11);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(group_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getTests(group_r2));\n  }\n}\n\nfunction FunctionalTestsComponent_div_17__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 3);\n    i0.ɵɵelement(1, \"path\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FunctionalTestsComponent_div_17__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 1);\n    i0.ɵɵelement(1, \"path\", 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FunctionalTestsComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtemplate(2, FunctionalTestsComponent_div_17__svg_svg_2_Template, 2, 0, \"svg\", 13);\n    i0.ɵɵtemplate(3, FunctionalTestsComponent_div_17__svg_svg_3_Template, 2, 0, \"svg\", 14);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const message_r11 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.getMessageClass(message_r11.type));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", message_r11.type == \"Failed\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", message_r11.type == \"Succeeded\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r11.message, \" \");\n  }\n}\n\nexport let FunctionalTestsComponent = /*#__PURE__*/(() => {\n  class FunctionalTestsComponent {\n    constructor(http, baseUrl) {\n      this.baseUrl = baseUrl;\n      this.functionalTests = [];\n      this.testResults = [];\n      this.messageList = [];\n      this.loadingData = false;\n      this.http = http;\n    }\n\n    ngOnInit() {\n      this.fetchTests();\n    }\n\n    fetchTests() {\n      this.loadingData = true;\n      this.http.get(this.baseUrl + 'tests').subscribe(result => {\n        this.functionalTests = result;\n\n        for (let test of this.functionalTests) {\n          test.currentStatus = \"Unknown\";\n        }\n\n        this.loadingData = false;\n        this.runTests();\n      }, error => console.error(error));\n    }\n\n    runTests() {\n      this.messageList = [];\n\n      for (let test of this.functionalTests) {\n        test.currentStatus = \"Unknown\";\n        test.errorMessages = \"\";\n      }\n\n      this.testResults = [];\n\n      for (let test of this.functionalTests) {\n        this.messageList.push({\n          timestamp: new Date(),\n          message: \"Running test:'\" + test.description + \"'\",\n          type: \"Info\"\n        });\n        this.http.get('tests/' + test.route).subscribe(result => {\n          this.testResults.push(result);\n\n          if (result) {\n            this.setTestStatus(test, result);\n\n            for (let message of result.results) {\n              this.messageList.push({\n                timestamp: new Date(),\n                message: test.description + ': ' + message.result,\n                type: message.status\n              });\n            }\n          }\n        }, error => this.messageList.push({\n          timestamp: new Date(),\n          message: error.message,\n          type: \"Failed\"\n        }));\n      }\n    }\n\n    setTestStatus(test, result) {\n      test.timeTakenMs = result.timeTakenMs;\n      let failed = false;\n\n      for (let res of result.results) {\n        if (res.status != \"Succeeded\") {\n          failed = true;\n          test.errorMessages += res.result + \", \";\n        }\n      }\n\n      if (failed) {\n        test.currentStatus = \"Failed\";\n      } else {\n        test.currentStatus = \"Succeeded\";\n      }\n    }\n\n    getTotalTime() {\n      let totalTime = 0;\n\n      for (let result of this.testResults) {\n        totalTime += result.timeTakenMs;\n      }\n\n      return totalTime;\n    }\n\n    getGroups() {\n      let groups = [];\n\n      for (let test of this.functionalTests) {\n        if (!groups.includes(test.group)) {\n          groups.push(test.group);\n        }\n      }\n\n      return groups;\n    }\n\n    getTests(group) {\n      return this.functionalTests.filter(p => p.group == group);\n    }\n\n    getTestClass(type) {\n      if (type == \"Succeeded\") {\n        return \"list-group-item list-group-item-success\";\n      }\n\n      if (type == \"Failed\") {\n        return \"list-group-item list-group-item-danger\";\n      }\n\n      return \"list-group-item\";\n    }\n\n    getMessageClass(type) {\n      if (type == \"Succeeded\") {\n        return \"list-group-item-success\";\n      }\n\n      if (type == \"Failed\") {\n        return \"list-group-item-danger\";\n      }\n\n      return \"\";\n    }\n\n    getCompletedTestCount() {\n      let count = 0;\n\n      for (let result of this.testResults) {\n        for (let res of result.results) {\n          if (res.status == \"Succeeded\") {\n            count++;\n          }\n        }\n      }\n\n      return count;\n    }\n\n    getFailedTestCount() {\n      let count = 0;\n\n      for (let result of this.testResults) {\n        for (let res of result.results) {\n          if (res.status == \"Failed\") {\n            count++;\n          }\n        }\n      }\n\n      return count;\n    }\n\n    formatDate(params) {\n      if (params) {\n        return format(parseISO(params), 'HH:mm:ss');\n      } else {\n        return '';\n      }\n    }\n\n  }\n\n  FunctionalTestsComponent.ɵfac = function FunctionalTestsComponent_Factory(t) {\n    return new (t || FunctionalTestsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n  };\n\n  FunctionalTestsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FunctionalTestsComponent,\n    selectors: [[\"app-functional-tests\"]],\n    decls: 18,\n    vars: 5,\n    consts: [[\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"green\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-check\"], [\"fill-rule\", \"evenodd\", \"d\", \"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"red\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-x\"], [\"fill-rule\", \"evenodd\", \"d\", \"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"], [1, \"just-padding\"], [\"class\", \"list-group list-group-root\", 4, \"ngFor\", \"ngForOf\"], [2, \"height\", \"300px\", \"overflow-y\", \"visible\", \"overflow-x\", \"hidden\"], [4, \"ngFor\", \"ngForOf\"], [1, \"list-group\", \"list-group-root\"], [1, \"list-group-item\"], [\"class\", \"list-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-x\", \"fill\", \"red\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngIf\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-check\", \"fill\", \"green\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngIf\"], [4, \"ngIf\"], [\"style\", \"float:right\", 4, \"ngIf\"], [2, \"float\", \"right\"]],\n    template: function FunctionalTestsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FunctionalTestsComponent_Template_button_click_1_listener() {\n          return ctx.runTests();\n        });\n        i0.ɵɵtext(2, \"Run all tests\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelementStart(4, \"h5\");\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(5, \"svg\", 1);\n        i0.ɵɵelement(6, \"path\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7);\n        i0.ɵɵelementStart(8, \"svg\", 3);\n        i0.ɵɵelement(9, \"path\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(11, \"div\", 5);\n        i0.ɵɵtemplate(12, FunctionalTestsComponent_ul_12_Template, 5, 2, \"ul\", 6);\n        i0.ɵɵelementStart(13, \"h5\");\n        i0.ɵɵtext(14, \"Log\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"hr\");\n        i0.ɵɵelementStart(16, \"div\", 7);\n        i0.ɵɵtemplate(17, FunctionalTestsComponent_div_17_Template, 5, 5, \"div\", 8);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\"Completed: \", ctx.getCompletedTestCount(), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"Failed:\", ctx.getFailedTestCount(), \" - Total time: \", ctx.getTotalTime(), \"ms \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.getGroups());\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.messageList.reverse());\n      }\n    },\n    styles: [\"\"]\n  });\n  return FunctionalTestsComponent;\n})();\n\nclass TestMessage {}","map":null,"metadata":{},"sourceType":"module"}