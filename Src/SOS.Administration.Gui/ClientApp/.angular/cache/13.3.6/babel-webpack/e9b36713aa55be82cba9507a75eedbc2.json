{"ast":null,"code":"import { Directive, EventEmitter, Input, Output } from '@angular/core';\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@asymmetrik/ngx-leaflet';\n\nvar LeafletMarkerClusterDirective =\n/** @class */\nfunction () {\n  function LeafletMarkerClusterDirective(leafletDirective) {\n    // Hexbin data binding\n    this.markerData = []; // Fired when the marker cluster is created\n\n    this.markerClusterReady = new EventEmitter();\n    this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n  }\n\n  LeafletMarkerClusterDirective.prototype.ngOnInit = function () {\n    this.leafletDirective.init();\n    var map = this.leafletDirective.getMap();\n    this.markerClusterGroup = L.markerClusterGroup(this.markerClusterOptions); // Add the marker cluster group to the map\n\n    this.markerClusterGroup.addTo(map); // Set the data now that the markerClusterGroup exists\n\n    this.setData(this.markerData); // Fire the ready event\n\n    this.markerClusterReady.emit(this.markerClusterGroup);\n  };\n\n  LeafletMarkerClusterDirective.prototype.ngOnChanges = function (changes) {\n    // Set the new data\n    if (changes['markerData']) {\n      this.setData(this.markerData);\n    }\n  };\n\n  LeafletMarkerClusterDirective.prototype.setData = function (layers) {\n    // Ignore until the markerClusterGroup exists\n    if (null != this.markerClusterGroup) {\n      this.markerClusterGroup.clearLayers();\n      this.markerClusterGroup.addLayers(layers);\n    }\n  };\n\n  LeafletMarkerClusterDirective.ctorParameters = function () {\n    return [{\n      type: LeafletDirective\n    }];\n  };\n\n  LeafletMarkerClusterDirective.propDecorators = {\n    markerData: [{\n      type: Input,\n      args: ['leafletMarkerCluster']\n    }],\n    markerClusterOptions: [{\n      type: Input,\n      args: ['leafletMarkerClusterOptions']\n    }],\n    markerClusterReady: [{\n      type: Output,\n      args: ['leafletMarkerClusterReady']\n    }]\n  };\n\n  LeafletMarkerClusterDirective.ɵfac = function LeafletMarkerClusterDirective_Factory(t) {\n    return new (t || LeafletMarkerClusterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LeafletDirective));\n  };\n\n  LeafletMarkerClusterDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LeafletMarkerClusterDirective,\n    selectors: [[\"\", \"leafletMarkerCluster\", \"\"]],\n    inputs: {\n      markerData: [\"leafletMarkerCluster\", \"markerData\"],\n      markerClusterOptions: [\"leafletMarkerClusterOptions\", \"markerClusterOptions\"]\n    },\n    outputs: {\n      markerClusterReady: \"leafletMarkerClusterReady\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LeafletMarkerClusterDirective;\n}();\n\nexport { LeafletMarkerClusterDirective }; //# sourceMappingURL=leaflet-markercluster.directive.js.map","map":null,"metadata":{},"sourceType":"module"}