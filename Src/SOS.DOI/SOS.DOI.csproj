<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TargetFramework>net6.0</TargetFramework>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<IsPackable>false</IsPackable>
		<SpaRoot>ClientApp\</SpaRoot>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

		<!-- Set this to true if you enable server-side prerendering -->
		<BuildServerSideRenderer>false</BuildServerSideRenderer>
		<UserSecretsId>92cd2cdb-499c-480d-9f04-feaf7a68f89c</UserSecretsId>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Azure.Storage.Blobs" Version="12.11.0" />
		<PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="6.0.4" />
		<PackageReference Include="Microsoft.TypeScript.MSBuild" Version="4.6.4">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="NLog.Web.AspNetCore" Version="4.14.0" />
	</ItemGroup>

	<ItemGroup>
		<!-- Don't publish the SPA source files, but do show them in the project files list -->
		<Content Remove="$(SpaRoot)**" />
		<None Remove="$(SpaRoot)**" />
		<None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
	</ItemGroup>

	<ItemGroup>
		<None Remove="ClientApp\src\models\datacite\doi-creator.ts" />
		<None Remove="ClientApp\src\models\datacite\doi-metadata.ts" />
		<None Remove="ClientApp\src\models\datacite\doi-response.ts" />
		<None Remove="ClientApp\src\models\datacite\doi-responsemeta.ts" />
		<None Remove="ClientApp\src\models\datacite\doi-title.ts" />
		<None Remove="ClientApp\src\models\datacite\index.ts" />
		<None Remove="ClientApp\src\services\doi.service.ts" />
		<None Remove="ClientApp\src\services\httpclient.service.ts" />
		<None Remove="ClientApp\src\services\index.ts" />
	</ItemGroup>

	<ItemGroup>
		<TypeScriptCompile Remove="ClientApp\src\app\about\about.component.ts" />
		<TypeScriptCompile Remove="ClientApp\src\app\components\doi-list\doi-list.component.ts" />
		<TypeScriptCompile Remove="ClientApp\src\app\components\pagination\pagination.component.ts" />
		<TypeScriptCompile Remove="ClientApp\src\app\list\list.component.ts" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\SOS.lib\SOS.Lib.csproj" />
	</ItemGroup>

	<ItemGroup>
		<TypeScriptCompile Include="ClientApp\src\models\datacite\doi-creator.ts" />
		<TypeScriptCompile Include="ClientApp\src\models\datacite\doi-title.ts" />
		<TypeScriptCompile Include="ClientApp\src\models\datacite\index.ts">
			<SubType>Code</SubType>
		</TypeScriptCompile>
		<TypeScriptCompile Include="ClientApp\src\services\doi.service.ts" />
		<TypeScriptCompile Include="ClientApp\src\services\httpclient.service.ts" />
		<TypeScriptCompile Include="ClientApp\src\services\index.ts" />
	</ItemGroup>

	<ItemGroup>
		<None Update="ClientApp\src\models\datacite\doi-description.js">
			<DependentUpon>doi-description.ts</DependentUpon>
		</None>
		<None Update="ClientApp\src\models\datacite\doi-description.js.map">
			<DependentUpon>doi-description.js</DependentUpon>
		</None>
		<None Update="ClientApp\src\models\datacite\doi-metadata - Copy.js">
			<DependentUpon>doi-metadata.ts</DependentUpon>
		</None>
		<None Update="ClientApp\src\models\datacite\doi-metadata.js">
			<DependentUpon>doi-metadata.ts</DependentUpon>
		</None>
	</ItemGroup>

	<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	</Target>

	<Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
			<DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>%(DistFiles.Identity)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>

</Project>
