{
  "openapi": "3.0.1",
  "info": {
    "title": "Species Observation System API (Internal)",
    "description": "Species Observation System API V1.5.",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://sos-search.artdata.slu.se"
    }
  ],
  "paths": {
    "/api/ApiInfo": {
      "get": {
        "tags": [
          "ApiInfo"
        ],
        "operationId": "ApiInfo_GetApiInfo",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInformation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInformation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInformation"
                }
              }
            }
          }
        }
      }
    },
    "/Areas": {
      "get": {
        "tags": [
          "Areas"
        ],
        "description": "Search for areas (regions).",
        "operationId": "Areas_GetAreas",
        "parameters": [
          {
            "name": "areaTypes",
            "in": "query",
            "description": "Filter used to limit number of areas returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AreaTypeDto"
              }
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Filter used to limit number of areas returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned areas",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of areas to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AreaBaseDtoPagedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaBaseDtoPagedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaBaseDtoPagedResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Areas/{areaType}/{featureId}": {
      "get": {
        "tags": [
          "Areas"
        ],
        "description": "Get a single area",
        "operationId": "Areas_GetArea",
        "parameters": [
          {
            "name": "areaType",
            "in": "path",
            "description": "The area type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AreaTypeDto"
            }
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "The feature id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AreaBaseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaBaseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaBaseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Areas/{areaType}/{featureId}/Export": {
      "get": {
        "tags": [
          "Areas"
        ],
        "description": "Get an area as a zipped JSON file including its polygon.",
        "operationId": "Areas_GetExport",
        "parameters": [
          {
            "name": "areaType",
            "in": "path",
            "description": "The area type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AreaTypeDto"
            }
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "The FeatureId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Export format.",
            "schema": {
              "$ref": "#/components/schemas/AreaExportFormatDto"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/DataProviders": {
      "get": {
        "tags": [
          "DataProviders"
        ],
        "description": "Get all data providers.",
        "operationId": "DataProviders_GetDataProviders",
        "parameters": [
          {
            "name": "categories",
            "in": "query",
            "description": "Category/ies to match. DataHostesship, RegionalInventory, CitizenSciencePlatform, Atlas, \n            Terrestrial, Freshwater, Marine, Vertebrates, Arthropods, Microorganisms, Plants_Bryophytes_Lichens,\n            Fungi, Algae",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataProviderCategory"
              }
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "Culture code.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "includeProvidersWithNoObservations",
            "in": "query",
            "description": "If false, data providers with no observations are excluded from the result.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataProviderDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataProviderDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataProviderDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/DataProviders/{providerId}/LastModified": {
      "get": {
        "tags": [
          "DataProviders"
        ],
        "description": "Get latest modified date for a data provider.",
        "operationId": "DataProviders_GetLastModifiedDateById",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "The data provider ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/DataProviders/{providerId}/EML": {
      "get": {
        "tags": [
          "DataProviders"
        ],
        "description": "Get provider EML file.",
        "operationId": "DataProviders_GetEML",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "The data provider ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Environment": {
      "get": {
        "tags": [
          "Environment"
        ],
        "description": "Gets the running enviroment.",
        "operationId": "Environment_Get",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentInformationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentInformationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentInformationDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Datasets": {
      "get": {
        "tags": [
          "Exports"
        ],
        "description": "Returns a list of data provider datasets (DwC-A) available for download. \nA file is usually created once a day for each dataset.",
        "operationId": "Exports_GetDatasetsList",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/My": {
      "get": {
        "tags": [
          "Exports"
        ],
        "description": "Get all exports for a user",
        "operationId": "Exports_GetMyExports",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportJobInfoDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportJobInfoDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportJobInfoDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/My/{id}": {
      "get": {
        "tags": [
          "Exports"
        ],
        "description": "Get export by id",
        "operationId": "Exports_GetMyExport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExportJobInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportJobInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportJobInfoDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Download/Csv": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download Csv export file. The limit is 25 000 observations. If you need to download more observations, use the OrderCsv endpoint.\nBy default, the file is compressed (zipped) using the GZIP format, but this can be changed via the gzip parameter.",
        "operationId": "Exports_DownloadCsv",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "description": "If true (default), the resulting file will be compressed by the GZIP file format.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Download/DwC": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download DwC export file. The limit is 25 000 observations. If you need to download more observations, use the OrderDwC endpoint.",
        "operationId": "Exports_DownloadDwC",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventBased",
            "in": "query",
            "description": "Event based Darwin Core if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Download/Excel": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download Excel export file. The limit is 25 000 observations. If you need to download more observations, use the OrderExcel endpoint.\nBy default, the file is compressed (zipped) using the GZIP format, but this can be changed via the gzip parameter.",
        "operationId": "Exports_DownloadExcel",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "dynamicProjectDataFields",
            "in": "query",
            "description": "Use dynamic added project related fields. Only for Excel export",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "description": "If true (default), the resulting file will be compressed by the GZIP file format.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Download/GeoJson": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download GeoJson export file. The limit is 25 000 observations. If you need to download more observations, use the OrderGeoJson endpoint.\nBy default, the file is compressed (zipped) using the GZIP format, but this can be changed via the gzip parameter.",
        "operationId": "Exports_DownloadGeoJson",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The label type to use if flat=false.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "flat",
            "in": "query",
            "description": "If true, the observations will be serialized as a flat JSON structure.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeNullValues",
            "in": "query",
            "description": "Exclude properties with null values. Applies when flat=true.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "description": "If true (default), the resulting file will be compressed by the GZIP file format.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Order/Csv": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a Csv file with observations based on provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderCsv",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A summary of the dataset you request. The description will be included in the email. If empty, an automatic description will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Order/DwC": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a DwC-A file with observations based on provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderDwC",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A summary of the dataset you request. The description will be included in the email. If empty, an automatic description will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventBased",
            "in": "query",
            "description": "Event based Darwin Core if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Order/Excel": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a Excel file with observations based on provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderExcel",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A summary of the dataset you request. The description will be included in the email. If empty, an automatic description will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "dynamicProjectDataFields",
            "in": "query",
            "description": "Use dynamic added project related fields. Only for Excel export",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Order/GeoJson": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a GeoJSON file with observations based on the provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderGeoJson",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A description of your download. Will be displayed in the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The label type to use if flat=false.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "flat",
            "in": "query",
            "description": "If true, the observations will be serialized as a flat JSON structure.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeNullValues",
            "in": "query",
            "description": "Exclude properties with null values. Applies when flat=true.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translation vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Internal/Download/Csv": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download Csv export file. The limit is 25 000 observations. If you need to download more observations, use the OrderCsv endpoint.\nBy default, the file is compressed (zipped) using the GZIP format, but this can be changed via the gzip parameter.",
        "operationId": "Exports_DownloadCsvInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "description": "If true (default), the resulting file will be compressed by the GZIP file format.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Internal/Download/DwC": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download DwC export file. The limit is 25 000 observations. If you need to download more observations, use the OrderDwC endpoint.",
        "operationId": "Exports_DownloadDwCInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventBased",
            "in": "query",
            "description": "Event based Darwin Core if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Internal/Download/Excel": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download Excel export file. The limit is 25 000 observations. If you need to download more observations, use the OrderExcel endpoint.\nBy default, the file is compressed (zipped) using the GZIP format, but this can be changed via the gzip parameter.",
        "operationId": "Exports_DownloadExcelInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "dynamicProjectDataFields",
            "in": "query",
            "description": "Use dynamic added project related fields. Only for Excel export",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "description": "If true (default), the resulting file will be compressed by the GZIP file format.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Internal/Download/GeoJson": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Download GeoJson export file. The limit is 25 000 observations. If you need to download more observations, use the OrderGeoJson endpoint.\nBy default, the file is compressed (zipped) using the GZIP format, but this can be changed via the gzip parameter.",
        "operationId": "Exports_DownloadGeoJsonInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The label type to use if flat=false.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "flat",
            "in": "query",
            "description": "If true, the observations will be serialized as a flat JSON structure.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeNullValues",
            "in": "query",
            "description": "Exclude properties with null values. Applies when flat=true.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "description": "If true (default), the resulting file will be compressed by the GZIP file format.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Exports/Internal/Order/Csv": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a Csv file with observations based on provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderCsvInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A summary of the dataset you request. The description will be included in the email. If empty, an automatic description will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Internal/Order/DwC": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a DwC-A file with observations based on provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderDwCInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A summary of the dataset you request. The description will be included in the email. If empty, an automatic description will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventBased",
            "in": "query",
            "description": "Event based Darwin Core if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Internal/Order/Excel": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a Excel file with observations based on provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderExcelInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A summary of the dataset you request. The description will be included in the email. If empty, an automatic description will be created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The column header type.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "dynamicProjectDataFields",
            "in": "query",
            "description": "Use dynamic added project related fields. Only for Excel export",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Exports/Internal/Order/GeoJson": {
      "post": {
        "tags": [
          "Exports"
        ],
        "description": "Starts the process of creating a GeoJSON file with observations based on the provided filter.\nWhen the file is ready, you will receive an email containing a download link.\nThe limit is 2 000 000 observations.\nYou can see the status of your export request by calling the \"/Jobs/{jobId}/Status\" endpoint.",
        "operationId": "Exports_OrderGeoJsonInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A description of your download. Will be displayed in the email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Obsolete, will be overided by fieldset in body data if any. The observation property field set.",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "propertyLabelType",
            "in": "query",
            "description": "The label type to use if flat=false.",
            "schema": {
              "$ref": "#/components/schemas/PropertyLabelType"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "Include sensitive observations if true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sendMailFromZendTo",
            "in": "query",
            "description": "Send pick up file e-mail from ZendTo when file is reay to pick up (Only work if sensitiveObservations = false)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "encryptPassword",
            "in": "query",
            "description": "Password used to encrypt file",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "confirmEncryptPassword",
            "in": "query",
            "description": "Confirm encrypt password",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "flat",
            "in": "query",
            "description": "If true, the observations will be serialized as a flat JSON structure.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeNullValues",
            "in": "query",
            "description": "Exclude properties with null values. Applies when flat=true.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translation vocabulary values.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Jobs/{jobId}/Status": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Get status of job",
        "operationId": "Jobs_GetStatus",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job id returned when export was requested",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Locations": {
      "post": {
        "tags": [
          "Locations"
        ],
        "description": "Get locations by id",
        "operationId": "Locations_GetLocationsByIds",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Locations/search": {
      "post": {
        "tags": [
          "Locations"
        ],
        "description": "Search for locations",
        "operationId": "Locations_Search",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Pagination start index.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "Limit user authorization too specified role.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "authorizationApplicationIdentifier",
            "in": "query",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeographicsFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GeographicsFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GeographicsFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationSearchResultDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationSearchResultDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationSearchResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/{id}": {
      "get": {
        "tags": [
          "Observations"
        ],
        "description": "Gets a single observation.",
        "operationId": "Observations_GetObservationById",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Preferred way to pass occurrence id. Override occurrenceId passed in query if any",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occurrenceId",
            "in": "query",
            "description": "The occurrence id of the observation to fetch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Define response output. Return Minimum, Extended or All properties",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, and the requested observation is sensitive (protected), then the original data will be returned (this requires authentication and authorization).\nIf false, and the requested observation is sensitive (protected), then diffused data will be returned.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "resolveGeneralizedObservations",
            "in": "query",
            "description": "If true, then try get real coordinates for generalized observations.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Count": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Count the number of observations matching the provided search filter.",
        "operationId": "Observations_Count",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, default, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterBaseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterBaseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterBaseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/GeoGridAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations into grid cells. Each grid cell contains the number\nof observations and the number of unique taxa (usually species) in the grid cell.\nThe grid cells are squares in WGS84 coordinate system which means that they also\nwill be squares in the WGS84 Web Mercator coordinate system. The following table shows the approximate grid cell size (width) in different\ncoordinate systems for the different zoom levels.\n| Zoom level | WGS84    | Web Mercator  |  SWEREF99TM(Southern Sweden) |  SWEREF99TM(North Sweden) |\n|------------|----------|---------------|:----------------------------:|:-------------------------:|\n| 1          |      180 |       20000km |                       8000km |                   12000km |\n| 2          |       90 |       10000km |                       4000km |                    6000km |\n| 3          |       45 |        5000km |                       2000km |                    3000km |\n| 4          |     22.5 |        2500km |                       1000km |                    1500km |\n| 5          |    11.25 |        1250km |                        500km |                     750km |\n| 6          |    5.625 |         600km |                        250km |                     360km |\n| 7          |   2.8125 |         300km |                        120km |                     180km |\n| 8          | 1.406250 |         150km |                         60km |                      90km |\n| 9          | 0.703125 |          80km |                         30km |                      45km |\n| 10         | 0.351563 |          40km |                         15km |                      23km |\n| 11         | 0.175781 |          20km |                          8km |                      11km |\n| 12         | 0.087891 |          10km |                          4km |                       6km |\n| 13         | 0.043945 |           5km |                          2km |                       3km |\n| 14         | 0.021973 |         2500m |                        1000m |                     1400m |\n| 15         | 0.010986 |         1200m |                         500m |                      700m |\n| 16         | 0.005493 |          600m |                         240m |                      350m |\n| 17         | 0.002747 |          300m |                         120m |                      180m |\n| 18         | 0.001373 |          150m |                          60m |                       90m |\n| 19         | 0.000687 |           80m |                          30m |                       45m |\n| 20         | 0.000343 |           40m |                          15m |                       22m |\n| 21         | 0.000172 |           19m |                           7m |                       11m |",
        "operationId": "Observations_GeogridAggregation",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "A zoom level between 1 and 21.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skipCache",
            "in": "query",
            "description": "If true, skip using cached result.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/MetricGridAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations into grid cells. Each grid cell contains the number\nof observations and the number of unique taxa (usually species) in the grid cell.\nThe grid cells are squares in SWEREF 99 TM coordinate system",
        "operationId": "Observations_MetricGridAggregation",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gridCellSizeInMeters",
            "in": "query",
            "description": "Size of grid cell in meters",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100000
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridMetricResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridMetricResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridMetricResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Search": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Get observations matching the provided search filter. Permitted filter values depends on the specific filter field:\nSome values are retrieved from the vocabularies endpoint. Some are defined as enum values. Some values are defined in other systems, e.g. Dyntaxa taxon id's.\nSome are defined by the range of the underlying data type.",
        "operationId": "Observations_ObservationsBySearch",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Application identifier making the request, used to get proper authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned observations.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of observations to return. Max is 1000 observations in each request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (Asc, Desc).",
            "schema": {
              "$ref": "#/components/schemas/SearchSortOrder"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB).",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationPagedResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationPagedResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationPagedResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Search/DwC": {
      "get": {
        "tags": [
          "Observations"
        ],
        "description": "Search observations and return in Darwin Core format.",
        "operationId": "Observations_ObservationsBySearchDwc",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Application identifier making the request, used to get proper authorization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kingdom",
            "in": "query",
            "description": "Taxon kingdom. Plantae, arachnida, mollusca, insecta, amphibia, aves, mammalia, reptilia, actinopterygii, animalia, fungi",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identificationVerificationStatus",
            "in": "query",
            "description": "Identification verification status. Research, casual",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "license",
            "in": "query",
            "description": "none,CC-BY,CC-BY-NC,CC-BY-SA",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scientificName",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taxonKey",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "issue",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "has",
            "in": "query",
            "description": "Geo,photos",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minEventDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "maxEventDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dataProviderIds",
            "in": "query",
            "description": "By default only Artportalen observations are returned. If you want other data providers specify them as a comma separated list. E.g. \"1,3,8,12\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB).",
            "schema": {
              "type": "string",
              "default": "en-GB"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned observations.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of observations to return. Max is 1000 observations in each request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (Asc, Desc).",
            "schema": {
              "$ref": "#/components/schemas/SearchSortOrder"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DarwinCoreOccurrenceDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DarwinCoreOccurrenceDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DarwinCoreOccurrenceDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/DwC/{id}": {
      "get": {
        "tags": [
          "Observations"
        ],
        "description": "Gets a single observation.",
        "operationId": "Observations_ObservationByIdDwc",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The occurrence id of the observation to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, and the requested observation is sensitive (protected), then the original data will be returned (this requires authentication and authorization).\nIf false, and the requested observation is sensitive (protected), then diffused data will be returned.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DarwinCoreOccurrenceDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DarwinCoreOccurrenceDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DarwinCoreOccurrenceDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/TaxonAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations by taxon. Each record contains TaxonId and the number of observations (ObservationCount) matching the search criteria.\nThe records are ordered by ObservationCount in descending order.\nTo get the first 100 taxa with the most observations, set skip to 0 and take to 100.\nYou can only get the first 1000 taxa by using paging. To retrieve all records, set skip and take parameters to null.",
        "operationId": "Observations_TaxonAggregation",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned records. If null, skip will be set to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of taxa to return. If null, all taxa will be returned. If not null, max number of records is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonAggregationItemDtoPagedResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonAggregationItemDtoPagedResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonAggregationItemDtoPagedResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/{id}": {
      "get": {
        "tags": [
          "Observations"
        ],
        "description": "Gets a single observation, including internal fields.",
        "operationId": "Observations_GetObservationByIdInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Preferred way to pass occurrence id. Override occurrenceId passed in query if any",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occurrenceId",
            "in": "query",
            "description": "The occurrence id of the observation to fetch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFieldSet",
            "in": "query",
            "description": "Define response output. Return Minimum, Extended or All properties",
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, sensitive observations index is queried if you have access rights.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "resolveGeneralizedObservations",
            "in": "query",
            "description": "If true, then try get real coordinates for generalized observations.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/Count": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Count matching observations using internal filter",
        "operationId": "Observations_CountInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalBaseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalBaseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalBaseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/CachedCount": {
      "get": {
        "tags": [
          "Observations"
        ],
        "description": "Count the number of present observations for the specified taxon. This endpoint uses caching to improve performance.",
        "operationId": "Observations_CachedCountInternal",
        "parameters": [
          {
            "name": "taxonId",
            "in": "query",
            "description": "Count present observations for this taxon.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonSumAggregationItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonSumAggregationItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonSumAggregationItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Count the number of present observations for the specified taxa. This endpoint uses caching to improve performance.",
        "operationId": "Observations_MultipleCachedCountInternal",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Count present observations for these taxa.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonSumAggregationItem"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonSumAggregationItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonSumAggregationItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/GeoGridAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations into grid cells. Each grid cell contains the number\nof observations and the number of unique taxa (usually species) in the grid cell.\nThe grid cells are squares in WGS84 coordinate system which means that they also\nwill be squares in the WGS84 Web Mercator coordinate system. The following table shows the approximate grid cell size (width) in different\ncoordinate systems for the different zoom levels.\n| Zoom level | WGS84    | Web Mercator  |  SWEREF99TM(Southern Sweden) |  SWEREF99TM(North Sweden) |\n|------------|----------|---------------|:----------------------------:|:-------------------------:|\n| 1          |      180 |       20000km |                       8000km |                   12000km |\n| 2          |       90 |       10000km |                       4000km |                    6000km |\n| 3          |       45 |        5000km |                       2000km |                    3000km |\n| 4          |     22.5 |        2500km |                       1000km |                    1500km |\n| 5          |    11.25 |        1250km |                        500km |                     750km |\n| 6          |    5.625 |         600km |                        250km |                     360km |\n| 7          |   2.8125 |         300km |                        120km |                     180km |\n| 8          | 1.406250 |         150km |                         60km |                      90km |\n| 9          | 0.703125 |          80km |                         30km |                      45km |\n| 10         | 0.351563 |          40km |                         15km |                      23km |\n| 11         | 0.175781 |          20km |                          8km |                      11km |\n| 12         | 0.087891 |          10km |                          4km |                       6km |\n| 13         | 0.043945 |           5km |                          2km |                       3km |\n| 14         | 0.021973 |         2500m |                        1000m |                     1400m |\n| 15         | 0.010986 |         1200m |                         500m |                      700m |\n| 16         | 0.005493 |          600m |                         240m |                      350m |\n| 17         | 0.002747 |          300m |                         120m |                      180m |\n| 18         | 0.001373 |          150m |                          60m |                       90m |\n| 19         | 0.000687 |           80m |                          30m |                       45m |\n| 20         | 0.000343 |           40m |                          15m |                       22m |\n| 21         | 0.000172 |           19m |                           7m |                       11m |",
        "operationId": "Observations_GeogridAggregationInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "A zoom level between 1 and 21.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/GeoGridAggregationGeoJson": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations into grid cells and returns them as a GeoJSON file.",
        "operationId": "Observations_GeogridAggregationAsGeoJsonInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "A zoom level between 1 and 21.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/GeoGridTaxaAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations into grid cells and taxa. Each grid cell contains a list of all taxa (usually species)\nin the grid cell and the number of observations. \nThe grid cells are squares in WGS84 coordinate system which means that they also\nwill be squares in the WGS84 Web Mercator coordinate system. Due to paging, the last grid cell in the result usually does not contain all its taxa.\nThe remaining taxa will be retrieved in the next page.\nThe following table shows the approximate grid cell size (width) in different\ncoordinate systems for the different zoom levels.\n| Zoom level | WGS84    | Web Mercator  |  SWEREF99TM(Southern Sweden) |  SWEREF99TM(North Sweden) |\n|------------|----------|---------------|:----------------------------:|:-------------------------:|\n| 1          |      180 |       20000km |                       8000km |                   12000km |\n| 2          |       90 |       10000km |                       4000km |                    6000km |\n| 3          |       45 |        5000km |                       2000km |                    3000km |\n| 4          |     22.5 |        2500km |                       1000km |                    1500km |\n| 5          |    11.25 |        1250km |                        500km |                     750km |\n| 6          |    5.625 |         600km |                        250km |                     360km |\n| 7          |   2.8125 |         300km |                        120km |                     180km |\n| 8          | 1.406250 |         150km |                         60km |                      90km |\n| 9          | 0.703125 |          80km |                         30km |                      45km |\n| 10         | 0.351563 |          40km |                         15km |                      23km |\n| 11         | 0.175781 |          20km |                          8km |                      11km |\n| 12         | 0.087891 |          10km |                          4km |                       6km |\n| 13         | 0.043945 |           5km |                          2km |                       3km |\n| 14         | 0.021973 |         2500m |                        1000m |                     1400m |\n| 15         | 0.010986 |         1200m |                         500m |                      700m |\n| 16         | 0.005493 |          600m |                         240m |                      350m |\n| 17         | 0.002747 |          300m |                         120m |                      180m |\n| 18         | 0.001373 |          150m |                          60m |                       90m |\n| 19         | 0.000687 |           80m |                          30m |                       45m |\n| 20         | 0.000343 |           40m |                          15m |                       22m |\n| 21         | 0.000172 |           19m |                           7m |                       11m |",
        "operationId": "Observations_GeogridTaxaAggregationInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "A zoom level between 1 and 21.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "geoTilePage",
            "in": "query",
            "description": "The GeoTile key used to retrieve the next next page of data. Should be null in the first request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taxonIdPage",
            "in": "query",
            "description": "The TaxonId key used to retrieve the next page of data. Should be null in the first request.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridTileTaxonPageResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridTileTaxonPageResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoGridTileTaxonPageResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/MetricGridAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations into grid cells. Each grid cell contains the number\nof observations and the number of unique taxa (usually species) in the grid cell.\nThe grid cells are squares in SWEREF 99 TM coordinate system",
        "operationId": "Observations_MetricGridAggregationInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gridCellSizeInMeters",
            "in": "query",
            "description": "Size of grid cell in meters",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10000
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "metricCoordinateSys",
            "in": "query",
            "description": "Metric coordinate system used to calculate grid cells",
            "schema": {
              "$ref": "#/components/schemas/MetricCoordinateSys"
            }
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "Returned format",
            "schema": {
              "$ref": "#/components/schemas/OutputFormatDto"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/Search": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Get observations matching the provided search filter. Permitted filter values depends on the specific filter field:\nSome values are retrieved from the vocabularies endpoint. Some are defined as enum values. Some values are defined in other systems, e.g. Dyntaxa taxon id's.\nSome are defined by the range of the underlying data type.",
        "operationId": "Observations_ObservationsBySearchInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned observations.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of observations to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (Asc, Desc).",
            "schema": {
              "$ref": "#/components/schemas/SearchSortOrder"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB).",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "Select output format: JSON, GeoJSON with hierarchical properties, GeoJSON with flattened properties.",
            "schema": {
              "$ref": "#/components/schemas/OutputFormatDto"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationGeoPagedResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationGeoPagedResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationGeoPagedResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/SearchAggregated": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregate observations by the specified aggregation type.",
        "operationId": "Observations_SearchAggregatedInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aggregationType",
            "in": "query",
            "description": "The aggregation type.",
            "schema": {
              "$ref": "#/components/schemas/AggregationType"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned observations.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of records to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB).",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectPagedResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectPagedResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectPagedResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/TimeSeriesHistogram": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregate observations into a time series.",
        "operationId": "Observations_TimeSeriesHistogramInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization to specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeSeriesType",
            "in": "query",
            "description": "The aggregation type",
            "schema": {
              "$ref": "#/components/schemas/TimeSeriesTypeDto"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeSeriesHistogramResultDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeSeriesHistogramResultDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeSeriesHistogramResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/SearchScroll": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Get observations matching the provided search filter. This endpoint allows to retrieve up to 100 000 observations by using Elasticsearch scroll API.\nTimeout between calls are two minutes.",
        "operationId": "Observations_ObservationsScroll",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scroll id to use to get next batch. In first request scrollId should be empty.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of observations to return. Max is 10 000 observations in each request.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5000
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (Asc, Desc).",
            "schema": {
              "$ref": "#/components/schemas/SearchSortOrder"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB).",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only protected observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter used to limit the search.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationScrollResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationScrollResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservationScrollResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/SignalSearch": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Signal search",
        "operationId": "Observations_SignalSearchInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "areaBuffer",
            "in": "query",
            "description": "Are buffer 0 to 100m.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "onlyAboveMyClearance",
            "in": "query",
            "description": "If true, get signal only above users clearance.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "returnHttp4xxWhenNoPermissions",
            "in": "query",
            "description": "If true, an HTTP 403 response will be returned if the user attempts to search in areas where they lack permission.\nAn HTTP 409 response will be returned if the user has partial permission to search in an area and the signal search returns false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignalFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SignalFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SignalFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/TaxonAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates observations by taxon. Each record contains TaxonId and the number of observations (ObservationCount) matching the search criteria.\nThe records are ordered by ObservationCount in descending order.\nTo get the first 100 taxa with the most observations, set skip to 0 and take to 100.\nYou can only get the first 1000 taxa by using paging. To retrieve all records, set skip and take parameters to null.",
        "operationId": "Observations_TaxonAggregationInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned records. If null, skip will be set to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of taxa to return. If null, all taxa will be returned. If not null, max number of records is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "translationCultureCode",
            "in": "query",
            "description": "Culture code used for vocabulary translation (sv-SE, en-GB)",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sumUnderlyingTaxa",
            "in": "query",
            "description": "If true, the observation count will be the sum of all underlying taxa observation count, otherwise it will be the count for the specific taxon.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skipCache",
            "in": "query",
            "description": "If true, skip using cached result.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonAggregationItemDtoPagedResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonAggregationItemDtoPagedResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonAggregationItemDtoPagedResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/TaxonSumAggregation": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Aggregates present observations by taxon (absent observations are excluded).\nThe resulting items also contains sum of underlying taxa observation count.\nTo get the first 100 taxa with the most observations, set skip to 0 and take to 100.\nTo retrieve all records, set skip and take parameters to null.",
        "operationId": "Observations_TaxonSumAggregationInternal",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Start index of returned records. If null, skip will be set to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Max number of taxa to return. If null, all taxa will be returned. If not null, max number of records is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort by one of the following field: SumObservationCount, ObservationCount, SumProvinceCount, ProvinceCount.",
            "schema": {
              "type": "string",
              "default": "SumObservationCount"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (Asc, Desc).",
            "schema": {
              "$ref": "#/components/schemas/SearchSortOrder"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The taxon filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxonFilterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxonFilterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaxonFilterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonSumAggregationItemPagedResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonSumAggregationItemPagedResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonSumAggregationItemPagedResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Observations/Internal/TaxonExistsIndication": {
      "post": {
        "tags": [
          "Observations"
        ],
        "description": "Get an indication of how many observations exist for the taxa specified in the search criteria filter.\nIf protectedObservations is set to false, you must be aware of that the result can include false positives\nsince the protected observations coordinates are generalized to a grid depending on the protection level.",
        "operationId": "Observations_TaxonExistsIndicationInternal",
        "parameters": [
          {
            "name": "X-Authorization-Role-Id",
            "in": "header",
            "description": "Limit user authorization too specified role",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Authorization-Application-Identifier",
            "in": "header",
            "description": "Name of application used in authorization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validateSearchFilter",
            "in": "query",
            "description": "If true, validation of search filter values will be made. I.e. HTTP bad request response will be sent if there are invalid parameter values.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sensitiveObservations",
            "in": "query",
            "description": "If true, only sensitive (protected) observations will be searched (this requires authentication and authorization). If false, public available observations will be searched.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFilterAggregationInternalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonAggregationItemDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonAggregationItemDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonAggregationItemDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Systems/ProcessInformation": {
      "get": {
        "tags": [
          "Systems"
        ],
        "description": "Get information about observation processing",
        "operationId": "Systems_GetProcessInfo",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "True: get information about last processing, false get information about previous processing",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessInfoDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/TaxonLists": {
      "get": {
        "tags": [
          "TaxonLists"
        ],
        "description": "Get all Taxon list definitions.",
        "operationId": "TaxonLists_GetTaxonLists",
        "parameters": [
          {
            "name": "cultureCode",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonListDefinitionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonListDefinitionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonListDefinitionDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/TaxonLists/{taxonListId}/Taxa": {
      "get": {
        "tags": [
          "TaxonLists"
        ],
        "description": "Get all taxa in a taxon list.",
        "operationId": "TaxonLists_GetTaxa",
        "parameters": [
          {
            "name": "taxonListId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonListTaxonInformationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonListTaxonInformationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonListTaxonInformationDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/User/Information": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get user information. Add an authorization header to get information about the user.",
        "operationId": "User_GetUserInformation",
        "parameters": [
          {
            "name": "applicationIdentifier",
            "in": "query",
            "description": "Application identifier making the request, used for retrieve roles and authorizations for the application you use.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cultureCode",
            "in": "query",
            "description": "The culture code used for translating role descriptions.",
            "schema": {
              "type": "string",
              "default": "sv-SE"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Vocabularies/Projects": {
      "get": {
        "tags": [
          "Vocabularies"
        ],
        "description": "Get all Artportalen projects.",
        "operationId": "Vocabularies_GetProjects",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Vocabularies/ObservationProperties": {
      "get": {
        "tags": [
          "Vocabularies"
        ],
        "description": "Get all observation properties.",
        "operationId": "Vocabularies_GetObservationProperties",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyFieldDescriptionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyFieldDescriptionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyFieldDescriptionDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Vocabularies/ObservationProperties/{fieldSet}": {
      "get": {
        "tags": [
          "Vocabularies"
        ],
        "description": "Get observation properties that is part of a specific field set.",
        "operationId": "Vocabularies_GetObservationPropertiesByFieldSet",
        "parameters": [
          {
            "name": "fieldSet",
            "in": "path",
            "description": "Export property sets.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OutputFieldSet"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyFieldDescriptionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyFieldDescriptionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyFieldDescriptionDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Vocabularies": {
      "get": {
        "tags": [
          "Vocabularies"
        ],
        "description": "Get all vocabularies.",
        "operationId": "Vocabularies_GetVocabularies",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VocabularyDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VocabularyDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VocabularyDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Vocabularies/ZipFile": {
      "get": {
        "tags": [
          "Vocabularies"
        ],
        "description": "Get all vocabularies as zip file.",
        "operationId": "Vocabularies_GetVocabulariesAsZipFile",
        "parameters": [
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/Vocabularies/{vocabularyId}": {
      "get": {
        "tags": [
          "Vocabularies"
        ],
        "description": "Get a specific vocabulary.",
        "operationId": "Vocabularies_GetVocabularyById",
        "parameters": [
          {
            "name": "vocabularyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VocabularyIdDto"
            }
          },
          {
            "name": "X-Api-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.5"
            }
          },
          {
            "name": "X-Requesting-System",
            "in": "header",
            "description": "Name of system doing the request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VocabularyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VocabularyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VocabularyDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AggregationType": {
        "enum": [
          "SightingsPerWeek",
          "SightingsPerYear",
          "QuantityPerWeek",
          "QuantityPerYear",
          "SpeciesSightingsList",
          "SpeciesSightingsListTaxonCount",
          "SightingsPerWeek48"
        ],
        "type": "string",
        "description": "Type of aggregation"
      },
      "ApiInformation": {
        "type": "object",
        "properties": {
          "apiName": {
            "type": "string",
            "description": "Name of the API.",
            "nullable": true
          },
          "apiVersion": {
            "type": "string",
            "description": "API version with MAJOR, MINOR and PATCH version.",
            "nullable": true
          },
          "apiReleased": {
            "type": "string",
            "description": "The date when this API version was published.",
            "format": "date-time"
          },
          "apiDocumentation": {
            "type": "string",
            "description": "A link to the current API documentation.",
            "format": "uri",
            "nullable": true
          },
          "apiChangelog": {
            "type": "string",
            "description": "A link to the API changelog.",
            "format": "uri",
            "nullable": true
          },
          "apiStatus": {
            "type": "string",
            "description": "The state or status of the API according to lifecycle management. For example. alpha, beta, active, deprecated, retired or decommissioned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API information."
      },
      "Area": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "string",
            "description": "FeatureId for the area.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the area.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Area (region) information."
      },
      "AreaBaseDto": {
        "type": "object",
        "properties": {
          "areaType": {
            "$ref": "#/components/schemas/AreaTypeDto"
          },
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBox"
          },
          "featureId": {
            "type": "string",
            "description": "Feature id",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of area",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaBaseDtoPagedResult": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaBaseDto"
            },
            "description": "Paged records",
            "nullable": true
          },
          "skip": {
            "type": "integer",
            "description": "Ignores the specified number of items and returns a sequence starting at the item after the last skipped item (if\nany)",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items. Anything after the count is ignored",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Result returned by paged query"
      },
      "AreaExportFormatDto": {
        "enum": [
          "Json",
          "GeoJson",
          "Wkt"
        ],
        "type": "string",
        "description": "Export format for area."
      },
      "AreaFilterDto": {
        "type": "object",
        "properties": {
          "areaType": {
            "$ref": "#/components/schemas/AreaTypeDto"
          },
          "featureId": {
            "type": "string",
            "description": "Feature",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Area filter."
      },
      "AreaTypeDto": {
        "enum": [
          "Municipality",
          "Community",
          "Sea",
          "CountryRegion",
          "NatureType",
          "Province",
          "Ramsar",
          "BirdValidationArea",
          "Parish",
          "Spa",
          "County",
          "ProtectedNature",
          "SwedishForestAgencyDistricts",
          "Sci",
          "WaterArea",
          "Atlas5x5",
          "Atlas10x10",
          "SfvDistricts",
          "Campus"
        ],
        "type": "string",
        "description": "Area type dto"
      },
      "ArtportalenInternal": {
        "type": "object",
        "properties": {
          "associatedMedia": {
            "type": "string",
            "description": "Associated media file",
            "nullable": true
          },
          "birdValidationAreaIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Bird validation areas.",
            "nullable": true
          },
          "checklistId": {
            "type": "integer",
            "description": "Id of checklist",
            "format": "int32",
            "nullable": true
          },
          "confirmationYear": {
            "type": "integer",
            "description": "Year of confirmation.",
            "format": "int32",
            "nullable": true
          },
          "datasourceId": {
            "type": "integer",
            "description": "Data source id",
            "format": "int32",
            "nullable": true
          },
          "determinationYear": {
            "type": "integer",
            "description": "Year of determination.",
            "format": "int32",
            "nullable": true
          },
          "diffusionId": {
            "type": "integer",
            "description": "Id > 0 = diffused",
            "format": "int32"
          },
          "eventMonths": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Event month range start date => end date",
            "nullable": true
          },
          "fieldDiaryGroupId": {
            "type": "integer",
            "description": "Field diary group id",
            "format": "int32",
            "nullable": true
          },
          "hasTriggeredVerificationRules": {
            "type": "boolean",
            "description": "Has Triggered Verification Rules"
          },
          "hasAnyTriggeredVerificationRuleWithWarning": {
            "type": "boolean",
            "description": "Has any Triggered Verification Rule with Warning"
          },
          "hasUserComments": {
            "type": "boolean",
            "description": "HasUserComments"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Multimedia"
            },
            "description": "Media files",
            "nullable": true
          },
          "noteOfInterest": {
            "type": "boolean",
            "description": "Note of Interest."
          },
          "sightingId": {
            "type": "integer",
            "description": "Sighting Id.",
            "format": "int32"
          },
          "sightingSpeciesCollectionItemId": {
            "type": "integer",
            "description": "Id of SightingSpeciesCollectionItem in Artportalen.",
            "format": "int32",
            "nullable": true
          },
          "sightingTypeId": {
            "type": "integer",
            "description": "Sighting type.",
            "format": "int32"
          },
          "sightingTypeSearchGroupId": {
            "type": "integer",
            "description": "Sighting type search group id.",
            "format": "int32"
          },
          "speciesFactsIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of Species Facts connected to Taxon",
            "nullable": true
          },
          "sightingPublishTypeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Id of publishing types.",
            "nullable": true
          },
          "occurrenceRecordedByInternal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInternal"
            },
            "description": "Internal field used for searches by Artportalen, contains extra user information.",
            "nullable": true
          },
          "occurrenceVerifiedByInternal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInternal"
            },
            "description": "Info about users verifying the observation",
            "nullable": true
          },
          "locationPresentationNameParishRegion": {
            "type": "string",
            "description": "The original presentation name for ParishRegion from data provider.",
            "nullable": true
          },
          "parentLocality": {
            "type": "string",
            "description": "Name of parent location, if any.",
            "nullable": true
          },
          "reportedByUserId": {
            "type": "integer",
            "description": "User id of the person that reported the species observation.",
            "format": "int32",
            "nullable": true
          },
          "incrementalHarvested": {
            "type": "boolean",
            "description": "True if sighting was incremental harvested."
          },
          "secondHandInformation": {
            "type": "boolean",
            "description": "Second hand information flag"
          },
          "sightingBarcodeURL": {
            "type": "string",
            "description": "Sighting barcode url",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "description": "Sighting summary",
            "nullable": true
          },
          "triggeredObservationRuleActivityRuleId": {
            "type": "integer",
            "description": "Triggered observation rule activity id",
            "format": "int32",
            "nullable": true
          },
          "triggeredObservationRuleFrequencyId": {
            "type": "integer",
            "description": "Triggered observation rule frequency id",
            "format": "int32",
            "nullable": true
          },
          "triggeredObservationRulePeriodRuleId": {
            "type": "integer",
            "description": "Triggered observation rule period id",
            "format": "int32",
            "nullable": true
          },
          "triggeredObservationRulePromptRuleId": {
            "type": "integer",
            "description": "Triggered observation rule promt rule id",
            "format": "int32",
            "nullable": true
          },
          "triggeredObservationRulePrompts": {
            "type": "boolean",
            "description": "Triggered observation rule promts",
            "nullable": true
          },
          "triggeredObservationRuleRegionalSightingState": {
            "type": "integer",
            "description": "Triggered observation rule regional sighting state",
            "format": "int32",
            "nullable": true
          },
          "triggeredObservationRuleReproductionId": {
            "type": "integer",
            "description": "Triggered observation rule reproduction id",
            "format": "int32",
            "nullable": true
          },
          "triggeredObservationRuleStatusRuleId": {
            "type": "integer",
            "description": "Triggered observation rule status rule",
            "format": "int32",
            "nullable": true
          },
          "invasiveSpeciesTreatment": {
            "$ref": "#/components/schemas/VocabularyValue"
          }
        },
        "additionalProperties": false,
        "description": "Observation information specific for Artportalen."
      },
      "Cloudiness": {
        "enum": [
          "PartlyClear3To5Av8",
          "Clear0Of8",
          "Cloudy6To7Of8",
          "Overcast8Of8",
          "AlmostClear1To2Av8",
          "EverChanging0Till8Av8"
        ],
        "type": "string",
        "description": "States the cloud condtions during the survey event."
      },
      "CompassDirection": {
        "enum": [
          "North",
          "Northeast",
          "Northwest",
          "East",
          "South",
          "Southeast",
          "Southwest",
          "West"
        ],
        "type": "string",
        "description": "States the wind direction during the survey event as a compass direction."
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          },
          "z": {
            "type": "number",
            "format": "double"
          },
          "m": {
            "type": "number",
            "format": "double"
          },
          "coordinateValue": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CoordinateEqualityComparer": {
        "type": "object",
        "additionalProperties": false
      },
      "CoordinateSequence": {
        "type": "object",
        "properties": {
          "dimension": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "measures": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "spatial": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ordinates": {
            "$ref": "#/components/schemas/Ordinates"
          },
          "hasZ": {
            "type": "boolean",
            "readOnly": true
          },
          "hasM": {
            "type": "boolean",
            "readOnly": true
          },
          "zOrdinateIndex": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "mOrdinateIndex": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "first": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "last": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CoordinateSequenceFactory": {
        "type": "object",
        "properties": {
          "ordinates": {
            "$ref": "#/components/schemas/Ordinates"
          }
        },
        "additionalProperties": false
      },
      "CountyOccurrence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon county occurrence"
      },
      "DarwinCoreOccurrenceDto": {
        "type": "object",
        "properties": {
          "eventID": {
            "type": "string",
            "description": "An identifier for the  set; of information associated with an Event (something that occurs at a place and time). May be a global unique identifier or an identifier specific to the data  set;.",
            "nullable": true
          },
          "parentEventID": {
            "type": "string",
            "description": "An identifier for the broader Event that groups this and potentially other Events.",
            "nullable": true
          },
          "fieldNumber": {
            "type": "string",
            "description": "An identifier given to the event in the field. Often serves as a link between field notes and the Event.",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "description": "The date-time or interval during which an Event occurred. For occurrences, this is the date-time when the event was recorded. Not suitable for a time in a geological context.",
            "nullable": true
          },
          "eventTime": {
            "type": "string",
            "description": "The time or interval during which an Event occurred.",
            "nullable": true
          },
          "startDayOfYear": {
            "type": "integer",
            "description": "The earliest integer day of the year on which the Event occurred (1 for January 1, 365 for December 31, except in a leap year, in which case it is 366).",
            "format": "int32",
            "nullable": true
          },
          "endDayOfYear": {
            "type": "integer",
            "description": "The latest integer day of the year on which the Event occurred (1 for January 1, 365 for December 31, except in a leap year, in which case it is 366).",
            "format": "int32",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "description": "The four-digit year in which the Event occurred, according to the Common Era Calendar.",
            "format": "int32",
            "nullable": true
          },
          "month": {
            "type": "integer",
            "description": "The integer month in which the Event occurred.",
            "format": "int32",
            "nullable": true
          },
          "day": {
            "type": "integer",
            "description": "he integer day of the month on which the Event occurred.",
            "format": "int32",
            "nullable": true
          },
          "verbatimEventDate": {
            "type": "string",
            "description": "The verbatim original representation of the date and time information for an Event.",
            "nullable": true
          },
          "habitat": {
            "type": "string",
            "description": "A category or description of the habitat in which the Event occurred.",
            "nullable": true
          },
          "samplingProtocol": {
            "type": "string",
            "description": "The names of, references to, or descriptions of the methods or protocols used during an Event.",
            "nullable": true
          },
          "sampleSizeValue": {
            "type": "string",
            "description": "A numeric value for a measurement of the size (time duration, length, area, or volume) of a sample in a sampling event.",
            "nullable": true
          },
          "sampleSizeUnit": {
            "type": "string",
            "description": "The unit of measurement of the size (time duration, length, area, or volume) of a sample in a sampling event.",
            "nullable": true
          },
          "samplingEffort": {
            "type": "string",
            "description": "The amount of effort expended during an Event.",
            "nullable": true
          },
          "fieldNotes": {
            "type": "string",
            "description": "One of a) an indicator of the existence of, b) a reference to (publication, URI), or c) the text of notes taken in the field about the Event.",
            "nullable": true
          },
          "eventRemarks": {
            "type": "string",
            "description": "Comments or notes about the Event.",
            "nullable": true
          },
          "geologicalContextID": {
            "type": "string",
            "description": "An identifier for the set of information associated with a GeologicalContext (the location within a geological context, such as stratigraphy). \nMay be a global unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "earliestEonOrLowestEonothem": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic eon or lowest chrono-stratigraphic eonothem or the informal name (\"Precambrian\") \nattributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "latestEonOrHighestEonothem": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic eon or highest chrono-stratigraphic eonothem or the informal name (\"Precambrian\") \nattributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "earliestEraOrLowestErathem": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic era or lowest chronostratigraphic erathem attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "latestEraOrHighestErathem": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic era or highest chronostratigraphic erathem attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "earliestPeriodOrLowestSystem": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic period or lowest chronostratigraphic system attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "latestPeriodOrHighestSystem": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic period or highest chronostratigraphic system attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "earliestEpochOrLowestSeries": {
            "type": "string",
            "description": "he full name of the earliest possible geochronologic epoch or lowest chronostratigraphic series attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "latestEpochOrHighestSeries": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic epoch or highest chronostratigraphic series attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "earliestAgeOrLowestStage": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic age or lowest chronostratigraphic stage attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "latestAgeOrHighestStage": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic age or highest chronostratigraphic stage attributable to the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "lowestBiostratigraphicZone": {
            "type": "string",
            "description": "The full name of the lowest possible geological biostratigraphic zone of the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "highestBiostratigraphicZone": {
            "type": "string",
            "description": "The full name of the highest possible geological biostratigraphic zone of the stratigraphic horizon from which the cataloged item was collected.",
            "nullable": true
          },
          "lithostratigraphicTerms": {
            "type": "string",
            "description": "The combination of all litho-stratigraphic names for the rock from which the cataloged item was collected.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "The full name of the lithostratigraphic group from which the cataloged item was collected.",
            "nullable": true
          },
          "formation": {
            "type": "string",
            "description": "The full name of the lithostratigraphic formation from which the cataloged item was collected.",
            "nullable": true
          },
          "member": {
            "type": "string",
            "description": "The full name of the lithostratigraphic member from which the cataloged item was collected.",
            "nullable": true
          },
          "bed": {
            "type": "string",
            "description": "The full name of the lithostratigraphic bed from which the cataloged item was collected.",
            "nullable": true
          },
          "identificationID": {
            "type": "string",
            "description": "An identifier for the Identification (the body of information associated with the assignment of a scientific name). \nMay be a global unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "verbatimIdentification": {
            "type": "string",
            "description": "A string representing the taxonomic identification as it appeared in the original record.",
            "nullable": true
          },
          "identificationQualifier": {
            "type": "string",
            "description": "A brief phrase or a standard term (\"cf.\", \"aff.\") to express the determiner's doubts about the Identification.",
            "nullable": true
          },
          "typeStatus": {
            "type": "string",
            "description": "A list (concatenated and separated) of nomenclatural types (type status, typified scientific name, publication) applied to the subject.",
            "nullable": true
          },
          "identifiedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people, groups, or organizations who assigned the Taxon to the subject.",
            "nullable": true
          },
          "identifiedByID": {
            "type": "string",
            "description": "A list (concatenated and separated) of the globally unique identifier for the person, people, groups, or organizations responsible for assigning the Taxon to the subject.",
            "nullable": true
          },
          "dateIdentified": {
            "type": "string",
            "description": "The date on which the subject was determined as representing the Taxon.",
            "nullable": true
          },
          "identificationReferences": {
            "type": "string",
            "description": "A list (concatenated and separated) of references (publication, global unique identifier, URI) used in the Identification.",
            "nullable": true
          },
          "identificationVerificationStatus": {
            "type": "string",
            "description": "A categorical indicator of the extent to which the taxonomic identification has been verified to be correct.",
            "nullable": true
          },
          "identificationRemarks": {
            "type": "string",
            "description": "Comments or notes about the Identification.",
            "nullable": true
          },
          "locationID": {
            "type": "string",
            "description": "An identifier for the set of location information (data associated with dcterms:Location). May be a global unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "higherGeographyID": {
            "type": "string",
            "description": "An identifier for the geographic region within which the Location occurred.",
            "nullable": true
          },
          "higherGeography": {
            "type": "string",
            "description": "A list (concatenated and separated) of geographic names less specific than the information captured in the locality term.",
            "nullable": true
          },
          "continent": {
            "type": "string",
            "description": "The name of the continent in which the Location occurs.",
            "nullable": true
          },
          "waterBody": {
            "type": "string",
            "description": "The name of the water body in which the Location occurs.",
            "nullable": true
          },
          "islandGroup": {
            "type": "string",
            "description": "The name of the island on or near which the Location occurs.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The name of the country or major administrative unit in which the Location occurs.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The standard code for the country in which the Location occurs.",
            "nullable": true
          },
          "countryRegion": {
            "type": "string",
            "description": "Name of country region",
            "nullable": true
          },
          "stateProvince": {
            "type": "string",
            "description": "The name of the next smaller administrative region than country (state, province, canton, department, region, etc.) in which the Location occurs.",
            "nullable": true
          },
          "county": {
            "type": "string",
            "description": "The full, unabbreviated name of the next smaller administrative region than stateProvince (county, shire, department, etc.) in which the Location occurs.",
            "nullable": true
          },
          "municipality": {
            "type": "string",
            "description": "The full, unabbreviated name of the next smaller administrative region than county (city, municipality, etc.) in which the Location occurs. \nDo not use this term for a nearby named place that does not contain the actual location.",
            "nullable": true
          },
          "locality": {
            "type": "string",
            "description": "The specific description of the place.",
            "nullable": true
          },
          "verbatimLocality": {
            "type": "string",
            "description": "The original textual description of the place.",
            "nullable": true
          },
          "minimumElevationInMeters": {
            "type": "number",
            "description": "The lower limit of the range of elevation (altitude, usually above sea level), in meters.",
            "format": "double",
            "nullable": true
          },
          "maximumElevationInMeters": {
            "type": "number",
            "description": "The upper limit of the range of elevation (altitude, usually above sea level), in meters.",
            "format": "double",
            "nullable": true
          },
          "verbatimElevation": {
            "type": "string",
            "description": "The original description of the elevation (altitude, usually above sea level) of the Location.",
            "nullable": true
          },
          "verticalDatum": {
            "type": "string",
            "description": "The vertical datum used as the reference upon which the values in the elevation terms are based.",
            "nullable": true
          },
          "minimumDepthInMeters": {
            "type": "number",
            "description": "The lesser depth of a range of depth below the local surface, in meters.",
            "format": "double",
            "nullable": true
          },
          "maximumDepthInMeters": {
            "type": "number",
            "description": "The greater depth of a range of depth below the local surface, in meters.",
            "format": "double",
            "nullable": true
          },
          "verbatimDepth": {
            "type": "string",
            "description": "The original description of the depth below the local surface.",
            "nullable": true
          },
          "minimumDistanceAboveSurfaceInMeters": {
            "type": "number",
            "description": "The lesser distance in a range of distance from a reference surface in the vertical direction, in meters. \nUse positive values for locations above the surface, negative values for locations below. \nIf depth measures are given, the reference surface is the location given by the depth, otherwise the reference surface is the location given by the elevation.",
            "format": "double",
            "nullable": true
          },
          "maximumDistanceAboveSurfaceInMeters": {
            "type": "number",
            "description": "The greater distance in a range of distance from a reference surface in the vertical direction, in meters. \nUse positive values for locations above the surface, negative values for locations below. \nIf depth measures are given, the reference surface is the location given by the depth, otherwise the reference surface is the location given by the elevation.",
            "format": "double",
            "nullable": true
          },
          "locationAccordingTo": {
            "type": "string",
            "description": "Information about the source of this Location information. Could be a publication (gazetteer), institution, or team of individuals.",
            "nullable": true
          },
          "locationRemarks": {
            "type": "string",
            "description": "Comments or notes about the Location.",
            "nullable": true
          },
          "decimalLatitude": {
            "type": "number",
            "description": "The geographic latitude (in decimal degrees, using the spatial reference system given in geodeticDatum) of the geographic center of a Location. \nPositive values are north of the Equator, negative values are south of it. Legal values lie between -90 and 90, inclusive.",
            "format": "double",
            "nullable": true
          },
          "decimalLongitude": {
            "type": "number",
            "description": "The geographic longitude (in decimal degrees, using the spatial reference system given in geodeticDatum) of the geographic center of a Location. \nPositive values are east of the Greenwich Meridian, negative values are west of it. Legal values lie between -180 and 180, inclusive.",
            "format": "double",
            "nullable": true
          },
          "geodeticDatum": {
            "type": "string",
            "description": "The ellipsoid, geodetic datum, or spatial reference system (SRS) upon which the geographic coordinates given in decimalLatitude and decimalLongitude as based.",
            "nullable": true
          },
          "coordinateUncertaintyInMeters": {
            "type": "integer",
            "description": "The horizontal distance (in meters) from the given decimalLatitude and decimalLongitude describing the smallest circle containing the whole of the Location. \nLeave the value empty if the uncertainty is unknown, cannot be estimated, or is not applicable (because there are no coordinates). Zero is not a valid value for this term.",
            "format": "int32",
            "nullable": true
          },
          "coordinatePrecision": {
            "type": "number",
            "description": "A decimal representation of the precision of the coordinates given in the decimalLatitude and decimalLongitude.",
            "format": "double",
            "nullable": true
          },
          "pointRadiusSpatialFit": {
            "type": "string",
            "description": "The ratio of the area of the point-radius (decimalLatitude, decimalLongitude, coordinateUncertaintyInMeters) to the area of the true (original, \nor most specific) spatial representation of the Location. Legal values are 0, greater than or equal to 1, or undefined. A value of 1 is an exact match or 100% overlap. \nA value of 0 should be used if the given point-radius does not completely contain the original representation. \nThe pointRadiusSpatialFit is undefined (and should be left empty) if the original representation is a point without uncertainty and the given georeference is not that same point (without uncertainty). \nIf both the original and the given georeference are the same point, the pointRadiusSpatialFit is 1.",
            "nullable": true
          },
          "verbatimCoordinates": {
            "type": "string",
            "description": "The verbatim original spatial coordinates of the Location. The coordinate ellipsoid, geodeticDatum, or full Spatial Reference System (SRS) \nfor these coordinates should be stored in verbatimSRS and the coordinate system should be stored in verbatimCoordinateSystem.",
            "nullable": true
          },
          "verbatimLatitude": {
            "type": "string",
            "description": "The verbatim original latitude of the Location. The coordinate ellipsoid, geodeticDatum, or full Spatial Reference System (SRS) \nfor these coordinates should be stored in verbatimSRS and the coordinate system should be stored in verbatimCoordinateSystem.",
            "nullable": true
          },
          "verbatimLongitude": {
            "type": "string",
            "description": "The verbatim original longitude of the Location. The coordinate ellipsoid, geodeticDatum, or full Spatial Reference System (SRS) \nfor these coordinates should be stored in verbatimSRS and the coordinate system should be stored in verbatimCoordinateSystem.",
            "nullable": true
          },
          "verbatimCoordinateSystem": {
            "type": "string",
            "description": "The coordinate format for the verbatimLatitude and verbatimLongitude or the verbatimCoordinates of the Location.",
            "nullable": true
          },
          "verbatimSRS": {
            "type": "string",
            "description": "The ellipsoid, geodetic datum, or spatial reference system (SRS) upon which coordinates given in verbatimLatitude and verbatimLongitude, or verbatimCoordinates are based.",
            "nullable": true
          },
          "footprintWKT": {
            "type": "string",
            "description": "A Well-Known Text (WKT) representation of the shape (footprint, geometry) that defines the Location. \nA Location may have both a point-radius representation (see decimalLatitude) and a footprint representation, and they may differ from each other.",
            "nullable": true
          },
          "footprintSRS": {
            "type": "string",
            "description": "The ellipsoid, geodetic datum, or spatial reference system (SRS) upon which the geometry given in footprintWKT is based.",
            "nullable": true
          },
          "footprintSpatialFit": {
            "type": "string",
            "description": "he ratio of the area of the footprint (footprintWKT) to the area of the true (original, or most specific) spatial representation of the Location. \nLegal values are 0, greater than or equal to 1, or undefined. A value of 1 is an exact match or 100% overlap. A value of 0 should be used if the given footprint does not \ncompletely contain the original representation. The footprintSpatialFit is undefined (and should be left empty) if the original representation is a point without uncertainty \nand the given georeference is not that same point (without uncertainty). If both the original and the given georeference are the same point, the footprintSpatialFit is 1.",
            "nullable": true
          },
          "georeferencedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people, groups, or organizations who determined the georeference (spatial representation) for the Location.",
            "nullable": true
          },
          "georeferencedDate": {
            "type": "string",
            "description": "The date on which the Location was georeferenced.",
            "nullable": true
          },
          "georeferenceProtocol": {
            "type": "string",
            "description": "A description or reference to the methods used to determine the spatial footprint, coordinates, and uncertainties.",
            "nullable": true
          },
          "georeferenceSources": {
            "type": "string",
            "description": "A list (concatenated and separated) of maps, gazetteers, or other resources used to georeference the Location, described specifically enough to allow anyone in the future to use the same resources.",
            "nullable": true
          },
          "georeferenceRemarks": {
            "type": "string",
            "description": "Notes or comments about the spatial description determination, explaining assumptions made in addition or opposition to the those formalized in the method referred to in georeferenceProtocol.",
            "nullable": true
          },
          "materialSampleID": {
            "type": "string",
            "description": "An identifier for the MaterialSample (as opposed to a particular digital record of the material sample). In the absence of a persistent global unique identifier, \nconstruct one from a combination of identifiers in the record that will most closely make the materialSampleID globally unique.",
            "nullable": true
          },
          "occurrenceID": {
            "type": "string",
            "description": "An identifier for the Occurrence (as opposed to a particular digital record of the occurrence). In the absence of a persistent global unique identifier, \nconstruct one from a combination of identifiers in the record that will most closely make the occurrenceID globally unique.",
            "nullable": true
          },
          "catalogNumber": {
            "type": "string",
            "description": "An identifier (preferably unique) for the record within the data set or collection.",
            "nullable": true
          },
          "recordNumber": {
            "type": "string",
            "description": "An identifier given to the Occurrence at the time it was recorded. Often serves as a link between field notes and an Occurrence record, such as a specimen collector's number.",
            "nullable": true
          },
          "recordedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people, groups, or organizations responsible for recording the original Occurrence. \nThe primary collector or observer, especially one who applies a personal identifier (recordNumber), should be listed first.",
            "nullable": true
          },
          "recordedByID": {
            "type": "string",
            "description": "A list (concatenated and separated) of the globally unique identifier for the person, people, groups, or organizations responsible for recording the original Occurrence.",
            "nullable": true
          },
          "individualCount": {
            "type": "string",
            "description": "The number of individuals present at the time of the Occurrence.",
            "nullable": true
          },
          "organismQuantity": {
            "type": "string",
            "description": "A number or enumeration value for the quantity of organisms.",
            "nullable": true
          },
          "organismQuantityType": {
            "type": "string",
            "description": "The type of quantification system used for the quantity of organisms.",
            "nullable": true
          },
          "sex": {
            "type": "string",
            "description": "The sex of the biological individual(s) represented in the Occurrence.",
            "nullable": true
          },
          "lifeStage": {
            "type": "string",
            "description": "The age class or life stage of the Organism(s) at the time the Occurrence was recorded.",
            "nullable": true
          },
          "reproductiveCondition": {
            "type": "string",
            "description": "The reproductive condition of the biological individual(s) represented in the Occurrence.",
            "nullable": true
          },
          "behavior": {
            "type": "string",
            "description": "The behavior shown by the subject at the time the Occurrence was recorded.",
            "nullable": true
          },
          "establishmentMeans": {
            "type": "string",
            "description": "Statement about whether an organism or organisms have been introduced to a given place and time through the direct or indirect activity of modern humans.",
            "nullable": true
          },
          "degreeOfEstablishment": {
            "type": "string",
            "description": "The degree to which an Organism survives, reproduces, and expands its range at the given place and time.",
            "nullable": true
          },
          "pathway": {
            "type": "string",
            "description": "The process by which an Organism came to be in a given place at a given time.",
            "nullable": true
          },
          "georeferenceVerificationStatus": {
            "type": "string",
            "description": "A categorical description of the extent to which the georeference has been verified to represent the best possible spatial description for the Location of the Occurrence.",
            "nullable": true
          },
          "occurrenceStatus": {
            "type": "string",
            "description": "A statement about the presence or absence of a Taxon at a Location.",
            "nullable": true
          },
          "preparations": {
            "type": "string",
            "description": "A list (concatenated and separated) of preparations and preservation methods for a specimen.",
            "nullable": true
          },
          "disposition": {
            "type": "string",
            "description": "The current state of a specimen with respect to the collection identified in collectionCode or collectionID.",
            "nullable": true
          },
          "associatedMedia": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers (publication, global unique identifier, URI) of media associated with the Occurrence.",
            "nullable": true
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Multimedia"
            },
            "description": "Media associated with the observation",
            "nullable": true
          },
          "associatedOccurrences": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers of other Occurrence records and their associations to this Occurrence.",
            "nullable": true
          },
          "associatedReferences": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers (publication, bibliographic reference, global unique identifier, URI) of literature associated with the Occurrence.",
            "nullable": true
          },
          "associatedSequences": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers (publication, global unique identifier, URI) of genetic sequence information associated with the Occurrence.",
            "nullable": true
          },
          "associatedTaxa": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers or names of taxa and the associations of this Occurrence to each of them.",
            "nullable": true
          },
          "otherCatalogNumbers": {
            "type": "string",
            "description": "A list (concatenated and separated) of previous or alternate fully qualified catalog numbers or other human-used identifiers for the same Occurrence, \nwhether in the current or any other data set or collection.",
            "nullable": true
          },
          "occurrenceRemarks": {
            "type": "string",
            "description": "Comments or notes about the Occurrence.",
            "nullable": true
          },
          "organismID": {
            "type": "string",
            "description": "An identifier for the Organism instance (as opposed to a particular digital record of the Organism). May be a globally unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "organismName": {
            "type": "string",
            "description": "A textual name or label assigned to an Organism instance.",
            "nullable": true
          },
          "organismScope": {
            "type": "string",
            "description": "A description of the kind of Organism instance. Can be used to indicate whether the Organism instance represents a discrete organism or if it represents a particular type of aggregation.",
            "nullable": true
          },
          "associatedOrganisms": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers of other Organisms and the associations of this Organism to each of them.",
            "nullable": true
          },
          "previousIdentifications": {
            "type": "string",
            "description": "A list (concatenated and separated) of previous assignments of names to the Organism.",
            "nullable": true
          },
          "organismRemarks": {
            "type": "string",
            "description": "Comments or notes about the Organism instance.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The nature or genre of the resource.",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "description": "The most recent date-time on which the resource was changed.",
            "format": "date-time",
            "nullable": true
          },
          "language": {
            "type": "string",
            "description": "A language of the resource.",
            "nullable": true
          },
          "license": {
            "type": "string",
            "description": "A legal document giving official permission to do something with the resource.",
            "nullable": true
          },
          "rightsHolder": {
            "type": "string",
            "description": "A person or organization owning or managing rights over the resource.",
            "nullable": true
          },
          "accessRights": {
            "type": "string",
            "description": "Information about who can access the resource or an indication of its security status.",
            "nullable": true
          },
          "bibliographicCitation": {
            "type": "string",
            "description": "A bibliographic reference for the resource as a statement indicating how this record should be cited (attributed) when used.",
            "nullable": true
          },
          "references": {
            "type": "string",
            "description": "A related resource that is referenced, cited, or otherwise pointed to by the described resource.",
            "nullable": true
          },
          "institutionID": {
            "type": "string",
            "description": "An identifier for the institution having custody of the object(s) or information referred to in the record.",
            "nullable": true
          },
          "collectionID": {
            "type": "string",
            "description": "An identifier for the collection or dataset from which the record was derived.",
            "nullable": true
          },
          "datasetID": {
            "type": "string",
            "description": "An identifier for the set of data. May be a global unique identifier or an identifier specific to a collection or institution.",
            "nullable": true
          },
          "institutionCode": {
            "type": "string",
            "description": "The name (or acronym) in use by the institution having custody of the object(s) or information referred to in the record.",
            "nullable": true
          },
          "collectionCode": {
            "type": "string",
            "description": "The name, acronym, coden, or initialism identifying the collection or data set from which the record was derived.",
            "nullable": true
          },
          "datasetName": {
            "type": "string",
            "description": "The name identifying the data set from which the record was derived.",
            "nullable": true
          },
          "ownerInstitutionCode": {
            "type": "string",
            "description": "The name (or acronym) in use by the institution having ownership of the object(s) or information referred to in the record.",
            "nullable": true
          },
          "basisOfRecord": {
            "type": "string",
            "description": "The specific nature of the data record.",
            "nullable": true
          },
          "informationWithheld": {
            "type": "string",
            "description": "Additional information that exists, but that has not been shared in the given record.",
            "nullable": true
          },
          "dataGeneralizations": {
            "type": "string",
            "description": "Actions taken to make the shared data less specific or complete than in its original form. Suggests that alternative data of higher quality may be available on request.",
            "nullable": true
          },
          "dynamicProperties": {
            "type": "string",
            "description": "A list of additional measurements, facts, characteristics, or assertions about the record. Meant to provide a mechanism for structured content.",
            "nullable": true
          },
          "taxonID": {
            "type": "string",
            "description": "An identifier for the set of taxon information (data associated with the Taxon class). May be a global unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "scientificNameID": {
            "type": "string",
            "description": "An identifier for the nomenclatural (not taxonomic) details of a scientific name.",
            "nullable": true
          },
          "acceptedNameUsageID": {
            "type": "string",
            "description": "An identifier for the name usage (documented meaning of the name according to a source) of the currently valid (zoological) or accepted (botanical) taxon.",
            "nullable": true
          },
          "parentNameUsageID": {
            "type": "string",
            "description": "An identifier for the name usage (documented meaning of the name according to a source) of the direct, \nmost proximate higher-rank parent taxon (in a classification) of the most specific element of the scientificName.",
            "nullable": true
          },
          "originalNameUsageID": {
            "type": "string",
            "description": "An identifier for the name usage (documented meaning of the name according to a source) in which the terminal element of the scientificName \nwas originally established under the rules of the associated nomenclaturalCode.",
            "nullable": true
          },
          "nameAccordingToID": {
            "type": "string",
            "description": "An identifier for the source in which the specific taxon concept circumscription is defined or implied.",
            "nullable": true
          },
          "namePublishedInID": {
            "type": "string",
            "description": "An identifier for the publication in which the scientificName was originally established under the rules of the associated nomenclaturalCode.",
            "nullable": true
          },
          "taxonConceptID": {
            "type": "string",
            "description": "An identifier for the taxonomic concept to which the record refers - not for the nomenclatural details of a taxon.",
            "nullable": true
          },
          "scientificName": {
            "type": "string",
            "description": "The full scientific name, with authorship and date information if known. When forming part of an Identification, this should be the name in lowest level taxonomic rank that can be determined. \nThis term should not contain identification qualifications, which should instead be supplied in the IdentificationQualifier term.",
            "nullable": true
          },
          "acceptedNameUsage": {
            "type": "string",
            "description": "The full name, with authorship and date information if known, of the currently valid (zoological) or accepted (botanical) taxon.",
            "nullable": true
          },
          "parentNameUsage": {
            "type": "string",
            "description": "The full name, with authorship and date information if known, of the direct, most proximate higher-rank parent taxon (in a classification) of the most specific element of the scientificName.",
            "nullable": true
          },
          "originalNameUsage": {
            "type": "string",
            "description": "The taxon name, with authorship and date information if known, as it originally appeared when first established under the rules of the associated nomenclaturalCode. \nThe basionym (botany) or basonym (bacteriology) of the scientificName or the senior/earlier homonym for replaced names.",
            "nullable": true
          },
          "nameAccordingTo": {
            "type": "string",
            "description": "The reference to the source in which the specific taxon concept circumscription is defined or implied - traditionally signified by the Latin \"sensu\" or \"sec.\" (from secundum, meaning \"according to\"). \nFor taxa that result from identifications, a reference to the keys, monographs, experts and other sources should be given.",
            "nullable": true
          },
          "namePublishedIn": {
            "type": "string",
            "description": "A reference for the publication in which the scientificName was originally established under the rules of the associated nomenclaturalCode.",
            "nullable": true
          },
          "namePublishedInYear": {
            "type": "string",
            "description": "The four-digit year in which the scientificName was published.",
            "nullable": true
          },
          "higherClassification": {
            "type": "string",
            "description": "A list (concatenated and separated) of taxa names terminating at the rank immediately superior to the taxon referenced in the taxon record.",
            "nullable": true
          },
          "kingdom": {
            "type": "string",
            "description": "The full scientific name of the kingdom in which the taxon is classified.",
            "nullable": true
          },
          "phylum": {
            "type": "string",
            "description": "The full scientific name of the phylum or division in which the taxon is classified.",
            "nullable": true
          },
          "class": {
            "type": "string",
            "description": "The full scientific name of the class in which the taxon is classified.",
            "nullable": true
          },
          "order": {
            "type": "string",
            "description": "The full scientific name of the order in which the taxon is classified.",
            "nullable": true
          },
          "family": {
            "type": "string",
            "description": "The full scientific name of the family in which the taxon is classified.",
            "nullable": true
          },
          "subfamily": {
            "type": "string",
            "description": "The full scientific name of the subfamily in which the taxon is classified.",
            "nullable": true
          },
          "genus": {
            "type": "string",
            "description": "The full scientific name of the genus in which the taxon is classified.",
            "nullable": true
          },
          "genericName": {
            "type": "string",
            "description": "The genus part of the scientificName without authorship.",
            "nullable": true
          },
          "subgenus": {
            "type": "string",
            "description": "The full scientific name of the subgenus in which the taxon is classified. Values should include the genus to avoid homonym confusion.",
            "nullable": true
          },
          "infragenericEpithet": {
            "type": "string",
            "description": "The infrageneric part of a binomial name at ranks above species but below genus.",
            "nullable": true
          },
          "specificEpithet": {
            "type": "string",
            "description": "The name of the first or species epithet of the scientificName.",
            "nullable": true
          },
          "infraspecificEpithet": {
            "type": "string",
            "description": "The name of the lowest or terminal infraspecific epithet of the scientificName, excluding any rank designation.",
            "nullable": true
          },
          "cultivarEpithet": {
            "type": "string",
            "description": "Part of the name of a cultivar, cultivar group or grex that follows the scientific name.",
            "nullable": true
          },
          "taxonRank": {
            "type": "string",
            "description": "The taxonomic rank of the most specific name in the scientificName.",
            "nullable": true
          },
          "verbatimTaxonRank": {
            "type": "string",
            "description": "The taxonomic rank of the most specific name in the scientificName as it appears in the original record.",
            "nullable": true
          },
          "scientificNameAuthorship": {
            "type": "string",
            "description": "The authorship information for the scientificName formatted according to the conventions of the applicable nomenclaturalCode.",
            "nullable": true
          },
          "vernacularName": {
            "type": "string",
            "description": "A common or vernacular name.",
            "nullable": true
          },
          "nomenclaturalCode": {
            "type": "string",
            "description": "The nomenclatural code (or codes in the case of an ambiregnal name) under which the scientificName is constructed.",
            "nullable": true
          },
          "taxonomicStatus": {
            "type": "string",
            "description": "The status of the use of the scientificName as a label for a taxon. Requires taxonomic opinion to define the scope of a taxon. \nRules of priority then are used to define the taxonomic status of the nomenclature contained in that scope, combined with the experts opinion. \nIt must be linked to a specific taxonomic reference that defines the concept.",
            "nullable": true
          },
          "nomenclaturalStatus": {
            "type": "string",
            "description": "The status related to the original publication of the name and its conformance to the relevant rules of nomenclature. \nIt is based essentially on an algorithm according to the business rules of the code. It requires no taxonomic opinion.",
            "nullable": true
          },
          "taxonRemarks": {
            "type": "string",
            "description": "Comments or notes about the taxon or name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The category of information pertaining to the existence of an Organism (sensu http://rs.tdwg.org/dwc/terms/Organism) at a particular place at a particular time."
      },
      "DataProviderCategory": {
        "enum": [
          "DataHostesship",
          "NationalInventory",
          "RegionalInventory",
          "MuseumCollections",
          "HerbariaCollections",
          "CitizenSciencePlatform",
          "Atlas",
          "Terrestrial",
          "Freshwater",
          "Marine",
          "Vertebrates",
          "Invertebrates",
          "Arthropods",
          "Microorganisms",
          "Plants_Bryophytes_Lichens",
          "Fungi",
          "Algae",
          "DataStewardship"
        ],
        "type": "string"
      },
      "DataProviderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id.",
            "format": "int32"
          },
          "identifier": {
            "type": "string",
            "description": "A unique text identifer for the data provider.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the data provider.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the data provider.",
            "nullable": true
          },
          "organization": {
            "type": "string",
            "description": "The organization name.",
            "nullable": true
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Paths that can be used to group and visualize a data provider as a tree in a GUI.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "URL to the data provider source.",
            "nullable": true
          },
          "publicObservations": {
            "type": "integer",
            "description": "Number of public observations.",
            "format": "int32"
          },
          "protectedObservations": {
            "type": "integer",
            "description": "Number of protected observations.",
            "format": "int32"
          },
          "latestHarvestDate": {
            "type": "string",
            "description": "Latest harvest date.",
            "format": "date-time",
            "nullable": true
          },
          "latestProcessDate": {
            "type": "string",
            "description": "Latest process date.",
            "format": "date-time",
            "nullable": true
          },
          "latestIncrementalHarvestDate": {
            "type": "string",
            "description": "Latest incremental harvest and process date. Used for data providers supporting incremental harvest.",
            "format": "date-time",
            "nullable": true
          },
          "nextHarvestFrom": {
            "type": "string",
            "description": "Date time from where next harvest can be run.",
            "format": "date-time",
            "nullable": true
          },
          "harvestNotes": {
            "type": "string",
            "description": "Note about harvest",
            "nullable": true
          },
          "harvestSchedule": {
            "type": "string",
            "description": "Cron expression used to schedule harvest.",
            "nullable": true
          },
          "includeInSearchByDefault": {
            "type": "boolean",
            "description": "Decides whether the data provider should be included in search when no data provider filter is set."
          }
        },
        "additionalProperties": false,
        "description": "Information about a data provider."
      },
      "DataProviderFilterDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Data provider id's",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data provider filter."
      },
      "DataQuality": {
        "type": "object",
        "properties": {
          "uniqueKey": {
            "type": "string",
            "description": "Hashed key created from observation date + taxon id + position",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class related to data quality"
      },
      "DataStewardshipFilterDto": {
        "type": "object",
        "properties": {
          "datasetIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Dataset filter",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataStewardshipInfo": {
        "type": "object",
        "properties": {
          "datasetIdentifier": {
            "type": "string",
            "description": "Dataset Identifier",
            "nullable": true
          },
          "datasetTitle": {
            "type": "string",
            "description": "Dataset Title",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateFilterComparisonDto": {
        "enum": [
          "StartDate",
          "EndDate",
          "BothStartDateAndEndDate",
          "StartDateEndDateMonthRange"
        ],
        "type": "string"
      },
      "DateFilterDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Observation start date specified in the ISO 8601 standard. If no timezone is specified, GMT+1 (CEST) is assumed",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Observation end date specified in the ISO 8601 standard. If no timezone is specified, GMT+1 (CEST) is assumed",
            "format": "date-time",
            "nullable": true
          },
          "dateFilterType": {
            "$ref": "#/components/schemas/DateFilterTypeDto"
          },
          "timeRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRangeDto"
            },
            "description": "Predefined time ranges",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Date filter."
      },
      "DateFilterTypeDto": {
        "enum": [
          "OverlappingStartDateAndEndDate",
          "BetweenStartDateAndEndDate",
          "OnlyStartDate",
          "OnlyEndDate"
        ],
        "type": "string",
        "description": "OverlappingStartDateAndEndDate, Start or EndDate of the observation must be within the specified interval    \nBetweenStartDateAndEndDate, Start and EndDate of the observation must be within the specified interval    \nOnlyStartDate, Only StartDate of the observation must be within the specified interval            \nOnlyEndDate, Only EndDate of the observation must be within the specified interval"
      },
      "DiffusionStatus": {
        "enum": [
          "NotDiffused",
          "DiffusedBySystem",
          "DiffusedByProvider"
        ],
        "type": "string",
        "description": "Observation diffuse status."
      },
      "DiffusionStatusDto": {
        "enum": [
          "NotDiffused",
          "DiffusedBySystem",
          "DiffusedByProvider"
        ],
        "type": "string",
        "description": "Diffuse status dto"
      },
      "Dimension": {
        "enum": [
          "Point",
          "Curve",
          "Surface",
          "Collapse",
          "Dontcare",
          "True",
          "False"
        ],
        "type": "string"
      },
      "ElevationModel": {
        "type": "object",
        "properties": {
          "extent": {
            "$ref": "#/components/schemas/Envelope"
          }
        },
        "additionalProperties": false
      },
      "Envelope": {
        "type": "object",
        "properties": {
          "isNull": {
            "type": "boolean",
            "readOnly": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "diameter": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "minX": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "maxX": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "minY": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "maxY": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "minExtent": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "maxExtent": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "centre": {
            "$ref": "#/components/schemas/Coordinate"
          }
        },
        "additionalProperties": false
      },
      "EnvironmentInformationDto": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "Type of environment (Local, Dev, ST, AT, Prod)",
            "nullable": true
          },
          "hostingServerName": {
            "type": "string",
            "description": "Name of the server hosting the application/service",
            "nullable": true
          },
          "osPlatform": {
            "type": "string",
            "description": "Server operating system.",
            "nullable": true
          },
          "aspDotnetVersion": {
            "type": "string",
            "description": ".Net version.",
            "nullable": true
          },
          "currentCulture": {
            "type": "string",
            "description": "Current Culture.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Environment information"
      },
      "Event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "An identifier for the set of information associated with an Event (something that occurs at a place and time).",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date/time of the event in W. Europe Standard Time.",
            "format": "date-time",
            "nullable": true
          },
          "startDayOfYear": {
            "type": "integer",
            "description": "Start day of year",
            "format": "int32",
            "readOnly": true
          },
          "startHistogramWeek": {
            "type": "integer",
            "description": "Divide year in 48 \"weeks\"",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "startYear": {
            "type": "integer",
            "description": "Start year of the event, Swedish localization",
            "format": "int32",
            "nullable": true
          },
          "startMonth": {
            "type": "integer",
            "description": "Start month of the event, Swedish localization",
            "format": "int32",
            "nullable": true
          },
          "startDay": {
            "type": "integer",
            "description": "Start day of the event, Swedish localization",
            "format": "int32",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "End date/time of the event in W. Europe Standard Time.",
            "format": "date-time",
            "nullable": true
          },
          "endDayOfYear": {
            "type": "integer",
            "description": "Start day of year",
            "format": "int32",
            "readOnly": true
          },
          "endHistogramWeek": {
            "type": "integer",
            "description": "Divide year in 48 weeks",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "endYear": {
            "type": "integer",
            "description": "End year of the event, Swedish localization",
            "format": "int32",
            "nullable": true
          },
          "endMonth": {
            "type": "integer",
            "description": "End month of the event, Swedish localization",
            "format": "int32",
            "nullable": true
          },
          "endDay": {
            "type": "integer",
            "description": "End day of the event, Swedish localization",
            "format": "int32",
            "nullable": true
          },
          "plainStartDate": {
            "type": "string",
            "description": "Start date of the event in the format yyyy-MM-dd.",
            "nullable": true
          },
          "plainEndDate": {
            "type": "string",
            "description": "End date of the event in the format yyyy-MM-dd.",
            "nullable": true
          },
          "plainStartTime": {
            "type": "string",
            "description": "Start time of the event in W. Europe Standard Time formatted as hh:mm.",
            "nullable": true
          },
          "plainEndTime": {
            "type": "string",
            "description": "End time of the event in W. Europe Standard Time formatted as hh:mm.",
            "nullable": true
          },
          "discoveryMethod": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "eventRemarks": {
            "type": "string",
            "description": "Comments or notes about the Event.",
            "nullable": true
          },
          "fieldNotes": {
            "type": "string",
            "description": "One of a) an indicator of the existence of, b) a\nreference to (publication, URI), or c) the text of\nnotes taken in the field about the Event.",
            "nullable": true
          },
          "fieldNumber": {
            "type": "string",
            "description": "An identifier given to the event in the field. Often\nserves as a link between field notes and the Event.",
            "nullable": true
          },
          "habitat": {
            "type": "string",
            "description": "A category or description of the habitat in which the Event occurred.",
            "nullable": true
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Multimedia"
            },
            "description": "Multimedia associated with the event.",
            "nullable": true
          },
          "measurementOrFacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedMeasurementOrFact"
            },
            "description": "Measurement or facts associated with the event.",
            "nullable": true
          },
          "parentEventId": {
            "type": "string",
            "description": "An identifier for the broader Event that groups this and potentially other Events.",
            "nullable": true,
            "example": "\n                A1 (parentEventID to identify the main Whittaker Plot in nested samples, each with its own eventID - A1:1, A1:2).\n            "
          },
          "samplingEffort": {
            "type": "string",
            "description": "The amount of effort expended during an Event.",
            "nullable": true
          },
          "samplingProtocol": {
            "type": "string",
            "description": "The name of, reference to, or description of the\nmethod or protocol used during an Event.",
            "nullable": true
          },
          "sampleSizeUnit": {
            "type": "string",
            "description": "The unit of measurement of the size (time duration, length, area, or volume) of a sample in a sampling event.\nA sampleSizeUnit must have a corresponding sampleSizeValue, e.g., 5 for sampleSizeValue with metre for\nsampleSizeUnit.",
            "nullable": true,
            "example": "\n                minute, hour, day, metre, square metre, cubic metre.\n            "
          },
          "sampleSizeValue": {
            "type": "string",
            "description": "A numeric value for a measurement of the size (time duration, length, area, or volume) of a sample in a sampling\nevent.",
            "nullable": true,
            "example": "\n                5 for sampleSizeValue with metre for sampleSizeUnit.\n            "
          },
          "verbatimEventDate": {
            "type": "string",
            "description": "The verbatim original representation of the date and time information for an Event.\nExamples: spring 1910, Marzo 2002, 1999-03-XX, 17IV1934.",
            "nullable": true
          },
          "weather": {
            "$ref": "#/components/schemas/Weather"
          }
        },
        "additionalProperties": false,
        "description": "Event information about a species observation."
      },
      "EventFilterDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Event id's",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExcludeFilterDto": {
        "type": "object",
        "properties": {
          "occurrenceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Exclude observations with listed occurrence id's",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExportFormat": {
        "enum": [
          "Csv",
          "DwC",
          "DwCEvent",
          "GeoJson",
          "Excel",
          "AooEoo",
          "AooEooArticle17"
        ],
        "type": "string",
        "description": "Supported export formats"
      },
      "ExportJobInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processingTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true,
            "readOnly": true
          },
          "numberOfObservations": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/ExportFormat"
          },
          "status": {
            "$ref": "#/components/schemas/ExportJobStatus"
          },
          "outputFieldSet": {
            "$ref": "#/components/schemas/OutputFieldSet"
          },
          "pickUpUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Keep control of user exports"
      },
      "ExportJobStatus": {
        "enum": [
          "Unknown",
          "Queued",
          "Processing",
          "Succeeded",
          "Failed"
        ],
        "type": "string"
      },
      "ExtendedFilterDto": {
        "type": "object",
        "properties": {
          "checklistId": {
            "type": "integer",
            "description": "Checklist Id",
            "format": "int32",
            "nullable": true
          },
          "fieldDiaryGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Field diary group Id's",
            "nullable": true
          },
          "reportedByUserId": {
            "type": "integer",
            "description": "Reported by Artportalen user id.",
            "format": "int32",
            "nullable": true
          },
          "observedByUserId": {
            "type": "integer",
            "description": "Observed by Artportalen user id.",
            "format": "int32",
            "nullable": true
          },
          "reportedByUserServiceUserId": {
            "type": "integer",
            "description": "Reported by user service user id.",
            "format": "int32",
            "nullable": true
          },
          "observedByUserServiceUserId": {
            "type": "integer",
            "description": "Observed by user service user id.",
            "format": "int32",
            "nullable": true
          },
          "sexIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Id of sex to match",
            "nullable": true
          },
          "invasiveSpeciesTreatmentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of InvasiveSpeciesTreatment to match. \nIf null or empty, no filtering is done.\nQueryable values are available in InvasiveSpeciesTreatment vocabulary.",
            "nullable": true
          },
          "onlyWithMedia": {
            "type": "boolean",
            "description": "Only include hits with media associated"
          },
          "onlyWithNotes": {
            "type": "boolean",
            "description": "Only include hits with notes attached to them"
          },
          "onlyWithNotesOfInterest": {
            "type": "boolean"
          },
          "onlyWithUserComments": {
            "type": "boolean",
            "description": "Only include hits that have user comments on them"
          },
          "onlyWithBarcode": {
            "type": "boolean"
          },
          "reportedDateFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reportedDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SightingTypeFilterDto"
          },
          "usePeriodForAllYears": {
            "type": "boolean"
          },
          "months": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "monthsComparison": {
            "$ref": "#/components/schemas/DateFilterComparisonDto"
          },
          "discoveryMethodIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "lifeStageIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "activityIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "hasTriggeredVerificationRule": {
            "type": "boolean"
          },
          "hasTriggeredVerificationRuleWithWarning": {
            "type": "boolean"
          },
          "length": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lengthOperator": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "weightOperator": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantityOperator": {
            "type": "string",
            "nullable": true
          },
          "verificationStatusIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "excludeVerificationStatusIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "unspontaneousFilter": {
            "$ref": "#/components/schemas/SightingUnspontaneousFilterDto"
          },
          "speciesCollectionLabel": {
            "type": "string",
            "nullable": true
          },
          "publicCollection": {
            "type": "string",
            "nullable": true
          },
          "privateCollection": {
            "type": "string",
            "nullable": true
          },
          "substrateSpeciesId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "substrateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "biotopeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "notPresentFilter": {
            "$ref": "#/components/schemas/SightingNotPresentFilterDto"
          },
          "onlySecondHandInformation": {
            "type": "boolean"
          },
          "publishTypeIdsFilter": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "regionalSightingStateIdsFilter": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "triggeredObservationRuleFrequencyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "triggeredObservationRuleReproductionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "siteIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "siteProjectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "speciesFactsIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "institutionId": {
            "type": "string",
            "nullable": true
          },
          "datasourceIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "years": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "yearsComparison": {
            "$ref": "#/components/schemas/DateFilterComparisonDto"
          },
          "sightingTypeSearchGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedMeasurementOrFact": {
        "type": "object",
        "properties": {
          "measurementID": {
            "type": "string",
            "description": "An identifier for the MeasurementOrFact (information pertaining\nto measurements, facts, characteristics, or assertions).\nMay be a global unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "occurrenceID": {
            "type": "string",
            "description": "The identifier of the occurrence the measurement or fact refers to.\nIf not applicable, it should be left empty.",
            "nullable": true
          },
          "measurementType": {
            "type": "string",
            "description": "The nature of the measurement, fact, characteristic, or assertion.\nRecommended best practice is to use a controlled vocabulary.",
            "nullable": true
          },
          "measurementTypeID": {
            "type": "string",
            "description": "An identifier for the measurementType (global unique identifier, URI).\nThe identifier should reference the measurementType in a vocabulary.",
            "nullable": true
          },
          "measurementValue": {
            "type": "string",
            "description": "The value of the measurement, fact, characteristic, or assertion.",
            "nullable": true
          },
          "measurementValueID": {
            "type": "string",
            "description": "An identifier for facts stored in the column measurementValue (global unique identifier, URI).\nThis identifier can reference a controlled vocabulary (e.g. for sampling instrument names,\nmethodologies, life stages) or reference a methodology paper with a DOI. When the measurementValue\nrefers to a value and not to a fact, the measurementvalueID has no meaning and should remain empty.",
            "nullable": true
          },
          "measurementAccuracy": {
            "type": "string",
            "description": "The description of the potential error associated with the measurementValue.",
            "nullable": true
          },
          "measurementUnit": {
            "type": "string",
            "description": "The units associated with the measurementValue.\nRecommended best practice is to use the International System of Units (SI).",
            "nullable": true
          },
          "measurementUnitID": {
            "type": "string",
            "description": "An identifier for the measurementUnit (global unique identifier, URI).\nThe identifier should reference the measurementUnit in a vocabulary.",
            "nullable": true
          },
          "measurementDeterminedDate": {
            "type": "string",
            "description": "The date on which the MeasurementOrFact was made. Recommended best\npractice is to use an encoding scheme, such as ISO 8601:2004(E).",
            "nullable": true
          },
          "measurementDeterminedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people, groups, or organizations\nwho determined the value of the MeasurementOrFact.",
            "nullable": true
          },
          "measurementMethod": {
            "type": "string",
            "description": "A description of or reference to (publication, URI) the method or protocol used\nto determine the measurement, fact, characteristic, or assertion.",
            "nullable": true
          },
          "measurementRemarks": {
            "type": "string",
            "description": "Comments or notes accompanying the MeasurementOrFact.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Measurement or facts for an observation or event."
      },
      "ExternalSystemIdDto": {
        "enum": [
          "Artportalen",
          "DarwinCore",
          "SwedishSpeciesObservationService"
        ],
        "type": "string"
      },
      "ExternalSystemMappingDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ExternalSystemIdDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalSystemMappingFieldDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSystemMappingFieldDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key in the external system.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalSystemMappingValueDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSystemMappingValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "description": "Value in data provider.",
            "nullable": true
          },
          "sosId": {
            "type": "integer",
            "description": "Id in SOS (Species Observation System).",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "File": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name Of file",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Date time when file was created",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int64"
          },
          "downloadUrl": {
            "type": "string",
            "description": "Download URL.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "File object"
      },
      "GeneralizationFilterDto": {
        "type": "object",
        "properties": {
          "sensitiveGeneralizationFilter": {
            "$ref": "#/components/schemas/SensitiveGeneralizationFilterDto"
          },
          "publicGeneralizationFilter": {
            "$ref": "#/components/schemas/PublicGeneralizationFilterDto"
          }
        },
        "additionalProperties": false,
        "description": "Generalization filter."
      },
      "GeoGridCellDto": {
        "type": "object",
        "properties": {
          "observationsCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "taxaCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "x": {
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "zoom": {
            "type": "integer",
            "format": "int32"
          },
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBoxDto"
          }
        },
        "additionalProperties": false
      },
      "GeoGridMetricResultDto": {
        "type": "object",
        "properties": {
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBoxDto"
          },
          "gridCells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridCellDto"
            },
            "nullable": true
          },
          "gridCellCount": {
            "type": "integer",
            "format": "int32"
          },
          "gridCellSizeInMeters": {
            "type": "integer",
            "format": "int32"
          },
          "sweref99TmBoundingBox": {
            "$ref": "#/components/schemas/XYBoundingBoxDto"
          }
        },
        "additionalProperties": false
      },
      "GeoGridResultDto": {
        "type": "object",
        "properties": {
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBoxDto"
          },
          "zoom": {
            "type": "integer",
            "format": "int32"
          },
          "gridCellCount": {
            "type": "integer",
            "format": "int32"
          },
          "gridCells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoGridCellDto"
            },
            "nullable": true
          },
          "totalGridCellCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GeoGridTileTaxaCellDto": {
        "type": "object",
        "properties": {
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBoxDto"
          },
          "geoTile": {
            "type": "string",
            "nullable": true
          },
          "zoom": {
            "type": "integer",
            "format": "int32"
          },
          "x": {
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "taxa": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoGridTileTaxonObservationCountDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeoGridTileTaxonObservationCountDto": {
        "type": "object",
        "properties": {
          "taxonId": {
            "type": "integer",
            "format": "int32"
          },
          "observationCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GeoGridTileTaxonPageResultDto": {
        "type": "object",
        "properties": {
          "hasMorePages": {
            "type": "boolean"
          },
          "nextGeoTilePage": {
            "type": "string",
            "description": "The GeoTile page key.",
            "nullable": true
          },
          "nextTaxonIdPage": {
            "type": "integer",
            "description": "The TaxonId page key.",
            "format": "int32",
            "nullable": true
          },
          "gridCells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoGridTileTaxaCellDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeographicsFilterDto": {
        "type": "object",
        "properties": {
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaFilterDto"
            },
            "description": "Area filter",
            "nullable": true
          },
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBoxDto"
          },
          "considerDisturbanceRadius": {
            "type": "boolean",
            "description": "If true, observations that are outside Geometries polygons\nbut close enough when disturbance sensitivity of species\nare considered, will be included in the result."
          },
          "considerObservationAccuracy": {
            "type": "boolean",
            "description": "If true, observations that are outside Geometries polygons\nbut possibly inside when accuracy (coordinateUncertaintyInMeters)\nof observation is considered, will be included in the result."
          },
          "considerAuthorizationBuffer": {
            "type": "boolean",
            "description": "If true, use the buffer (if any) that can be applied to extend the area where the user has permission to search for sensitive observations",
            "nullable": true
          },
          "maxDistanceFromPoint": {
            "type": "number",
            "description": "If Geometries is of point type, this property must be set to a value greater than 0.\nObservations inside circle (center=point, radius=MaxDistanceFromPoint) will be returned.",
            "format": "double",
            "nullable": true
          },
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Geometry"
            },
            "description": "Point or polygon geometry used for search.\nIf the geometry is a point, then MaxDistanceFromPoint is also used in search.",
            "nullable": true
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter on location id/s. Only observations with passed location id/s this will be returned",
            "nullable": true
          },
          "locationNameFilter": {
            "type": "string",
            "description": "Location name wild card filter",
            "nullable": true
          },
          "maxAccuracy": {
            "type": "integer",
            "description": "Limit observation accuracy. Only observations with accuracy less than this will be returned",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Geometry filter."
      },
      "GeologicalContext": {
        "type": "object",
        "properties": {
          "bed": {
            "type": "string",
            "description": "The full name of the lithostratigraphic bed from which\nthe cataloged item was collected.",
            "nullable": true
          },
          "earliestAgeOrLowestStage": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic\nage or lowest chronostratigraphic stage attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "earliestEonOrLowestEonothem": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic eon\nor lowest chrono-stratigraphic eonothem or the informal\nname (\"Precambrian\") attributable to the stratigraphic\nhorizon from which the cataloged item was collected.",
            "nullable": true
          },
          "earliestEpochOrLowestSeries": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic\nepoch or lowest chronostratigraphic series attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "earliestEraOrLowestErathem": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic\nera or lowest chronostratigraphic erathem attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "earliestGeochronologicalEra": {
            "type": "string",
            "description": "Use to link a dwc:GeologicalContext instance to chronostratigraphic time\nperiods at the lowest possible level in a standardized hierarchy. Use this\nproperty to point to the earliest possible geological time period from which\nthe cataloged item was collected.",
            "nullable": true
          },
          "earliestPeriodOrLowestSystem": {
            "type": "string",
            "description": "The full name of the earliest possible geochronologic\nperiod or lowest chronostratigraphic system attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "formation": {
            "type": "string",
            "description": "The full name of the lithostratigraphic formation from\nwhich the cataloged item was collected.",
            "nullable": true
          },
          "geologicalContextId": {
            "type": "string",
            "description": "An identifier for the set of information associated\nwith a GeologicalContext (the location within a geological\ncontext, such as stratigraphy). May be a global unique\nidentifier or an identifier specific to the data set.",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "The full name of the lithostratigraphic group from\nwhich the cataloged item was collected.",
            "nullable": true
          },
          "highestBiostratigraphicZone": {
            "type": "string",
            "description": "The full name of the highest possible geological\nbiostratigraphic zone of the stratigraphic horizon\nfrom which the cataloged item was collected.",
            "nullable": true
          },
          "latestAgeOrHighestStage": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic\nage or highest chronostratigraphic stage attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "latestEonOrHighestEonothem": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic eon\nor highest chrono-stratigraphic eonothem or the informal\nname (\"Precambrian\") attributable to the stratigraphic\nhorizon from which the cataloged item was collected.",
            "nullable": true
          },
          "latestEpochOrHighestSeries": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic\nepoch or highest chronostratigraphic series attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "latestEraOrHighestErathem": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic\nera or highest chronostratigraphic erathem attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "latestGeochronologicalEra": {
            "type": "string",
            "description": "Use to link a dwc:GeologicalContext instance to chronostratigraphic time periods at the lowest possible\nlevel in a standardized hierarchy. Use this property to point to the latest possible geological time period\nfrom which the cataloged item was collected.",
            "nullable": true
          },
          "latestPeriodOrHighestSystem": {
            "type": "string",
            "description": "The full name of the latest possible geochronologic\nperiod or highest chronostratigraphic system attributable\nto the stratigraphic horizon from which the cataloged\nitem was collected.",
            "nullable": true
          },
          "lithostratigraphicTerms": {
            "type": "string",
            "description": "The combination of all litho-stratigraphic names for\nthe rock from which the cataloged item was collected.",
            "nullable": true
          },
          "lowestBiostratigraphicZone": {
            "type": "string",
            "description": "The full name of the lowest possible geological\nbiostratigraphic zone of the stratigraphic horizon\nfrom which the cataloged item was collected.",
            "nullable": true
          },
          "member": {
            "type": "string",
            "description": "The full name of the lithostratigraphic member from\nwhich the cataloged item was collected.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Geological information, such as stratigraphy, that qualifies a region or place."
      },
      "Geometry": {
        "oneOf": [
          {
            "required": [
              "type",
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "Point"
                ],
                "type": "string"
              },
              "coordinates": {
                "minItems": 2,
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          },
          {
            "required": [
              "type",
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "LineString"
                ],
                "type": "string"
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "minItems": 2,
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "Polygon"
                ],
                "type": "string"
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "MultiPoint"
                ],
                "type": "string"
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "MultiLineString"
                ],
                "type": "string"
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "coordinates"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "MultiPolygon"
                ],
                "type": "string"
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "required": [
              "type",
              "geometries"
            ],
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "GeometryCollection"
                ],
                "type": "string"
              },
              "geometries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Geometry"
                }
              }
            }
          }
        ],
        "additionalProperties": false
      },
      "GeometryFactory": {
        "type": "object",
        "properties": {
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "coordinateSequenceFactory": {
            "$ref": "#/components/schemas/CoordinateSequenceFactory"
          },
          "srid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "elevationModel": {
            "$ref": "#/components/schemas/ElevationModel"
          },
          "geometryServices": {
            "$ref": "#/components/schemas/NtsGeometryServices"
          }
        },
        "additionalProperties": false
      },
      "GeometryOverlay": {
        "type": "object",
        "additionalProperties": false
      },
      "GeometryRelate": {
        "type": "object",
        "additionalProperties": false
      },
      "GridCellDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Grid cell Id.",
            "nullable": true
          },
          "boundingBox": {
            "$ref": "#/components/schemas/LatLonBoundingBoxDto"
          },
          "observationsCount": {
            "type": "integer",
            "description": "Number of observations in cell",
            "format": "int64",
            "nullable": true
          },
          "metricBoundingBox": {
            "$ref": "#/components/schemas/XYBoundingBoxDto"
          },
          "taxaCount": {
            "type": "integer",
            "description": "Count of different taxa",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "Identification": {
        "type": "object",
        "properties": {
          "confirmedBy": {
            "type": "string",
            "description": "Confirmed by.",
            "nullable": true
          },
          "confirmedDate": {
            "type": "string",
            "description": "Date of confirmation.",
            "nullable": true
          },
          "dateIdentified": {
            "type": "string",
            "description": "The date on which the subject was identified as\nrepresenting the Taxon. Recommended best practice is\nto use an encoding scheme, such as ISO 8601:2004(E).",
            "nullable": true
          },
          "identificationId": {
            "type": "string",
            "description": "An identifier for the Identification (the body of\ninformation associated with the assignment of a scientific\nname). May be a global unique identifier or an identifier\nspecific to the data set.",
            "nullable": true
          },
          "identificationQualifier": {
            "type": "string",
            "description": "A brief phrase or a standard term (\"cf.\", \"aff.\") to\nexpress the determiner's doubts about the Identification.",
            "nullable": true
          },
          "identificationReferences": {
            "type": "string",
            "description": "A list (concatenated and separated) of references\n(publication, global unique identifier, URI) used in\nthe Identification.",
            "nullable": true
          },
          "identificationRemarks": {
            "type": "string",
            "description": "Comments or notes about the Identification.\nContains for example information about that\nthe observer is uncertain about which species\nthat has been observed.",
            "nullable": true
          },
          "validated": {
            "type": "boolean",
            "description": "    True if sighting is validated.\nThis property is deprecated and replaced by the Verified property.",
            "readOnly": true,
            "deprecated": true
          },
          "verified": {
            "type": "boolean",
            "description": "True if sighting is verified (validated)."
          },
          "validationStatus": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "identifiedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people,\ngroups, or organizations who assigned the Taxon to the\nsubject.",
            "nullable": true
          },
          "typeStatus": {
            "type": "string",
            "description": "A list (concatenated and separated) of nomenclatural\ntypes (type status, typified scientific name, publication)\napplied to the subject.",
            "nullable": true
          },
          "uncertainIdentification": {
            "type": "boolean",
            "description": "True if determination is uncertain."
          },
          "determinationMethod": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "verifiedBy": {
            "type": "string",
            "description": "A list(concatenated and separated) of names of people,\nwho verified the observation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Identification information about an species observation."
      },
      "Int32IdValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of item",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "The value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Id value dto"
      },
      "LatLonBoundingBox": {
        "type": "object",
        "properties": {
          "bottomRight": {
            "$ref": "#/components/schemas/LatLonCoordinate"
          },
          "topLeft": {
            "$ref": "#/components/schemas/LatLonCoordinate"
          }
        },
        "additionalProperties": false
      },
      "LatLonBoundingBoxDto": {
        "type": "object",
        "properties": {
          "bottomRight": {
            "$ref": "#/components/schemas/LatLonCoordinateDto"
          },
          "topLeft": {
            "$ref": "#/components/schemas/LatLonCoordinateDto"
          }
        },
        "additionalProperties": false
      },
      "LatLonCoordinate": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LatLonCoordinateDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LatLonGeoLocation": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Location": {
        "type": "object",
        "properties": {
          "atlas5x5": {
            "$ref": "#/components/schemas/Area"
          },
          "atlas10x10": {
            "$ref": "#/components/schemas/Area"
          },
          "attributes": {
            "$ref": "#/components/schemas/LocationAttributes"
          },
          "continent": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "coordinatePrecision": {
            "type": "number",
            "description": "A decimal representation of the precision of the coordinates\ngiven in the DecimalLatitude and DecimalLongitude.",
            "format": "double",
            "nullable": true
          },
          "coordinateUncertaintyInMeters": {
            "type": "integer",
            "description": "The horizontal distance (in meters) from the given\nCoordinateX and CoordinateY describing the\nsmallest circle containing the whole of the Location.\nLeave the value empty if the uncertainty is unknown, cannot\nbe estimated, or is not applicable (because there are\nno coordinates). Zero is not a valid value for this term.",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "countryCode": {
            "type": "string",
            "description": "The standard code for the country in which the\nLocation occurs.\nRecommended best practice is to use ISO 3166-1-alpha-2\ncountry codes.",
            "nullable": true
          },
          "countryRegion": {
            "$ref": "#/components/schemas/Area"
          },
          "county": {
            "$ref": "#/components/schemas/Area"
          },
          "municipality": {
            "$ref": "#/components/schemas/Area"
          },
          "parish": {
            "$ref": "#/components/schemas/Area"
          },
          "province": {
            "$ref": "#/components/schemas/Area"
          },
          "decimalLatitude": {
            "type": "number",
            "description": "The geographic latitude (in decimal degrees, using\nthe spatial reference system given in geodeticDatum)\nof the geographic center of a Location. Positive values\nare north of the Equator, negative values are south of it.\nLegal values lie between -90 and 90, inclusive.",
            "format": "double",
            "nullable": true
          },
          "decimalLongitude": {
            "type": "number",
            "description": "The geographic longitude (in decimal degrees, using\nthe spatial reference system given in geodeticDatum)\nof the geographic center of a Location. Positive\nvalues are east of the Greenwich Meridian, negative\nvalues are west of it. Legal values lie between -180\nand 180, inclusive.",
            "format": "double",
            "nullable": true
          },
          "etrs89X": {
            "type": "number",
            "description": "X coordinate in ETRS89.",
            "format": "double",
            "nullable": true
          },
          "etrs89Y": {
            "type": "number",
            "description": "Y coordinate in ETRS89.",
            "format": "double",
            "nullable": true
          },
          "footprintSpatialFit": {
            "type": "string",
            "description": "The ratio of the area of the footprint (footprintWKT)\nto the area of the true (original, or most specific)\nspatial representation of the Location. Legal values are\n0, greater than or equal to 1, or undefined. A value of\n1 is an exact match or 100% overlap. A value of 0 should\nbe used if the given footprint does not completely contain\nthe original representation. The footprintSpatialFit is\nundefined (and should be left blank) if the original\nrepresentation is a point and the given georeference is\nnot that same point. If both the original and the given\ngeoreference are the same point, the footprintSpatialFit\nis 1.",
            "nullable": true
          },
          "footprintSRS": {
            "type": "string",
            "description": "A Well-Known Text (WKT) representation of the Spatial\nReference System (SRS) for the footprintWKT of the\nLocation. Do not use this term to describe the SRS of\nthe decimalLatitude and decimalLongitude, even if it is\nthe same as for the footprintWKT - use the geodeticDatum\ninstead.",
            "nullable": true
          },
          "footprintWKT": {
            "type": "string",
            "description": "A Well-Known Text (WKT) representation of the shape\n(footprint, geometry) that defines the Location.\nA Location may have both a point-radius representation\n(see decimalLatitude) and a footprint representation,\nand they may differ from each other.",
            "nullable": true
          },
          "geodeticDatum": {
            "type": "string",
            "description": "The ellipsoid, geodetic datum, or spatial reference\nsystem (SRS) upon which the geographic coordinates\ngiven in decimalLatitude and decimalLongitude as based.\nRecommended best practice is use the EPSG code as a\ncontrolled vocabulary to provide an SRS, if known.\nOtherwise use a controlled vocabulary for the name or\ncode of the geodetic datum, if known. Otherwise use a\ncontrolled vocabulary for the name or code of the\nellipsoid, if known. If none of these is known, use the\nvalue \"unknown\".",
            "nullable": true
          },
          "georeferencedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people,\ngroups, or organizations who determined the georeference\n(spatial representation) the Location.",
            "nullable": true
          },
          "georeferencedDate": {
            "type": "string",
            "description": "The date on which the Location was georeferenced.\nRecommended best practice is to use an encoding scheme,\nsuch as ISO 8601:2004(E).",
            "nullable": true
          },
          "georeferenceProtocol": {
            "type": "string",
            "description": "A description or reference to the methods used to\ndetermine the spatial footprint, coordinates, and\nuncertainties.",
            "nullable": true
          },
          "georeferenceRemarks": {
            "type": "string",
            "description": "Notes or comments about the spatial description\ndetermination, explaining assumptions made in addition\nor opposition to the those formalized in the method\nreferred to in georeferenceProtocol.",
            "nullable": true
          },
          "georeferenceSources": {
            "type": "string",
            "description": "A list (concatenated and separated) of maps, gazetteers,\nor other resources used to georeference the Location,\ndescribed specifically enough to allow anyone in the\nfuture to use the same resources.",
            "nullable": true
          },
          "georeferenceVerificationStatus": {
            "type": "string",
            "description": "A categorical description of the extent to which the\ngeoreference has been verified to represent the best\npossible spatial description. Recommended best practice\nis to use a controlled vocabulary.",
            "nullable": true
          },
          "higherGeography": {
            "type": "string",
            "description": "A list (concatenated and separated) of geographic\nnames less specific than the information captured\nin the locality term.",
            "nullable": true
          },
          "higherGeographyId": {
            "type": "string",
            "description": "An identifier for the geographic region within which\nthe Location occurred.\nRecommended best practice is to use an\npersistent identifier from a controlled vocabulary\nsuch as the Getty Thesaurus of Geographic Names.",
            "nullable": true
          },
          "island": {
            "type": "string",
            "description": "The name of the island on or near which the Location occurs.\nRecommended best practice is to use a controlled\nvocabulary such as the Getty Thesaurus of Geographic Names.",
            "nullable": true
          },
          "islandGroup": {
            "type": "string",
            "description": "The name of the island group in which the Location occurs.\nRecommended best practice is to use a controlled\nvocabulary such as the Getty Thesaurus of Geographic Names.",
            "nullable": true
          },
          "locality": {
            "type": "string",
            "description": "The specific description of the place. Less specific\ngeographic information can be provided in other\ngeographic terms (higherGeography, continent, country,\nstateProvince, county, municipality, waterBody, island,\nislandGroup). This term may contain information modified\nfrom the original to correct perceived errors or\nstandardize the description.",
            "nullable": true
          },
          "locationAccordingTo": {
            "type": "string",
            "description": "Information about the source of this Location information.\nCould be a publication (gazetteer), institution,\nor team of individuals.",
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "description": "An identifier for the set of location information\n(data associated with dcterms:Location).\nMay be a global unique identifier or an identifier\nspecific to the data set.",
            "nullable": true
          },
          "locationRemarks": {
            "type": "string",
            "description": "Comments or notes about the Location.",
            "nullable": true
          },
          "maximumDepthInMeters": {
            "type": "number",
            "description": "The greater depth of a range of depth below\nthe local surface, in meters.",
            "format": "double",
            "nullable": true
          },
          "maximumDistanceAboveSurfaceInMeters": {
            "type": "number",
            "description": "The greater distance in a range of distance from a\nreference surface in the vertical direction, in meters.\nUse positive values for locations above the surface,\nnegative values for locations below. If depth measures\nare given, the reference surface is the location given\nby the depth, otherwise the reference surface is the\nlocation given by the elevation.",
            "format": "double",
            "nullable": true
          },
          "maximumElevationInMeters": {
            "type": "number",
            "description": "The upper limit of the range of elevation (altitude,\nusually above sea level), in meters.",
            "format": "double",
            "nullable": true
          },
          "minimumDepthInMeters": {
            "type": "number",
            "description": "The lesser depth of a range of depth below the\nlocal surface, in meters.",
            "format": "double",
            "nullable": true
          },
          "minimumDistanceAboveSurfaceInMeters": {
            "type": "number",
            "description": "The lesser distance in a range of distance from a\nreference surface in the vertical direction, in meters.\nUse positive values for locations above the surface,\nnegative values for locations below.\nIf depth measures are given, the reference surface is\nthe location given by the depth, otherwise the reference\nsurface is the location given by the elevation.",
            "format": "double",
            "nullable": true
          },
          "minimumElevationInMeters": {
            "type": "number",
            "description": "The lower limit of the range of elevation (altitude,\nusually above sea level), in meters.",
            "format": "double",
            "nullable": true
          },
          "pointRadiusSpatialFit": {
            "type": "string",
            "description": "The ratio of the area of the point-radius\n(decimalLatitude, decimalLongitude,\ncoordinateUncertaintyInMeters) to the area of the true\n(original, or most specific) spatial representation of\nthe Location. Legal values are 0, greater than or equal\nto 1, or undefined. A value of 1 is an exact match or\n100% overlap. A value of 0 should be used if the given\npoint-radius does not completely contain the original\nrepresentation. The pointRadiusSpatialFit is undefined\n(and should be left blank) if the original representation\nis a point without uncertainty and the given georeference\nis not that same point (without uncertainty). If both the\noriginal and the given georeference are the same point,\nthe pointRadiusSpatialFit is 1.",
            "nullable": true
          },
          "sweref99TmX": {
            "type": "number",
            "description": "X coordinate in SWEREF99 TM.",
            "format": "double",
            "nullable": true
          },
          "sweref99TmY": {
            "type": "number",
            "description": "Y coordinate in SWEREF99 TM.",
            "format": "double",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "description": "Location type. 1=Point, 2=Polygon.",
            "format": "int32"
          },
          "verbatimCoordinates": {
            "type": "string",
            "description": "The verbatim original spatial coordinates of the Location.\nThe coordinate ellipsoid, geodeticDatum, or full\nSpatial Reference System (SRS) for these coordinates\nshould be stored in verbatimSRS and the coordinate\nsystem should be stored in verbatimCoordinateSystem.",
            "nullable": true
          },
          "verbatimCoordinateSystem": {
            "type": "string",
            "description": "The spatial coordinate system for the verbatimLatitude\nand verbatimLongitude or the verbatimCoordinates of the\nLocation.\nRecommended best practice is to use a controlled vocabulary.",
            "nullable": true
          },
          "verbatimDepth": {
            "type": "string",
            "description": "The original description of the\ndepth below the local surface.",
            "nullable": true
          },
          "verbatimElevation": {
            "type": "string",
            "description": "The original description of the elevation (altitude,\nusually above sea level) of the Location.",
            "nullable": true
          },
          "verbatimLatitude": {
            "type": "string",
            "description": "The verbatim original latitude of the Location.\nThe coordinate ellipsoid, geodeticDatum, or full\nSpatial Reference System (SRS) for these coordinates\nshould be stored in verbatimSRS and the coordinate\nsystem should be stored in verbatimCoordinateSystem.",
            "nullable": true
          },
          "verbatimLocality": {
            "type": "string",
            "description": "The original textual description of the place.",
            "nullable": true
          },
          "verbatimLongitude": {
            "type": "string",
            "description": "The verbatim original longitude of the Location.\nThe coordinate ellipsoid, geodeticDatum, or full\nSpatial Reference System (SRS) for these coordinates\nshould be stored in verbatimSRS and the coordinate\nsystem should be stored in verbatimCoordinateSystem.",
            "nullable": true
          },
          "verbatimSRS": {
            "type": "string",
            "description": "The ellipsoid, geodetic datum, or spatial reference\nsystem (SRS) upon which coordinates given in\nverbatimLatitude and verbatimLongitude, or\nverbatimCoordinates are based.\nRecommended best practice is use the EPSG code as\na controlled vocabulary to provide an SRS, if known.\nOtherwise use a controlled vocabulary for the name or\ncode of the geodetic datum, if known.\nOtherwise use a controlled vocabulary for the name or\ncode of the ellipsoid, if known. If none of these is\nknown, use the value \"unknown\".",
            "nullable": true
          },
          "waterBody": {
            "type": "string",
            "description": "The name of the water body in which the Location occurs.\nRecommended best practice is to use a controlled\nvocabulary such as the Getty Thesaurus of Geographic Names.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Location information for a species observation."
      },
      "LocationAttributes": {
        "type": "object",
        "properties": {
          "countyPartIdByCoordinate": {
            "type": "string",
            "description": "Special handling of Kalmar/Öland.",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "External Id of site",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "description": "Id of project",
            "format": "int32",
            "nullable": true
          },
          "provincePartIdByCoordinate": {
            "type": "string",
            "description": "Spacial handling of Lappland.",
            "nullable": true
          },
          "verbatimMunicipality": {
            "type": "string",
            "description": "The original municipality value from data provider.",
            "nullable": true
          },
          "verbatimProvince": {
            "type": "string",
            "description": "The original StateProvince value from data provider.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Location attributes."
      },
      "LocationDto": {
        "type": "object",
        "properties": {
          "continent": {
            "$ref": "#/components/schemas/Int32IdValueDto"
          },
          "coordinatePrecision": {
            "type": "number",
            "description": "A decimal representation of the precision of the coordinates\ngiven in the DecimalLatitude and DecimalLongitude.",
            "format": "double",
            "nullable": true
          },
          "coordinateUncertaintyInMeters": {
            "type": "integer",
            "description": "The horizontal distance (in meters) from the given\nCoordinateX and CoordinateY describing the\nsmallest circle containing the whole of the Location.\nLeave the value empty if the uncertainty is unknown, cannot\nbe estimated, or is not applicable (because there are\nno coordinates). Zero is not a valid value for this term.",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/Int32IdValueDto"
          },
          "countryRegion": {
            "$ref": "#/components/schemas/StringIdValueDto"
          },
          "countryCode": {
            "type": "string",
            "description": "The standard code for the country in which the\nLocation occurs.\nRecommended best practice is to use ISO 3166-1-alpha-2\ncountry codes.",
            "nullable": true
          },
          "county": {
            "$ref": "#/components/schemas/StringIdValueDto"
          },
          "municipality": {
            "$ref": "#/components/schemas/StringIdValueDto"
          },
          "parish": {
            "$ref": "#/components/schemas/StringIdValueDto"
          },
          "province": {
            "$ref": "#/components/schemas/StringIdValueDto"
          },
          "decimalLatitude": {
            "type": "number",
            "description": "The geographic latitude (in decimal degrees, using\nthe spatial reference system given in geodeticDatum)\nof the geographic center of a Location. Positive values\nare north of the Equator, negative values are south of it.\nLegal values lie between -90 and 90, inclusive.",
            "format": "double",
            "nullable": true
          },
          "decimalLongitude": {
            "type": "number",
            "description": "The geographic longitude (in decimal degrees, using\nthe spatial reference system given in geodeticDatum)\nof the geographic center of a Location. Positive\nvalues are east of the Greenwich Meridian, negative\nvalues are west of it. Legal values lie between -180\nand 180, inclusive.",
            "format": "double",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "External Id of site",
            "nullable": true
          },
          "locality": {
            "type": "string",
            "description": "The specific description of the place. Less specific\ngeographic information can be provided in other\ngeographic terms (higherGeography, continent, country,\nstateProvince, county, municipality, waterBody, island,\nislandGroup). This term may contain information modified\nfrom the original to correct perceived errors or\nstandardize the description.",
            "nullable": true
          },
          "locationAccordingTo": {
            "type": "string",
            "description": "Information about the source of this Location information.\nCould be a publication (gazetteer), institution,\nor team of individuals.",
            "nullable": true
          },
          "locationId": {
            "type": "string",
            "description": "An identifier for the set of location information\n(data associated with dcterms:Location).\nMay be a global unique identifier or an identifier\nspecific to the data set.",
            "nullable": true
          },
          "locationRemarks": {
            "type": "string",
            "description": "Comments or notes about the Location.",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/Point"
          },
          "pointWithBuffer": {
            "$ref": "#/components/schemas/Geometry"
          },
          "pointWithDisturbanceBuffer": {
            "$ref": "#/components/schemas/Geometry"
          },
          "projectId": {
            "type": "integer",
            "description": "Id of project",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/LocationType"
          }
        },
        "additionalProperties": false
      },
      "LocationSearchResultDto": {
        "type": "object",
        "properties": {
          "county": {
            "type": "string",
            "description": "County",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id of location",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Location latitude in WGS 84",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Location longitude in WGS 84",
            "format": "double"
          },
          "municipality": {
            "type": "string",
            "description": "Municipality",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of location",
            "nullable": true
          },
          "parish": {
            "type": "string",
            "description": "Parish",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationType": {
        "enum": [
          "Unknown",
          "Point",
          "Polygon"
        ],
        "type": "string"
      },
      "MaterialSample": {
        "type": "object",
        "properties": {
          "materialSampleId": {
            "type": "string",
            "description": "An identifier for the MaterialSample (as opposed to a particular digital record of the material sample).\nIn the absence of a persistent global unique identifier, construct one from a combination of identifiers in the\nrecord\nthat will most closely make the materialSampleID globally unique.",
            "nullable": true,
            "example": "\n                06809dc5-f143-459a-be1a-6f03e63fc083\n            "
          }
        },
        "additionalProperties": false,
        "description": "A physical result of a sampling (or subsampling) event. In biological collections, the material sample is typically\ncollected,\nand either preserved or destructively processed."
      },
      "Measuring": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Value for measured weather variable.",
            "format": "double",
            "nullable": true
          },
          "unit": {
            "$ref": "#/components/schemas/Unit"
          }
        },
        "additionalProperties": false
      },
      "MetricCoordinateSys": {
        "enum": [
          "SWEREF99_TM",
          "ETRS89"
        ],
        "type": "string"
      },
      "ModifiedDateFilterDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Changed from",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "Changed tp",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Filter for observation Modified date"
      },
      "Multimedia": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MultimediaComment"
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "format": {
            "type": "string",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "references": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "nullable": true
          },
          "creator": {
            "type": "string",
            "nullable": true
          },
          "contributor": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "audience": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "license": {
            "type": "string",
            "nullable": true
          },
          "rightsHolder": {
            "type": "string",
            "nullable": true
          },
          "datasetID": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Simple Multimedia extension\nhttp://rs.gbif.org/extension/gbif/1.0/multimedia.xml"
      },
      "MultimediaComment": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Media comment",
            "nullable": true
          },
          "commentBy": {
            "type": "string",
            "description": "User making the comment",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Media comment cration time",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Multimedia comment"
      },
      "NtsGeometryServices": {
        "type": "object",
        "properties": {
          "geometryOverlay": {
            "$ref": "#/components/schemas/GeometryOverlay"
          },
          "geometryRelate": {
            "$ref": "#/components/schemas/GeometryRelate"
          },
          "coordinateEqualityComparer": {
            "$ref": "#/components/schemas/CoordinateEqualityComparer"
          },
          "defaultSRID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "defaultCoordinateSequenceFactory": {
            "$ref": "#/components/schemas/CoordinateSequenceFactory"
          },
          "defaultPrecisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "defaultElevationModel": {
            "$ref": "#/components/schemas/ElevationModel"
          }
        },
        "additionalProperties": false
      },
      "ObjectPagedResultDto": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "description": "Ignores the specified number of items and returns a sequence starting at the item after the last skipped item (if\nany)",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items. Anything after the count is ignored",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          },
          "records": {
            "type": "array",
            "items": {},
            "description": "Paged records",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result returned by paged query"
      },
      "Observation": {
        "type": "object",
        "properties": {
          "diffusionStatus": {
            "$ref": "#/components/schemas/DiffusionStatus"
          },
          "isGeneralized": {
            "type": "boolean",
            "description": "Indicates whether the location is generalized."
          },
          "hasGeneralizedObservationInOtherIndex": {
            "type": "boolean",
            "description": "Indicates whether there exists a generalized location in other index."
          },
          "event": {
            "$ref": "#/components/schemas/Event"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipInfo"
          },
          "geologicalContext": {
            "$ref": "#/components/schemas/GeologicalContext"
          },
          "identification": {
            "$ref": "#/components/schemas/Identification"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "materialSample": {
            "$ref": "#/components/schemas/MaterialSample"
          },
          "occurrence": {
            "$ref": "#/components/schemas/Occurrence"
          },
          "organism": {
            "$ref": "#/components/schemas/Organism"
          },
          "taxon": {
            "$ref": "#/components/schemas/Taxon"
          },
          "accessRights": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "basisOfRecord": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "bibliographicCitation": {
            "type": "string",
            "description": "A bibliographic reference for the resource as a statement\nindicating how this record should be cited (attributed)\nwhen used.\nRecommended practice is to include sufficient\nbibliographic detail to identify the resource as\nunambiguously as possible.",
            "nullable": true
          },
          "collectionCode": {
            "type": "string",
            "description": "The name, acronym, coden, or initialism identifying the\ncollection or data set from which the record was derived.",
            "nullable": true
          },
          "collectionId": {
            "type": "string",
            "description": "An identifier for the collection or dataset from which\nthe record was derived.\nFor physical specimens, the recommended best practice is\nto use the identifier in a collections registry such as\nthe Biodiversity Collections Index\n(http://www.biodiversitycollectionsindex.org/).",
            "nullable": true
          },
          "dataGeneralizations": {
            "type": "string",
            "description": "Actions taken to make the shared data less specific or\ncomplete than in its original form.\nSuggests that alternative data of higher quality\nmay be available on request.",
            "nullable": true
          },
          "dataProviderId": {
            "type": "integer",
            "description": "Data provider id.",
            "format": "int32"
          },
          "datasetId": {
            "type": "string",
            "description": "An identifier for the set of data.\nMay be a global unique identifier or an identifier\nspecific to a collection or institution.",
            "nullable": true
          },
          "datasetName": {
            "type": "string",
            "description": "The name identifying the data set\nfrom which the record was derived.",
            "nullable": true
          },
          "dynamicProperties": {
            "type": "string",
            "description": "A list of additional measurements, facts, characteristics, or assertions about the record.\nMeant to provide a mechanism for structured content.\nRecommended best practice is to use a key:value encoding schema for a data interchange format such as JSON.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique id.",
            "nullable": true
          },
          "informationWithheld": {
            "type": "string",
            "description": "Additional information that exists, but that has\nnot been shared in the given record.",
            "nullable": true
          },
          "institutionId": {
            "type": "string",
            "description": "An identifier for the institution having custody of the object(s) or information referred to in the record.",
            "nullable": true
          },
          "institutionCode": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "language": {
            "type": "string",
            "description": "A language of the resource.\nRecommended best practice is to use a controlled\nvocabulary such as RFC 4646 [RFC4646].",
            "nullable": true
          },
          "license": {
            "type": "string",
            "description": "A legal document giving official permission to do something with the resource.",
            "nullable": true,
            "example": "\n                http://creativecommons.org/publicdomain/zero/1.0/legalcode,\n                http://creativecommons.org/licenses/by/4.0/legalcode\n            "
          },
          "modified": {
            "type": "string",
            "description": "The most recent date-time on which the resource was changed (UTC).\nFor Darwin Core, recommended best practice is to use an\nencoding scheme, such as ISO 8601:2004(E).",
            "format": "date-time",
            "nullable": true
          },
          "ownerInstitutionCode": {
            "type": "string",
            "description": "The name (or acronym) in use by the institution having\nownership of the object(s) or information referred\nto in the record.",
            "nullable": true
          },
          "privateCollection": {
            "type": "string",
            "description": "Private Collection.",
            "nullable": true
          },
          "protected": {
            "type": "boolean",
            "description": "Indicates whether the observation is protected.\nThis property is deprecated and replaced by the Sensitive property.",
            "readOnly": true,
            "deprecated": true
          },
          "sensitive": {
            "type": "boolean",
            "description": "Indicates whether the observation is sensitive and therefore protected."
          },
          "publicCollection": {
            "type": "string",
            "description": "Public Collection.",
            "nullable": true
          },
          "references": {
            "type": "string",
            "description": "A related resource that is referenced, cited,\nor otherwise pointed to by the described resource.",
            "nullable": true
          },
          "rightsHolder": {
            "type": "string",
            "description": "A person or organization owning or\nmanaging rights over the resource.",
            "nullable": true
          },
          "speciesCollectionLabel": {
            "type": "string",
            "description": "Species collection label.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "artportalenInternal": {
            "$ref": "#/components/schemas/ArtportalenInternal"
          },
          "measurementOrFacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedMeasurementOrFact"
            },
            "description": "Measurement or facts associated with the observation.",
            "nullable": true
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "description": "Projects from Artportalen associated with the observation.",
            "nullable": true
          },
          "projectsSummary": {
            "$ref": "#/components/schemas/ProjectsSummary"
          },
          "created": {
            "type": "string",
            "description": "The date the observation was created (UTC).",
            "format": "date-time"
          },
          "mongoDbId": {
            "type": "integer",
            "description": "MongoDb Id.",
            "format": "int32"
          },
          "dataQuality": {
            "$ref": "#/components/schemas/DataQuality"
          }
        },
        "additionalProperties": false,
        "description": "Information about a species observation."
      },
      "ObservationGeoPagedResultDto": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "description": "Ignores the specified number of items and returns a sequence starting at the item after the last skipped item (if\nany)",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items. Anything after the count is ignored",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            },
            "description": "Paged records",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result returned by paged query. Can contain GeoJSON if requested."
      },
      "ObservationPagedResultDto": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "description": "Ignores the specified number of items and returns a sequence starting at the item after the last skipped item (if\nany)",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items. Anything after the count is ignored",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            },
            "description": "Paged records",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result returned by paged query"
      },
      "ObservationScrollResultDto": {
        "type": "object",
        "properties": {
          "hasMorePages": {
            "type": "boolean",
            "description": "True if more pages can be retrieved using the ScrollId; otherwise false."
          },
          "scrollId": {
            "type": "string",
            "description": "The scroll id used for retrieving next page of records.",
            "nullable": true
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items.",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            },
            "description": "Paged records",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result returned by scroll query"
      },
      "Occurrence": {
        "type": "object",
        "properties": {
          "activity": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "associatedMedia": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers\n(publication, global unique identifier, URI) of\nmedia associated with the Occurrence.",
            "nullable": true
          },
          "associatedOccurrences": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers of\nother Occurrence records and their associations to\nthis Occurrence.",
            "nullable": true
          },
          "associatedReferences": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers\n(publication, bibliographic reference, global unique\nidentifier, URI) of literature associated with\nthe Occurrence.",
            "nullable": true
          },
          "associatedSequences": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers (publication, global unique identifier, URI) \nof genetic sequence information associated with the Occurrence.",
            "nullable": true
          },
          "associatedTaxa": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers or\nnames of taxa and their associations with the Occurrence.",
            "nullable": true
          },
          "behavior": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "biotope": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "biotopeDescription": {
            "type": "string",
            "description": "Description of biotope.",
            "nullable": true
          },
          "birdNestActivityId": {
            "type": "integer",
            "description": "Bird nest activity.",
            "format": "int32"
          },
          "catalogNumber": {
            "type": "string",
            "description": "An identifier (preferably unique) for the record\nwithin the data set or collection.",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "description": "An int32 identifier (preferably unique) for the record within the data set or collection.",
            "format": "int32"
          },
          "disposition": {
            "type": "string",
            "description": "The current state of a specimen with respect to the\ncollection identified in collectionCode or collectionID.\nRecommended best practice is to use a controlled vocabulary.",
            "nullable": true
          },
          "establishmentMeans": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "individualCount": {
            "type": "string",
            "description": "The number of individuals represented present\nat the time of the Occurrence.",
            "nullable": true
          },
          "isNaturalOccurrence": {
            "type": "boolean",
            "description": "Indicates if this species occurrence is natural or\nif it is a result of human activity."
          },
          "isNeverFoundObservation": {
            "type": "boolean",
            "description": "Indicates if this observation is a never found observation.\n\"Never found observation\" is an observation that says\nthat the specified species was not found in a location\ndeemed appropriate for the species."
          },
          "isNotRediscoveredObservation": {
            "type": "boolean",
            "description": "Indicates if this observation is a\nnot rediscovered observation.\n\"Not rediscovered observation\" is an observation that says\nthat the specified species was not found in a location\nwhere it has previously been observed."
          },
          "isPositiveObservation": {
            "type": "boolean",
            "description": "Indicates if this observation is a positive observation.\n\"Positive observation\" is a normal observation indicating\nthat a species has been seen at a specified location."
          },
          "lifeStage": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Multimedia"
            },
            "description": "Media associated with the observation",
            "nullable": true
          },
          "occurrenceId": {
            "type": "string",
            "description": "An identifier for the Occurrence (as opposed to a particular digital record of the occurrence).\nIn the absence of a persistent global unique identifier, construct one from a combination of\nidentifiers in the record that will most closely make the occurrenceID globally unique.",
            "nullable": true
          },
          "occurrenceRemarks": {
            "type": "string",
            "description": "Comments or notes about the Occurrence.",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "otherCatalogNumbers": {
            "type": "string",
            "description": "A list (concatenated and separated) of previous or\nalternate fully qualified catalog numbers or other\nhuman-used identifiers for the same Occurrence,\nwhether in the current or any other data set or collection.",
            "nullable": true
          },
          "organismQuantity": {
            "type": "string",
            "description": "A number or enumeration value for the quantity of organisms.\nA dwc:organismQuantity must have a corresponding dwc:organismQuantityType.",
            "nullable": true,
            "example": "\n                27 (organismQuantity) with individuals (organismQuantityType).\n                12.5 (organismQuantity) with %biomass (organismQuantityType).\n                r (organismQuantity) with BraunBlanquetScale (organismQuantityType).\n            "
          },
          "organismQuantityAggregation": {
            "type": "integer",
            "description": "Organism quantity used in aggregations",
            "format": "int32",
            "nullable": true
          },
          "organismQuantityInt": {
            "type": "integer",
            "description": "The quantity of organisms as integer. This field is necessary because we want to be able to do range-querys against quantities.",
            "format": "int32",
            "nullable": true
          },
          "organismQuantityUnit": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "preparations": {
            "type": "string",
            "description": "A list (concatenated and separated) of preparations\nand preservation methods for a specimen.",
            "nullable": true
          },
          "sensitivityCategory": {
            "type": "integer",
            "description": "Information about how protected information about a species is in Sweden.\nThis is a value between 1 to 5.\n1 indicates public access and 5 is the highest used security level.",
            "format": "int32"
          },
          "recordedBy": {
            "type": "string",
            "description": "A list (concatenated and separated) of names of people,\ngroups, or organizations responsible for recording the\noriginal Occurrence. The primary collector or observer,\nespecially one who applies a personal identifier\n(recordNumber), should be listed first.",
            "nullable": true
          },
          "recordNumber": {
            "type": "string",
            "description": "An identifier given to the Occurrence at the time it was\nrecorded. Often serves as a link between field notes and\nan Occurrence record, such as a specimen collector's number.",
            "nullable": true
          },
          "reportedBy": {
            "type": "string",
            "description": "Name of the person that reported the species observation.",
            "nullable": true
          },
          "reportedDate": {
            "type": "string",
            "description": "Date and time when the species observation was reported (UTC).",
            "format": "date-time",
            "nullable": true
          },
          "reproductiveCondition": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "sex": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "substrate": {
            "$ref": "#/components/schemas/Substrate"
          },
          "url": {
            "type": "string",
            "description": "URL to occurrence.",
            "nullable": true
          },
          "length": {
            "type": "integer",
            "description": "The reported length.",
            "format": "int32",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "The reported weight.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Occurrence information about a species observation."
      },
      "OccurrenceStatusFilterValuesDto": {
        "enum": [
          "Present",
          "Absent",
          "BothPresentAndAbsent"
        ],
        "type": "string",
        "description": "Possible values for the OccurrenceStatus filter."
      },
      "OgcGeometryType": {
        "enum": [
          "Point",
          "LineString",
          "Polygon",
          "MultiPoint",
          "MultiLineString",
          "MultiPolygon",
          "GeometryCollection",
          "CircularString",
          "CompoundCurve",
          "CurvePolygon",
          "MultiCurve",
          "MultiSurface",
          "Curve",
          "Surface",
          "PolyhedralSurface",
          "TIN"
        ],
        "type": "string"
      },
      "Ordinates": {
        "enum": [
          "None",
          "X",
          "Y",
          "XY",
          "Z",
          "XYZ",
          "Spatial4",
          "Spatial5",
          "Spatial6",
          "Spatial7",
          "Spatial8",
          "Spatial9",
          "Spatial10",
          "Spatial11",
          "Spatial12",
          "Spatial13",
          "Spatial14",
          "Spatial15",
          "Spatial16",
          "AllSpatialOrdinates",
          "M",
          "XYM",
          "XYZM",
          "Measure2",
          "Measure3",
          "Measure4",
          "Measure5",
          "Measure6",
          "Measure7",
          "Measure8",
          "Measure9",
          "Measure10",
          "Measure11",
          "Measure12",
          "Measure13",
          "Measure14",
          "Measure15",
          "Measure16",
          "AllMeasureOrdinates",
          "AllOrdinates"
        ],
        "type": "string"
      },
      "Organism": {
        "type": "object",
        "properties": {
          "organismId": {
            "type": "string",
            "description": "An identifier for the Organism instance (as opposed to a particular digital record of the Organism).\nMay be a globally unique identifier or an identifier specific to the data set.",
            "nullable": true
          },
          "organismName": {
            "type": "string",
            "description": "A textual name or label assigned to an Organism instance.",
            "nullable": true
          },
          "organismScope": {
            "type": "string",
            "description": "A description of the kind of Organism instance. Can be used to indicate whether\nthe Organism instance represents a discrete organism or if it represents\na particular type of aggregation..",
            "nullable": true
          },
          "associatedOrganisms": {
            "type": "string",
            "description": "A list (concatenated and separated) of identifiers of other Organisms and their\nassociations to this Organism.",
            "nullable": true
          },
          "previousIdentifications": {
            "type": "string",
            "description": "A list (concatenated and separated) of previous assignments of names to the Organism.",
            "nullable": true
          },
          "organismRemarks": {
            "type": "string",
            "description": "Comments or notes about the Organism instance..",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A particular organism or defined group of organisms considered to be taxonomically homogeneous."
      },
      "OutputFieldSet": {
        "enum": [
          "Minimum",
          "Extended",
          "AllWithValues",
          "All",
          "None"
        ],
        "type": "string",
        "description": "Export property sets."
      },
      "OutputFilterDto": {
        "type": "object",
        "properties": {
          "fieldSet": {
            "$ref": "#/components/schemas/OutputFieldSet"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This parameter allows you to decide what fields should be returned, using a projection.\nOmit this parameter and you will receive the complete collection of fields.\nFor example, to retrieve only basic observation data, specify:\n[\"event.startDate\", \"event.endDate\", \"location.decimalLatitude\", \"location.decimalLongitude\", \"location.municipality\", \"taxon.id\", \"taxon.scientificName\", \"occurrence.recordedBy\", \"occurrence.occurrenceStatus\"].",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response output settings"
      },
      "OutputFilterExtendedDto": {
        "type": "object",
        "properties": {
          "fieldSet": {
            "$ref": "#/components/schemas/OutputFieldSet"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "This parameter allows you to decide what fields should be returned, using a projection.\nOmit this parameter and you will receive the complete collection of fields.\nFor example, to retrieve only basic observation data, specify:\n[\"event.startDate\", \"event.endDate\", \"location.decimalLatitude\", \"location.decimalLongitude\", \"location.municipality\", \"taxon.id\", \"taxon.scientificName\", \"occurrence.recordedBy\", \"occurrence.occurrenceStatus\"].",
            "nullable": true
          },
          "sortOrders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortOrderDto"
            },
            "description": "Sort result",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response output settings"
      },
      "OutputFormatDto": {
        "enum": [
          "Json",
          "GeoJson",
          "GeoJsonFlat"
        ],
        "type": "string",
        "description": "Output format"
      },
      "Point": {
        "required": [
          "type",
          "coordinates"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Point"
            ],
            "type": "string"
          },
          "coordinates": {
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "additionalProperties": false
      },
      "Precipitation": {
        "enum": [
          "DryWeather",
          "LightRain",
          "ModerateRain",
          "HeavyRain",
          "Showers",
          "LightSnowfall",
          "ModerateSnowfall",
          "HeavySnowfall",
          "Snowflurries",
          "HailShowers"
        ],
        "type": "string",
        "description": "States the precipitation conditions during the survey event."
      },
      "PrecisionModel": {
        "type": "object",
        "properties": {
          "isFloating": {
            "type": "boolean",
            "readOnly": true
          },
          "maximumSignificantDigits": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "scale": {
            "type": "number",
            "format": "double"
          },
          "gridSize": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "precisionModelType": {
            "$ref": "#/components/schemas/PrecisionModels"
          }
        },
        "additionalProperties": false
      },
      "PrecisionModels": {
        "enum": [
          "Floating",
          "FloatingSingle",
          "Fixed"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {}
      },
      "ProcessInfoDto": {
        "type": "object",
        "properties": {
          "publicCount": {
            "type": "integer",
            "description": "Item processed",
            "format": "int32"
          },
          "protectedCount": {
            "type": "integer",
            "description": "Protected observations count",
            "format": "int32"
          },
          "end": {
            "type": "string",
            "description": "Harvest end date and time",
            "format": "date-time"
          },
          "metadataInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessInfoDto"
            },
            "description": "Provider information about meta data",
            "nullable": true
          },
          "providersInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderInfoDto"
            },
            "description": "Information about providers",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Harvest start date and time",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Running status",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id, equals updated instance (0 or 1)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Dto"
      },
      "Project": {
        "type": "object",
        "properties": {
          "isHidden": {
            "type": "boolean",
            "description": "Only available to owner and members"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Indicates if species observations that are reported in\na project are publicly available or not."
          },
          "category": {
            "type": "string",
            "description": "Information about the type of project,\nfor example 'Environmental monitoring'.",
            "nullable": true
          },
          "categorySwedish": {
            "type": "string",
            "description": "Information about the type of project in Swedish,\nfor example 'Miljöövervakning'.",
            "nullable": true
          },
          "controlingOrganisationId": {
            "type": "integer",
            "description": "Id of controling organization if any",
            "format": "int32",
            "nullable": true
          },
          "controlingUserId": {
            "type": "integer",
            "description": "Id of controling user if any",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of a project.",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Date when the project ends (UTC).",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "An identifier for the project.",
            "format": "int32"
          },
          "memberIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Id's of project members",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the project.",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "description": "Name of person or organization that owns the project.",
            "nullable": true
          },
          "projectParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectParameter"
            },
            "description": "Project parameters",
            "nullable": true
          },
          "projectURL": {
            "type": "string",
            "description": "Web address that leads to more information about the\nproject. The information should be accessible\nfrom the most commonly used web browsers.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Date when the project starts (UTC).",
            "format": "date-time",
            "nullable": true
          },
          "surveyMethod": {
            "type": "string",
            "description": "Survey method used in a project to\nretrieve species observations.",
            "nullable": true
          },
          "surveyMethodUrl": {
            "type": "string",
            "description": "Survey method URL.",
            "nullable": true
          },
          "userServiceUserId": {
            "type": "integer",
            "description": "Owner id in user admin",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Artportalen project information."
      },
      "ProjectDto": {
        "type": "object",
        "properties": {
          "isPublic": {
            "type": "boolean",
            "description": "Indicates if species observations that are reported in\na project are publicly available or not."
          },
          "category": {
            "type": "string",
            "description": "Information about the type of project,\nfor example 'Environmental monitoring'.",
            "nullable": true
          },
          "categorySwedish": {
            "type": "string",
            "description": "Information about the type of project in Swedish,\nfor example 'Miljöövervakning'.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of a project.",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Date when the project ends.",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "An identifier for the project.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the project.",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "description": "Name of person or organization that owns the project.",
            "nullable": true
          },
          "projectURL": {
            "type": "string",
            "description": "Web address that leads to more information about the project.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Date when the project starts.",
            "format": "date-time",
            "nullable": true
          },
          "surveyMethod": {
            "type": "string",
            "description": "Survey method used in a project to\nretrieve species observations.",
            "nullable": true
          },
          "surveyMethodUrl": {
            "type": "string",
            "description": "Survey method URL.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a project in Artportalen."
      },
      "ProjectParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Project description.",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "description": "Unit for this species observation project parameter..",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "Data type.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value of the data in string format.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Artportalen project parameter."
      },
      "ProjectsSummary": {
        "type": "object",
        "properties": {
          "project1Id": {
            "type": "integer",
            "description": "Project 1 Id.",
            "format": "int32",
            "nullable": true
          },
          "project1Name": {
            "type": "string",
            "description": "Project 1 name.",
            "nullable": true
          },
          "project1Category": {
            "type": "string",
            "description": "Project 1 category.",
            "nullable": true
          },
          "project1Url": {
            "type": "string",
            "description": "Project 1 URL.",
            "nullable": true
          },
          "project1Values": {
            "type": "string",
            "description": "Project 1 values.",
            "nullable": true
          },
          "project2Id": {
            "type": "integer",
            "description": "Project 2 Id.",
            "format": "int32",
            "nullable": true
          },
          "project2Name": {
            "type": "string",
            "description": "Project 2 name.",
            "nullable": true
          },
          "project2Category": {
            "type": "string",
            "description": "Project 2 category.",
            "nullable": true
          },
          "project2Url": {
            "type": "string",
            "description": "Project 2 URL.",
            "nullable": true
          },
          "project2Values": {
            "type": "string",
            "description": "Project 2 values.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Artportalen projects summary."
      },
      "PropertyFieldDataType": {
        "enum": [
          "Boolean",
          "DateTime",
          "Double",
          "Int32",
          "Int64",
          "String",
          "TimeSpan"
        ],
        "type": "string"
      },
      "PropertyFieldDescriptionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Property name.",
            "nullable": true
          },
          "propertyPath": {
            "type": "string",
            "description": "Property path.",
            "nullable": true
          },
          "swedishTitle": {
            "type": "string",
            "description": "Swedish title.",
            "nullable": true
          },
          "englishTitle": {
            "type": "string",
            "description": "English title.",
            "nullable": true
          },
          "dwcName": {
            "type": "string",
            "description": "Darwin Core name.",
            "nullable": true
          },
          "dwcIdentifier": {
            "type": "string",
            "description": "Darwin Core identifier.",
            "nullable": true
          },
          "dataType": {
            "$ref": "#/components/schemas/PropertyFieldDataType"
          },
          "dataTypeNullable": {
            "type": "boolean",
            "description": "Indicates whether the data type is nullable."
          },
          "fieldSet": {
            "$ref": "#/components/schemas/OutputFieldSet"
          },
          "partOfFieldSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputFieldSet"
            },
            "description": "The field sets this property is part of.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a property field."
      },
      "PropertyLabelType": {
        "enum": [
          "PropertyName",
          "PropertyPath",
          "Swedish",
          "English"
        ],
        "type": "string",
        "description": "Property label type."
      },
      "ProtectionFilterDto": {
        "enum": [
          "Public",
          "Sensitive",
          "BothPublicAndSensitive"
        ],
        "type": "string"
      },
      "ProviderInfoDto": {
        "type": "object",
        "properties": {
          "dataProviderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dataProviderIdentifier": {
            "type": "string",
            "nullable": true
          },
          "harvestCount": {
            "type": "integer",
            "description": "Number of items harvested",
            "format": "int32",
            "nullable": true
          },
          "harvestEnd": {
            "type": "string",
            "description": "Harvest end date and time",
            "format": "date-time",
            "nullable": true
          },
          "harvestNotes": {
            "type": "string",
            "description": "Harvest note",
            "nullable": true
          },
          "harvestStart": {
            "type": "string",
            "description": "Harvest start date and time",
            "format": "date-time",
            "nullable": true
          },
          "harvestStatus": {
            "type": "string",
            "description": "Status of harvest",
            "nullable": true
          },
          "latestIncrementalPublicCount": {
            "type": "integer",
            "description": "Last incremental process count",
            "format": "int32",
            "nullable": true
          },
          "latestIncrementalProtectedCount": {
            "type": "integer",
            "description": "Last incremental process count",
            "format": "int32",
            "nullable": true
          },
          "latestIncrementalEnd": {
            "type": "string",
            "description": "Last incremental process end",
            "format": "date-time",
            "nullable": true
          },
          "latestIncrementalStatus": {
            "type": "string",
            "description": "Last incremental process status",
            "nullable": true
          },
          "latestIncrementalStart": {
            "type": "string",
            "description": "Last incremental process start",
            "format": "date-time",
            "nullable": true
          },
          "publicProcessCount": {
            "type": "integer",
            "description": "Number of items processed",
            "format": "int32",
            "nullable": true
          },
          "protectedProcessCount": {
            "type": "integer",
            "description": "Number of items processed",
            "format": "int32",
            "nullable": true
          },
          "processEnd": {
            "type": "string",
            "description": "Process end date and time",
            "format": "date-time",
            "nullable": true
          },
          "processStart": {
            "type": "string",
            "description": "Process start date and time",
            "format": "date-time"
          },
          "processStatus": {
            "type": "string",
            "description": "Status of processing",
            "nullable": true
          },
          "dataProviderType": {
            "type": "string",
            "description": "Id of data provider",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PublicGeneralizationFilterDto": {
        "enum": [
          "NoFilter",
          "OnlyGeneralized",
          "DontIncludeGeneralized"
        ],
        "type": "string",
        "description": "Public observations generalization filter."
      },
      "SearchFilterAggregationDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipFilterDto"
          },
          "date": {
            "$ref": "#/components/schemas/DateFilterDto"
          },
          "determinationFilter": {
            "$ref": "#/components/schemas/SightingDeterminationFilterDto"
          },
          "diffusionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiffusionStatusDto"
            },
            "description": "Filter by diffusion status.",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventFilterDto"
          },
          "excludeFilter": {
            "$ref": "#/components/schemas/ExcludeFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/ModifiedDateFilterDto"
          },
          "notRecoveredFilter": {
            "$ref": "#/components/schemas/SightingNotRecoveredFilterDto"
          },
          "observedByMe": {
            "type": "boolean",
            "description": "Only get observations observed by me",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/OccurrenceStatusFilterValuesDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Project id's to match.",
            "nullable": true
          },
          "reportedByMe": {
            "type": "boolean",
            "description": "Only get observations reported by me",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterDto"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/StatusVerificationDto"
          }
        },
        "additionalProperties": false,
        "description": "Search filter for aggregations"
      },
      "SearchFilterAggregationInternalDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipFilterDto"
          },
          "date": {
            "$ref": "#/components/schemas/DateFilterDto"
          },
          "determinationFilter": {
            "$ref": "#/components/schemas/SightingDeterminationFilterDto"
          },
          "diffusionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiffusionStatusDto"
            },
            "description": "Filter by diffusion status.",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventFilterDto"
          },
          "excludeFilter": {
            "$ref": "#/components/schemas/ExcludeFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/ModifiedDateFilterDto"
          },
          "notRecoveredFilter": {
            "$ref": "#/components/schemas/SightingNotRecoveredFilterDto"
          },
          "observedByMe": {
            "type": "boolean",
            "description": "Only get observations observed by me",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/OccurrenceStatusFilterValuesDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Project id's to match.",
            "nullable": true
          },
          "reportedByMe": {
            "type": "boolean",
            "description": "Only get observations reported by me",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterDto"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/StatusVerificationDto"
          },
          "extendedFilter": {
            "$ref": "#/components/schemas/ExtendedFilterDto"
          },
          "generalizationFilter": {
            "$ref": "#/components/schemas/GeneralizationFilterDto"
          },
          "protectionFilter": {
            "$ref": "#/components/schemas/ProtectionFilterDto"
          }
        },
        "additionalProperties": false,
        "description": "Internal search filter."
      },
      "SearchFilterBaseDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipFilterDto"
          },
          "date": {
            "$ref": "#/components/schemas/DateFilterDto"
          },
          "determinationFilter": {
            "$ref": "#/components/schemas/SightingDeterminationFilterDto"
          },
          "diffusionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiffusionStatusDto"
            },
            "description": "Filter by diffusion status.",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventFilterDto"
          },
          "excludeFilter": {
            "$ref": "#/components/schemas/ExcludeFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/ModifiedDateFilterDto"
          },
          "notRecoveredFilter": {
            "$ref": "#/components/schemas/SightingNotRecoveredFilterDto"
          },
          "observedByMe": {
            "type": "boolean",
            "description": "Only get observations observed by me",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/OccurrenceStatusFilterValuesDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Project id's to match.",
            "nullable": true
          },
          "reportedByMe": {
            "type": "boolean",
            "description": "Only get observations reported by me",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterDto"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/StatusVerificationDto"
          }
        },
        "additionalProperties": false,
        "description": "Search filter."
      },
      "SearchFilterDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipFilterDto"
          },
          "date": {
            "$ref": "#/components/schemas/DateFilterDto"
          },
          "determinationFilter": {
            "$ref": "#/components/schemas/SightingDeterminationFilterDto"
          },
          "diffusionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiffusionStatusDto"
            },
            "description": "Filter by diffusion status.",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventFilterDto"
          },
          "excludeFilter": {
            "$ref": "#/components/schemas/ExcludeFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/ModifiedDateFilterDto"
          },
          "notRecoveredFilter": {
            "$ref": "#/components/schemas/SightingNotRecoveredFilterDto"
          },
          "observedByMe": {
            "type": "boolean",
            "description": "Only get observations observed by me",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/OccurrenceStatusFilterValuesDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Project id's to match.",
            "nullable": true
          },
          "reportedByMe": {
            "type": "boolean",
            "description": "Only get observations reported by me",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterDto"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/StatusVerificationDto"
          },
          "output": {
            "$ref": "#/components/schemas/OutputFilterDto"
          }
        },
        "additionalProperties": false,
        "description": "Search filter."
      },
      "SearchFilterInternalBaseDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipFilterDto"
          },
          "date": {
            "$ref": "#/components/schemas/DateFilterDto"
          },
          "determinationFilter": {
            "$ref": "#/components/schemas/SightingDeterminationFilterDto"
          },
          "diffusionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiffusionStatusDto"
            },
            "description": "Filter by diffusion status.",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventFilterDto"
          },
          "excludeFilter": {
            "$ref": "#/components/schemas/ExcludeFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/ModifiedDateFilterDto"
          },
          "notRecoveredFilter": {
            "$ref": "#/components/schemas/SightingNotRecoveredFilterDto"
          },
          "observedByMe": {
            "type": "boolean",
            "description": "Only get observations observed by me",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/OccurrenceStatusFilterValuesDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Project id's to match.",
            "nullable": true
          },
          "reportedByMe": {
            "type": "boolean",
            "description": "Only get observations reported by me",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterDto"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/StatusVerificationDto"
          },
          "extendedFilter": {
            "$ref": "#/components/schemas/ExtendedFilterDto"
          },
          "generalizationFilter": {
            "$ref": "#/components/schemas/GeneralizationFilterDto"
          },
          "protectionFilter": {
            "$ref": "#/components/schemas/ProtectionFilterDto"
          }
        },
        "additionalProperties": false,
        "description": "Internal search filter."
      },
      "SearchFilterInternalDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "dataStewardship": {
            "$ref": "#/components/schemas/DataStewardshipFilterDto"
          },
          "date": {
            "$ref": "#/components/schemas/DateFilterDto"
          },
          "determinationFilter": {
            "$ref": "#/components/schemas/SightingDeterminationFilterDto"
          },
          "diffusionStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiffusionStatusDto"
            },
            "description": "Filter by diffusion status.",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventFilterDto"
          },
          "excludeFilter": {
            "$ref": "#/components/schemas/ExcludeFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "modifiedDate": {
            "$ref": "#/components/schemas/ModifiedDateFilterDto"
          },
          "notRecoveredFilter": {
            "$ref": "#/components/schemas/SightingNotRecoveredFilterDto"
          },
          "observedByMe": {
            "type": "boolean",
            "description": "Only get observations observed by me",
            "nullable": true
          },
          "occurrenceStatus": {
            "$ref": "#/components/schemas/OccurrenceStatusFilterValuesDto"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Project id's to match.",
            "nullable": true
          },
          "reportedByMe": {
            "type": "boolean",
            "description": "Only get observations reported by me",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterDto"
          },
          "verificationStatus": {
            "$ref": "#/components/schemas/StatusVerificationDto"
          },
          "extendedFilter": {
            "$ref": "#/components/schemas/ExtendedFilterDto"
          },
          "generalizationFilter": {
            "$ref": "#/components/schemas/GeneralizationFilterDto"
          },
          "protectionFilter": {
            "$ref": "#/components/schemas/ProtectionFilterDto"
          },
          "includeRealCount": {
            "type": "boolean",
            "description": "By default totalCount in search response will not exceed 10 000. If IncludeRealCount is true, totalCount will show the real number of hits. Even if it's more than 10 000 (performance cost)",
            "nullable": true
          },
          "output": {
            "$ref": "#/components/schemas/OutputFilterExtendedDto"
          }
        },
        "additionalProperties": false,
        "description": "Internal search filter."
      },
      "SearchSortOrder": {
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string",
        "description": "Sort order enum"
      },
      "SensitiveGeneralizationFilterDto": {
        "enum": [
          "DontIncludeGeneralizedObservations",
          "IncludeGeneralizedObservations",
          "OnlyGeneralizedObservations"
        ],
        "type": "string",
        "description": "Sensitive observations generalization filter."
      },
      "SightingDeterminationFilterDto": {
        "enum": [
          "NoFilter",
          "NotUnsureDetermination",
          "OnlyUnsureDetermination"
        ],
        "type": "string"
      },
      "SightingNotPresentFilterDto": {
        "enum": [
          "NoFilter",
          "DontIncludeNotPresent",
          "OnlyNotPresent",
          "IncludeNotPresent"
        ],
        "type": "string"
      },
      "SightingNotRecoveredFilterDto": {
        "enum": [
          "NoFilter",
          "OnlyNotRecovered",
          "DontIncludeNotRecovered",
          "IncludeNotRecovered"
        ],
        "type": "string"
      },
      "SightingTypeFilterDto": {
        "enum": [
          "DoNotShowMerged",
          "ShowOnlyMerged",
          "ShowBoth",
          "DoNotShowSightingsInMerged",
          "DoNotShowMergedIncludeReplacementChilds",
          "ShowChildrenAndReplacements"
        ],
        "type": "string"
      },
      "SightingUnspontaneousFilterDto": {
        "enum": [
          "NoFilter",
          "NotUnspontaneous",
          "Unspontaneous"
        ],
        "type": "string"
      },
      "SignalFilterDto": {
        "type": "object",
        "properties": {
          "birdNestActivityLimit": {
            "type": "integer",
            "description": "Limit returned observations based on bird nest activity level.\nOnly bird observations in Artportalen are affected\nby this search criteria.\nObservation of other organism groups (not birds) are\nnot affected by this search criteria.",
            "format": "int32",
            "nullable": true
          },
          "dataProvider": {
            "$ref": "#/components/schemas/DataProviderFilterDto"
          },
          "geographics": {
            "$ref": "#/components/schemas/GeographicsFilterDto"
          },
          "startDate": {
            "type": "string",
            "description": "Observation start date specified in the ISO 8601 standard. If no timezone is specified, GMT+1 (CEST) is assumed",
            "format": "date-time",
            "nullable": true
          },
          "taxon": {
            "$ref": "#/components/schemas/TaxonFilterBaseDto"
          }
        },
        "additionalProperties": false,
        "description": "Search filter for signal search."
      },
      "SnowCover": {
        "enum": [
          "SnowFreeGround",
          "SnowCoveredGround",
          "ThinOrPartialSnowCoveredGround"
        ],
        "type": "string"
      },
      "SortOrderDto": {
        "type": "object",
        "properties": {
          "sortBy": {
            "type": "string",
            "description": "Name of field to sort by",
            "nullable": true
          },
          "sortOrder": {
            "$ref": "#/components/schemas/SearchSortOrder"
          }
        },
        "additionalProperties": false
      },
      "SpeciesGroup": {
        "enum": [
          "All",
          "VascularPlants",
          "Mosses",
          "Lichens",
          "Fungi",
          "AlgaeAndMicroOrganisms",
          "Invertebrates",
          "Birds",
          "AmphibiansAndReptiles",
          "OtherVertebrates",
          "Bats",
          "Fishes"
        ],
        "type": "string",
        "description": "Species group (Artgrupp)"
      },
      "StatusVerificationDto": {
        "enum": [
          "BothVerifiedAndNotVerified",
          "Verified",
          "NotVerified"
        ],
        "type": "string"
      },
      "StringIdValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of item",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Id value dto"
      },
      "Substrate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of substrate.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Substrate id.",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of substrate.",
            "format": "int32",
            "nullable": true
          },
          "speciesDescription": {
            "type": "string",
            "description": "Description of substrate species.",
            "nullable": true
          },
          "speciesId": {
            "type": "integer",
            "description": "Substrate taxon id.",
            "format": "int32",
            "nullable": true
          },
          "speciesScientificName": {
            "type": "string",
            "description": "Scientific name of substrate species.",
            "nullable": true
          },
          "speciesVernacularName": {
            "type": "string",
            "description": "Vernacular name of substrate species.",
            "nullable": true
          },
          "substrateDescription": {
            "type": "string",
            "description": "Description of substrate",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Substrate info."
      },
      "Taxon": {
        "type": "object",
        "properties": {
          "acceptedNameUsage": {
            "type": "string",
            "description": "The full name, with authorship and date information\nif known, of the currently valid (zoological) or\naccepted (botanical) taxon.",
            "nullable": true
          },
          "acceptedNameUsageId": {
            "type": "string",
            "description": "An identifier for the name usage (documented meaning of\nthe name according to a source) of the currently valid\n(zoological) or accepted (botanical) taxon.",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/TaxonAttributes"
          },
          "birdDirective": {
            "type": "boolean",
            "description": "Part of bird directive?"
          },
          "class": {
            "type": "string",
            "description": "The full scientific name of the class in which\nthe taxon is classified.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Name used for display",
            "nullable": true
          },
          "family": {
            "type": "string",
            "description": "The full scientific name of the family in which\nthe taxon is classified.",
            "nullable": true
          },
          "genus": {
            "type": "string",
            "description": "The full scientific name of the genus in which\nthe taxon is classified.",
            "nullable": true
          },
          "higherClassification": {
            "type": "string",
            "description": "A list (concatenated and separated) of taxa names\nterminating at the rank immediately superior to the\ntaxon referenced in the taxon record.\nRecommended best practice is to order the list\nstarting with the highest rank and separating the names\nfor each rank with a semi-colon (\";\").",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Object id.",
            "format": "int32"
          },
          "infraspecificEpithet": {
            "type": "string",
            "description": "The name of the lowest or terminal infraspecific epithet\nof the scientificName, excluding any rank designation.",
            "nullable": true
          },
          "kingdom": {
            "type": "string",
            "description": "The full scientific name of the kingdom in which the\ntaxon is classified.",
            "nullable": true
          },
          "nameAccordingTo": {
            "type": "string",
            "description": "The reference to the source in which the specific\ntaxon concept circumscription is defined or implied -\ntraditionally signified by the Latin \"sensu\" or \"sec.\"\n(from secundum, meaning \"according to\").\nFor taxa that result from identifications, a reference\nto the keys, monographs, experts and other sources should\nbe given.",
            "nullable": true
          },
          "nameAccordingToId": {
            "type": "string",
            "description": "An identifier for the source in which the specific\ntaxon concept circumscription is defined or implied.\nSee nameAccordingTo.",
            "nullable": true
          },
          "namePublishedIn": {
            "type": "string",
            "description": "A reference for the publication in which the\nscientificName was originally established under the rules\nof the associated nomenclaturalCode.",
            "nullable": true
          },
          "namePublishedInId": {
            "type": "string",
            "description": "An identifier for the publication in which the\nscientificName was originally established under the\nrules of the associated nomenclaturalCode.",
            "nullable": true
          },
          "namePublishedInYear": {
            "type": "string",
            "description": "The four-digit year in which the scientificName\nwas published.",
            "nullable": true
          },
          "nomenclaturalCode": {
            "type": "string",
            "description": "The nomenclatural code (or codes in the case of an\nambiregnal name) under which the scientificName is\nconstructed.\nRecommended best practice is to use a controlled vocabulary.",
            "nullable": true
          },
          "nomenclaturalStatus": {
            "type": "string",
            "description": "The status related to the original publication of the\nname and its conformance to the relevant rules of\nnomenclature. It is based essentially on an algorithm\naccording to the business rules of the code.\nIt requires no taxonomic opinion.",
            "nullable": true
          },
          "order": {
            "type": "string",
            "description": "The full scientific name of the order in which\nthe taxon is classified.",
            "nullable": true
          },
          "originalNameUsage": {
            "type": "string",
            "description": "The taxon name, with authorship and date information\nif known, as it originally appeared when first established\nunder the rules of the associated nomenclaturalCode.\nThe basionym (botany) or basonym (bacteriology) of the\nscientificName or the senior/earlier homonym for replaced\nnames.",
            "nullable": true
          },
          "originalNameUsageId": {
            "type": "string",
            "description": "An identifier for the name usage (documented meaning of\nthe name according to a source) in which the terminal\nelement of the scientificName was originally established\nunder the rules of the associated nomenclaturalCode.",
            "nullable": true
          },
          "parentNameUsage": {
            "type": "string",
            "description": "The full name, with authorship and date information\nif known, of the direct, most proximate higher-rank\nparent taxon (in a classification) of the most specific\nelement of the scientificName.",
            "nullable": true
          },
          "parentNameUsageId": {
            "type": "string",
            "description": "An identifier for the name usage (documented meaning\nof the name according to a source) of the direct,\nmost proximate higher-rank parent taxon\n(in a classification) of the most specific\nelement of the scientificName.",
            "nullable": true
          },
          "phylum": {
            "type": "string",
            "description": "The full scientific name of the phylum or division\nin which the taxon is classified.",
            "nullable": true
          },
          "scientificName": {
            "type": "string",
            "description": "The full scientific name, with authorship and date\ninformation if known. When forming part of an\nIdentification, this should be the name in lowest level\ntaxonomic rank that can be determined.\nThis term should not contain identification qualifications,\nwhich should instead be supplied in the\nIdentificationQualifier term.\nCurrently scientific name without author is provided.",
            "nullable": true
          },
          "scientificNameAuthorship": {
            "type": "string",
            "description": "The authorship information for the scientificName\nformatted according to the conventions of the applicable\nnomenclaturalCode.",
            "nullable": true
          },
          "scientificNameId": {
            "type": "string",
            "description": "An identifier for the nomenclatural (not taxonomic)\ndetails of a scientific name.",
            "nullable": true
          },
          "secondaryParentDyntaxaTaxonIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Secondary parents dyntaxa taxon ids.",
            "nullable": true
          },
          "specificEpithet": {
            "type": "string",
            "description": "The name of the first or species epithet of\nthe scientificName.",
            "nullable": true
          },
          "subgenus": {
            "type": "string",
            "description": "The full scientific name of the subgenus in which\nthe taxon is classified. Values should include the\ngenus to avoid homonym confusion.",
            "nullable": true
          },
          "taxonConceptId": {
            "type": "string",
            "description": "An identifier for the taxonomic concept to which the record\nrefers - not for the nomenclatural details of a taxon.\nIn SwedishSpeciesObservationSOAPService this property\nhas the same value as property TaxonID.\nGUID in Dyntaxa is used as value for this property.",
            "nullable": true
          },
          "taxonId": {
            "type": "string",
            "description": "An identifier for the set of taxon information\n(data associated with the Taxon class). May be a global\nunique identifier or an identifier specific to the data set.\nIn SwedishSpeciesObservationSOAPService this property\nhas the same value as property TaxonConceptID.\nGUID in Dyntaxa is used as value for this property.",
            "nullable": true
          },
          "taxonomicStatus": {
            "type": "string",
            "description": "The status of the use of the scientificName as a label\nfor a taxon. Requires taxonomic opinion to define the\nscope of a taxon. Rules of priority then are used to\ndefine the taxonomic status of the nomenclature contained\nin that scope, combined with the experts opinion.\nIt must be linked to a specific taxonomic reference that\ndefines the concept.\nRecommended best practice is to use a controlled vocabulary.",
            "nullable": true
          },
          "taxonRank": {
            "type": "string",
            "description": "The taxonomic rank of the most specific name in the\nscientificName. Recommended best practice is to use\na controlled vocabulary.",
            "nullable": true
          },
          "taxonRemarks": {
            "type": "string",
            "description": "Comments or notes about the taxon or name.",
            "nullable": true
          },
          "verbatimTaxonRank": {
            "type": "string",
            "description": "The taxonomic rank of the most specific name in the\nscientificName as it appears in the original record.",
            "nullable": true
          },
          "vernacularName": {
            "type": "string",
            "description": "A common or vernacular name.",
            "nullable": true
          },
          "verbatimId": {
            "type": "string",
            "description": "Verbatim id",
            "nullable": true
          },
          "verbatimName": {
            "type": "string",
            "description": "Verbatim name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class contains taxon information about a species observation."
      },
      "TaxonAggregationItemDto": {
        "type": "object",
        "properties": {
          "firstSighting": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastSighting": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "taxonId": {
            "type": "integer",
            "format": "int32"
          },
          "observationCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TaxonAggregationItemDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "description": "Ignores the specified number of items and returns a sequence starting at the item after the last skipped item (if\nany)",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items. Anything after the count is ignored",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonAggregationItemDto"
            },
            "description": "Paged records",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result returned by paged query"
      },
      "TaxonAttributes": {
        "type": "object",
        "properties": {
          "actionPlan": {
            "type": "string",
            "description": "Indicates whether the species is the subject\nof an action plan ('åtgärdsprogram' in swedish).",
            "nullable": true
          },
          "countyOccurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountyOccurrence"
            },
            "description": "County occurrence status",
            "nullable": true
          },
          "disturbanceRadius": {
            "type": "integer",
            "description": "Disturbance radius.",
            "format": "int32",
            "nullable": true
          },
          "dyntaxaTaxonId": {
            "type": "integer",
            "description": "Taxon id value in Dyntaxa.",
            "format": "int32"
          },
          "gbifTaxonId": {
            "type": "integer",
            "description": "Id for taxon in GBIF",
            "format": "int32",
            "nullable": true
          },
          "organismLabel1": {
            "type": "string",
            "description": "Organism Label 1",
            "nullable": true
          },
          "organismLabel2": {
            "type": "string",
            "description": "Organism Label 2",
            "nullable": true
          },
          "isInvasiveAccordingToEuRegulation": {
            "type": "boolean",
            "description": "True if invasive in sweden according to EU Regulation 1143/2014."
          },
          "isInvasiveInSweden": {
            "type": "boolean",
            "description": "True if invasive in sweden."
          },
          "invasiveRiskAssessmentCategory": {
            "type": "string",
            "description": "Invasive risk assessment category.",
            "nullable": true
          },
          "isRedlisted": {
            "type": "boolean",
            "description": "True if derived redlist category is one of CR, EN, VU, NT."
          },
          "natura2000HabitatsDirectiveArticle2": {
            "type": "boolean",
            "description": "Natura 2000, Habitats directive article 2."
          },
          "natura2000HabitatsDirectiveArticle4": {
            "type": "boolean",
            "description": "Natura 2000, Habitats directive article 4."
          },
          "natura2000HabitatsDirectiveArticle5": {
            "type": "boolean",
            "description": "Natura 2000, Habitats directive article 5."
          },
          "organismGroup": {
            "type": "string",
            "description": "Common name of the organism group that observed species\nbelongs to. Classification of species groups is the same as\nused in latest 'Red List of Swedish Species'.",
            "nullable": true
          },
          "parentDyntaxaTaxonId": {
            "type": "integer",
            "description": "Parent Dyntaxa TaxonId.",
            "format": "int32",
            "nullable": true
          },
          "protectedByLaw": {
            "type": "boolean",
            "description": "Indicates whether the species \nis protected by the law in Sweden."
          },
          "protectionLevel": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "redlistCategory": {
            "type": "string",
            "description": "Redlist category for redlisted species. Possible redlist values\nare DD (Data Deficient), EX (Extinct),\nRE (Regionally Extinct), CR (Critically Endangered),\nEN (Endangered), VU (Vulnerable), NT (Near Threatened).\nNot redlisted species has no value in this property.",
            "nullable": true
          },
          "redlistCategoryDerived": {
            "type": "string",
            "description": "Derivied red list category from parent taxa",
            "nullable": true
          },
          "scientificNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonScientificName"
            },
            "description": "Scientific names",
            "nullable": true
          },
          "sensitivityCategory": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "sortOrder": {
            "type": "integer",
            "description": "Systematic sort order.",
            "format": "int32"
          },
          "speciesGroup": {
            "$ref": "#/components/schemas/SpeciesGroup"
          },
          "swedishOccurrence": {
            "type": "string",
            "description": "Information about the species occurrence in Sweden.\nFor example information about if the species reproduce\nin sweden.",
            "nullable": true
          },
          "swedishHistory": {
            "type": "string",
            "description": "This property contains information about the species\nimmigration history.",
            "nullable": true
          },
          "synonyms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonSynonymName"
            },
            "description": "Scientific synonym names.",
            "nullable": true
          },
          "taxonCategory": {
            "$ref": "#/components/schemas/VocabularyValue"
          },
          "vernacularNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonVernacularName"
            },
            "description": "Vernacular names.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon attributes."
      },
      "TaxonFilterBaseDto": {
        "type": "object",
        "properties": {
          "includeUnderlyingTaxa": {
            "type": "boolean",
            "description": "If true, also include the underlying hierarchical taxa in search.\nE.g. If ids=[4000104](Aves) and includeUnderlyingTaxa=true, then you search for all birds.",
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Dyntaxa taxon id's to match.",
            "nullable": true
          },
          "isInvasiveInSweden": {
            "type": "boolean",
            "description": "Search for only invasive taxa (true)\nSearch for non invasive taxa (false)\nSearch for both (null)",
            "nullable": true
          },
          "taxonListIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Add (merge) or filter taxa by using taxon lists.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon filter."
      },
      "TaxonFilterDto": {
        "type": "object",
        "properties": {
          "includeUnderlyingTaxa": {
            "type": "boolean",
            "description": "If true, also include the underlying hierarchical taxa in search.\nE.g. If ids=[4000104](Aves) and includeUnderlyingTaxa=true, then you search for all birds.",
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Dyntaxa taxon id's to match.",
            "nullable": true
          },
          "isInvasiveInSweden": {
            "type": "boolean",
            "description": "Search for only invasive taxa (true)\nSearch for non invasive taxa (false)\nSearch for both (null)",
            "nullable": true
          },
          "taxonListIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Add (merge) or filter taxa by using taxon lists.",
            "nullable": true
          },
          "redListCategories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Redlist categories to match.\nPossible values are: \"DD\", \"EX\", \"RE\", \"CR\", \"EN\", \"VU\", \"NT\", \"LC\", \"NA\", \"NE\"",
            "nullable": true
          },
          "taxonCategories": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Taxon categories to match.",
            "nullable": true
          },
          "taxonListOperator": {
            "$ref": "#/components/schemas/TaxonListOperatorDto"
          }
        },
        "additionalProperties": false,
        "description": "Taxon filter."
      },
      "TaxonListDefinitionDto": {
        "type": "object",
        "properties": {
          "canBeUsedInSignalSearch": {
            "type": "boolean",
            "description": "Is the list allowed in signal search?"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the taxon list.",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "description": "The parent Id of the taxon list.",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the taxon list.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon list definition."
      },
      "TaxonListOperatorDto": {
        "enum": [
          "Merge",
          "Filter"
        ],
        "type": "string",
        "description": "Operator to use when TaxonListIds is specified."
      },
      "TaxonListTaxonInformationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Dyntaxa taxon id.",
            "format": "int32"
          },
          "scientificName": {
            "type": "string",
            "description": "Scientific name.",
            "nullable": true
          },
          "swedishName": {
            "type": "string",
            "description": "Swedish name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon information."
      },
      "TaxonScientificName": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "description": "Scientific Name Author",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "A scientific name.",
            "nullable": true
          },
          "isPreferredName": {
            "type": "boolean",
            "description": "This term is true if the source citing the use of this scientific name indicates the usage has \nsome preference or specific standing over other possible scientific names used for the species."
          },
          "validForSighting": {
            "type": "boolean",
            "description": "Valid for sighting"
          }
        },
        "additionalProperties": false,
        "description": "Taxon scientific name."
      },
      "TaxonSumAggregationItem": {
        "type": "object",
        "properties": {
          "taxonId": {
            "type": "integer",
            "description": "Taxon id.",
            "format": "int32"
          },
          "observationCount": {
            "type": "integer",
            "description": "Observation count.",
            "format": "int32"
          },
          "sumObservationCount": {
            "type": "integer",
            "description": "Sum of observation count including underlying taxa observation count.",
            "format": "int32"
          },
          "provinceCount": {
            "type": "integer",
            "description": "Number of provinces the taxon is observed.",
            "format": "int32"
          },
          "sumProvinceCount": {
            "type": "integer",
            "description": "Number of provinces the taxon is observed including underlying taxa.",
            "format": "int32"
          },
          "sumObservationCountByProvinceId": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Sum of observation count including underlying taxa observation count, by Province id.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon aggregation item containing sum of underlying taxa values."
      },
      "TaxonSumAggregationItemPagedResultDto": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "description": "Ignores the specified number of items and returns a sequence starting at the item after the last skipped item (if\nany)",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "Returns a sequence containing up to the specified number of items. Anything after the count is ignored",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of records matching the query",
            "format": "int64"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxonSumAggregationItem"
            },
            "description": "Paged records",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result returned by paged query"
      },
      "TaxonSynonymName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "author": {
            "type": "string",
            "description": "Author.",
            "nullable": true
          },
          "taxonomicStatus": {
            "type": "string",
            "description": "The status of the use of the scientificName as a label\nfor a taxon. Requires taxonomic opinion to define the\nscope of a taxon. Rules of priority then are used to\ndefine the taxonomic status of the nomenclature contained\nin that scope, combined with the experts opinion.\nIt must be linked to a specific taxonomic reference that\ndefines the concept.\nRecommended best practice is to use a controlled vocabulary.",
            "nullable": true
          },
          "nomenclaturalStatus": {
            "type": "string",
            "description": "The status related to the original publication of the\nname and its conformance to the relevant rules of\nnomenclature. It is based essentially on an algorithm\naccording to the business rules of the code.\nIt requires no taxonomic opinion.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Taxon synonym."
      },
      "TaxonVernacularName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A common vernacular name.",
            "nullable": true
          },
          "language": {
            "type": "string",
            "description": "ISO 639-1 language code used for the vernacular name value..",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "The standard code for the country in which the vernacular name is used.\nRecommended best practice is to use the ISO 3166-1-alpha-2 country codes available as a vocabulary\nat http://rs.gbif.org/vocabulary/iso/3166-1_alpha2.xml. For multiple countries separate values with a comma \",\"",
            "nullable": true
          },
          "isPreferredName": {
            "type": "boolean",
            "description": "This term is true if the source citing the use of this vernacular name indicates the usage has \nsome preference or specific standing over other possible vernacular names used for the species."
          },
          "validForSighting": {
            "type": "boolean",
            "description": "Valid for sighting"
          }
        },
        "additionalProperties": false,
        "description": "Taxon vernacular name."
      },
      "TimeRangeDto": {
        "enum": [
          "Morning",
          "Forenoon",
          "Afternoon",
          "Evening",
          "Night"
        ],
        "type": "string"
      },
      "TimeSeriesHistogramResultDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TimeSeriesTypeDto"
          },
          "period": {
            "type": "integer",
            "description": "Time period.",
            "format": "int32"
          },
          "observations": {
            "type": "integer",
            "description": "Number of observations.",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "Organism quantity.",
            "format": "int32"
          },
          "taxa": {
            "type": "integer",
            "description": "Number of taxa.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Time series histogram result."
      },
      "TimeSeriesTypeDto": {
        "enum": [
          "Year",
          "Month",
          "Week48",
          "Day"
        ],
        "type": "string",
        "description": "Time series type"
      },
      "Unit": {
        "enum": [
          "Percent",
          "Cm2",
          "Cm3",
          "Dm2",
          "Kompassgrader",
          "Ms",
          "M2",
          "Styck",
          "GraderCelsius"
        ],
        "type": "string",
        "description": "Unit for a certain amount of organisms (given in the attribute quantity) or\nUnit for a reported measurement (given in the attribute \"vädermått\").."
      },
      "UserAreaDto": {
        "type": "object",
        "properties": {
          "buffer": {
            "type": "integer",
            "description": "Area buffer in meters",
            "format": "int32",
            "nullable": true
          },
          "areaType": {
            "$ref": "#/components/schemas/AreaTypeDto"
          },
          "featureId": {
            "type": "string",
            "description": "Area FeatureId.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Area name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User role authority area."
      },
      "UserAuthorityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Authority id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Authority name.",
            "nullable": true
          },
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAreaDto"
            },
            "description": "Authority areas.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User role authority."
      },
      "UserInformationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User id.",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "Username.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true
          },
          "hasSensitiveSpeciesAuthority": {
            "type": "boolean",
            "description": "Indicates whether the user has any role with sensitive species observation authority."
          },
          "hasSightingIndicationAuthority": {
            "type": "boolean",
            "description": "Indicates whether the use user has any role with sighting indication authority."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleDto"
            },
            "description": "User roles.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User information."
      },
      "UserInternal": {
        "type": "object",
        "properties": {
          "discover": {
            "type": "boolean",
            "description": "User discovered the observation"
          },
          "id": {
            "type": "integer",
            "description": "User Id",
            "format": "int32"
          },
          "personId": {
            "type": "integer",
            "description": "Person Id",
            "format": "int32"
          },
          "userServiceUserId": {
            "type": "integer",
            "description": "User Service id",
            "format": "int32",
            "nullable": true
          },
          "userAlias": {
            "type": "string",
            "description": "User alias",
            "nullable": true
          },
          "viewAccess": {
            "type": "boolean",
            "description": "User with sort > 0 is authorized to view the observation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Role id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Role name.",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "Role short name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Role description.",
            "nullable": true
          },
          "hasSensitiveSpeciesAuthority": {
            "type": "boolean",
            "description": "Indicates whether this role has sensitive species observation authority."
          },
          "hasSightingIndicationAuthority": {
            "type": "boolean",
            "description": "Indicates whether this role has sighting indication authority."
          },
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAuthorityDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User role."
      },
      "Visibility": {
        "enum": [
          "Fog1Km",
          "Haze1To4Km",
          "Moderate4To10Km",
          "Good10To20Km",
          "VeryGood20Km"
        ],
        "type": "string",
        "description": "States the visibility conditions during the survey event."
      },
      "VocabularyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "enumId": {
            "$ref": "#/components/schemas/VocabularyIdDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "localized": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VocabularyValueInfoDto"
            },
            "nullable": true
          },
          "externalSystemsMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalSystemMappingDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VocabularyIdDto": {
        "enum": [
          "Sex",
          "Activity",
          "LifeStage",
          "Biotope",
          "Substrate",
          "VerificationStatus",
          "Institution",
          "Unit",
          "BasisOfRecord",
          "Continent",
          "EstablishmentMeans",
          "OccurrenceStatus",
          "AccessRights",
          "Country",
          "Type",
          "AreaType",
          "DiscoveryMethod",
          "DeterminationMethod",
          "ReproductiveCondition",
          "Behavior",
          "SensitivityCategory",
          "BirdNestActivity",
          "TaxonCategory",
          "InvasiveSpeciesTreatment"
        ],
        "type": "string"
      },
      "VocabularyValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "If the entry exist in the vocabulary, then Id is greater than or equal to 0.\nIf the entry doesn't exist in the vocabulary, then Id is equal to -1.",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "The value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a value associated with a vocabulary."
      },
      "VocabularyValueInfoCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "localized": {
            "type": "boolean"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VocabularyValueTranslationDto"
            },
            "description": "Translations.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VocabularyValueInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "localized": {
            "type": "boolean"
          },
          "category": {
            "$ref": "#/components/schemas/VocabularyValueInfoCategoryDto"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VocabularyValueTranslationDto"
            },
            "description": "Translations.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VocabularyValueTranslationDto": {
        "type": "object",
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "Culture code. I.e. en-GB, sv-SE",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Translation",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Weather": {
        "type": "object",
        "properties": {
          "snowCover": {
            "$ref": "#/components/schemas/SnowCover"
          },
          "sunshine": {
            "$ref": "#/components/schemas/Measuring"
          },
          "airTemperature": {
            "$ref": "#/components/schemas/Measuring"
          },
          "windDirection": {
            "$ref": "#/components/schemas/CompassDirection"
          },
          "windDirectionDegrees": {
            "$ref": "#/components/schemas/Measuring"
          },
          "windSpeed": {
            "$ref": "#/components/schemas/Measuring"
          },
          "windStrength": {
            "$ref": "#/components/schemas/WindStrength"
          },
          "precipitation": {
            "$ref": "#/components/schemas/Precipitation"
          },
          "visibility": {
            "$ref": "#/components/schemas/Visibility"
          },
          "cloudiness": {
            "$ref": "#/components/schemas/Cloudiness"
          }
        },
        "additionalProperties": false
      },
      "WindStrength": {
        "enum": [
          "_0Beaufort",
          "_1Beaufort",
          "_2Beaufort",
          "_3Beaufort",
          "_4Beaufort",
          "_5Beaufort",
          "_6Beaufort",
          "_7Beaufort",
          "_8Beaufort",
          "_9Beaufort",
          "_10Beaufort",
          "_11Beaufort",
          "_12Beaufort",
          "Calm1Ms",
          "LightBreezeUpTo3Ms",
          "ModerateBreeze4To7Ms",
          "FreshBreeze8Till13Ms",
          "NearGale14To19Ms",
          "StrongGale20To24Ms",
          "Storm25Till32Ms",
          "Hurricane33Ms"
        ],
        "type": "string",
        "description": "States the strength of the wind during the survey event."
      },
      "XYBoundingBoxDto": {
        "type": "object",
        "properties": {
          "bottomRight": {
            "$ref": "#/components/schemas/XYCoordinateDto"
          },
          "topLeft": {
            "$ref": "#/components/schemas/XYCoordinateDto"
          }
        },
        "additionalProperties": false
      },
      "XYCoordinateDto": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}