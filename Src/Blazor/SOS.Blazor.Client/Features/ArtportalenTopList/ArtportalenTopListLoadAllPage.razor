@page "/artportalentoplistloadall"
@inject HttpClient _httpClient
@inject NavigationManager _navManager

<h3>Artportalens topplista - Ladda in alla i ett request</h3>
<div class="mb-3">
    @if (_provinces != null)
    {
        <select class="form-select" @onchange="@(async args => await OnSelectProvinceChange(args))">
            <option value="">--Filtrera på provins--</option>
            @foreach (var item in _provinces)
            {
                <option value="@item.FeatureId">@item.Name</option>
            }
        </select>
    }
</div>
<div class="form-check">
    <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" @bind="_useCache">
    <label class="form-check-label" for="flexCheckChecked">
        Använd cache
    </label>
</div>

<div class="page-size-chooser">
    Sidstorlek:
    <select @bind="@_pagination.ItemsPerPage">
        <option>10</option>
        <option>20</option>
        <option>30</option>
    </select>
</div>

<div class="grid">
    <QuickGrid Items="@userStatisticsQueryable" Pagination="@_pagination">
        <PropertyColumn Property="@(u => u.UserId)"/>
        <PropertyColumn Property="@(u => u.SpeciesCount)"/>
        <PropertyColumn Property="@(u => u.ObservationCount)"/>
    </QuickGrid>
</div>
<Paginator Value="@_pagination"/>


@code {
    PaginationState _pagination = new PaginationState { ItemsPerPage = 20 };
    private static IEnumerable<Area>? _provinces;
    private string? _selectedProvinceFeatureId;
    IQueryable<UserStatisticsItem>? userStatisticsQueryable;
    private bool _useCache = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get provinces
            var provincesResponse = await _httpClient.GetFromJsonAsync<PagedResult<Area>>("Areas?skip=0&take=100&areaType=Province");
            _provinces = provincesResponse?.Records.OrderBy(a => Convert.ToInt32(a.FeatureId)).ToList();

            // Get user statistics
            await GetUserStatistics();

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"There was a problem in OnInitializedAsync(): {ex.Message}");
        }
    }

    private async Task OnSelectProvinceChange(ChangeEventArgs e)
    {
        _selectedProvinceFeatureId = e.Value.ToString();
        await GetUserStatistics();
    }

    private async Task GetUserStatistics()
    {
        var url = _navManager.GetUriWithQueryParameters("UserStatistics/PagedSpeciesCountAggregation", new Dictionary<string, object?> {
            { "skip", 0 },
            { "take", 100000 },
            { "useCache", _useCache}
        });
        var query = new SpeciesCountUserStatisticsQuery();
        if (!string.IsNullOrEmpty(_selectedProvinceFeatureId))
        {
            query.AreaType = AreaType.Province;
            query.FeatureId = _selectedProvinceFeatureId;
        }
        var response = await _httpClient.PostAsJsonAsync(url, query);
        var pagedResult = await response.Content.ReadFromJsonAsync<PagedResult<UserStatisticsItem>>();
        userStatisticsQueryable = pagedResult.Records.AsQueryable();
    }
}