@page "/artportalentoplistprovince"
@inject HttpClient _httpClient
@inject NavigationManager _navManager

<h3>Artportalens topplista - Provins</h3>
<div class="form-check">
    <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" @bind="_useCache">
    <label class="form-check-label" for="flexCheckChecked">
        Använd cache
    </label>
</div>

<div class="page-size-chooser">
    Sidstorlek:
    <select @bind="@_pagination.ItemsPerPage">
        <option>10</option>
        <option>20</option>
        <option>30</option>
    </select>
</div>

<div class="grid">
    <QuickGrid ItemsProvider="@_userStatisticsProvider" Pagination="@_pagination">
        <PropertyColumn Property="@(u => u.UserId)"/>
        <PropertyColumn Property="@(u => u.SpeciesCount)" Sortable="true" IsDefaultSort="SortDirection.Descending"/>
        <PropertyColumn Property="@(u => u.Province01SpeciesCount)" Title="Skåne" Sortable="true" Class="1" />
        <PropertyColumn Property="@(u => u.Province02SpeciesCount)" Title="Blekinge" Sortable="true" Class="2" />
        <PropertyColumn Property="@(u => u.Province03SpeciesCount)" Title="Småland" Sortable="true" Class="3" />
        <PropertyColumn Property="@(u => u.Province04SpeciesCount)" Title="Öland" Sortable="true" Class="4" />
        <PropertyColumn Property="@(u => u.Province05SpeciesCount)" Title="Gotland" Sortable="true" Class="5" />
        @*<PropertyColumn Property="@(u => u.ObservationCount)"/>*@
    </QuickGrid>
</div>
<Paginator Value="@_pagination"/>


@code {
    GridItemsProvider<ProvinceUserStatisticsItem>? _userStatisticsProvider;
    PaginationState _pagination = new PaginationState { ItemsPerPage = 20 };
    private bool _useCache = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Setup user statistics provider
            _userStatisticsProvider = async req =>
            {
                var url = _navManager.GetUriWithQueryParameters("UserStatistics/PagedSpeciesCountAggregation", new Dictionary<string, object?> {
                    { "skip", req.StartIndex },
                    { "take", req.Count },
                    { "useCache", _useCache}
                });
                var query = new SpeciesCountUserStatisticsQuery();
                query.IncludeOtherAreasSpeciesCount = true;
                query.AreaType = AreaType.Province;
                string? sortByColumn = req.SortByColumn?.Class;
                if (!string.IsNullOrEmpty(sortByColumn))
                {
                    query.SortByFeatureId = sortByColumn;
                }
                var response = await _httpClient.PostAsJsonAsync(url, query);
                var pagedResult = await response.Content.ReadFromJsonAsync<PagedResult<UserStatisticsItem>>();
                var records = pagedResult!.Records.Select(ProvinceUserStatisticsItem.Create).ToList();
                return GridItemsProviderResult.From(
                    items: records,
                    totalItemCount: (int)pagedResult!.TotalCount);
            };

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"There was a problem in OnInitializedAsync(): {ex.Message}");
        }
    }
}