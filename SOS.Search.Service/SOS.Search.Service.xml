<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SOS.Search.Service</name>
    </assembly>
    <members>
        <member name="T:SOS.Search.Service.Configuration.MongoDbConfiguration">
            <summary>
            Cosmos configuration properties
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.Hosts">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.ReplicaSetName">
            <summary>
            Name of replica set
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.DatabaseName">
            <summary>
            Name of data base
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbConfiguration.UseSsl">
            <summary>
            True if ssl is used
            </summary>
        </member>
        <member name="T:SOS.Search.Service.Configuration.MongoDbServer">
            <summary>
            Mongo db server properties
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbServer.Name">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Configuration.MongoDbServer.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="T:SOS.Search.Service.Controllers.Interfaces.ISightingController">
            <summary>
            Sighting controller interface
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Controllers.Interfaces.ISightingController.GetChunkAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get chunk of sightings for a taxon
            </summary>
            <param name="taxonId"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:SOS.Search.Service.Controllers.SightingController">
            <summary>
            Sighting controller
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Controllers.SightingController.#ctor(SOS.Search.Service.Factories.Interfaces.ISightingFactory,Microsoft.Extensions.Logging.ILogger{SOS.Search.Service.Controllers.SightingController})">
            <summary>
            Constructor
            </summary>
            <param name="sightingFactory"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SOS.Search.Service.Controllers.SightingController.GetChunkAsync(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SOS.Search.Service.Factories.Interfaces.ISightingFactory">
            <summary>
            Sighting factory repository
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Factories.Interfaces.ISightingFactory.GetChunkAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get chunk of sightings
            </summary>
            <returns></returns>
        </member>
        <member name="T:SOS.Search.Service.Factories.SightingFactory">
            <summary>
            Sighting factory class
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Factories.SightingFactory.#ctor(SOS.Search.Service.Repositories.Interfaces.ISightingAggregateRepository,Microsoft.Extensions.Logging.ILogger{SOS.Search.Service.Factories.SightingFactory})">
            <summary>
            Constructor
            </summary>
            <param name="sightingAggregateRepository"></param>
        </member>
        <member name="M:SOS.Search.Service.Factories.SightingFactory.GetChunkAsync(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SOS.Search.Service.Models.Interfaces.IEntity`1">
            <summary>
            IEntity interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SOS.Search.Service.Models.Interfaces.IEntity`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:SOS.Search.Service.Models.Interfaces.IEntity">
            <summary>
            IEntity interface
            </summary>
        </member>
        <member name="T:SOS.Search.Service.Models.SightingAggregate">
            <summary>
            Sighting object
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Models.SightingAggregate.Id">
            <summary>
            Id of sighting
            </summary>
        </member>
        <member name="P:SOS.Search.Service.Models.SightingAggregate.TaxonId">
            <summary>
            Id of taxon
            </summary>
        </member>
        <member name="T:SOS.Search.Service.Repositories.AggregateRepository`2">
            <summary>
            Base class for cosmos db repositories
            </summary>
        </member>
        <member name="F:SOS.Search.Service.Repositories.AggregateRepository`2.Logger">
            <summary>
            Logger 
            </summary>
        </member>
        <member name="F:SOS.Search.Service.Repositories.AggregateRepository`2.Database">
            <summary>
            Mongo db
            </summary>
        </member>
        <member name="F:SOS.Search.Service.Repositories.AggregateRepository`2._disposed">
            <summary>
            Disposed
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Repositories.AggregateRepository`2.#ctor(MongoDB.Driver.IMongoClient,Microsoft.Extensions.Options.IOptions{SOS.Search.Service.Configuration.MongoDbConfiguration},Microsoft.Extensions.Logging.ILogger{SOS.Search.Service.Repositories.AggregateRepository{`0,`1}})">
            <summary>
            Constructor
            </summary>
            <param name="mongoClient"></param>
            <param name="mongoDbConfiguration"></param>
            <param name="logger"></param>
        </member>
        <member name="P:SOS.Search.Service.Repositories.AggregateRepository`2.MongoCollection">
            <summary>
            Get client
            </summary>
            <returns></returns>
        </member>
        <member name="M:SOS.Search.Service.Repositories.AggregateRepository`2.GetAsync(`1)">
            <inheritdoc />
        </member>
        <member name="M:SOS.Search.Service.Repositories.AggregateRepository`2.GetAllAsync">
            <inheritdoc />
        </member>
        <member name="M:SOS.Search.Service.Repositories.AggregateRepository`2.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SOS.Search.Service.Repositories.AggregateRepository`2.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SOS.Search.Service.Repositories.Interfaces.IAggregateRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SOS.Search.Service.Repositories.Interfaces.IAggregateRepository`2.GetAsync(`1)">
            <summary>
            Get entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:SOS.Search.Service.Repositories.Interfaces.IAggregateRepository`2.GetAllAsync">
            <summary>
            Get all objects in repository
            </summary>
            <returns></returns>
        </member>
        <member name="T:SOS.Search.Service.Repositories.Interfaces.ISightingAggregateRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Repositories.Interfaces.ISightingAggregateRepository.GetChunkAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get chunk of objects from repository
            </summary>
            <param name="taxonId"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:SOS.Search.Service.Repositories.SightingAggregateRepository">
            <summary>
            Species data service
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Repositories.SightingAggregateRepository.#ctor(MongoDB.Driver.IMongoClient,Microsoft.Extensions.Options.IOptions{SOS.Search.Service.Configuration.MongoDbConfiguration},Microsoft.Extensions.Logging.ILogger{SOS.Search.Service.Repositories.SightingAggregateRepository})">
            <summary>
            Constructor
            </summary>
            <param name="settingsService"></param>
            <param name="mongoClient"></param>
            <param name="mongoDbConfiguration"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SOS.Search.Service.Repositories.SightingAggregateRepository.GetChunkAsync(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="F:SOS.Search.Service.Startup.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:SOS.Search.Service.Startup.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Startup
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:SOS.Search.Service.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
