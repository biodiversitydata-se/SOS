apiVersion: v1
kind: Service
metadata:
  labels:
    app: datastewardship-api
  name: datastewardship-api
  namespace: datastewardship
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: datastewardship-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: datastewardship-api
  name: datastewardship-api
  namespace: datastewardship
spec:
  replicas: 2
  selector:
    matchLabels:
      app: datastewardship-api
  strategy: 
      type: Recreate
  template:
    metadata:
      annotations:
        logging: "true"
      labels:
        app: datastewardship-api
    spec:
      topologySpreadConstraints: # try to spread out api instances over available nodes
      - labelSelector:
          matchLabels:
            app: datastewardship-api # pods labeled app: datastewardship-api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname # 1 node = 1 topology
        whenUnsatisfiable: DoNotSchedule
      containers:
        - env:
            - name: ASPNETCORE_ENVIRONMENT
              value: prod
            - name: InstrumentationKey
              valueFrom:
                  secretKeyRef:
                    key: InstrumentationKey
                    name: datastewardship-secret
            - name: ProcessDbPassword
              valueFrom:
                  secretKeyRef:
                    key: ProcessDbPassword
                    name: datastewardship-secret
            - name: ProcessDbUserName
              valueFrom:
                  secretKeyRef:
                    key: ProcessDbUserName
                    name: datastewardship-secret
            - name: SearchDbPassword
              valueFrom:
                  secretKeyRef:
                    key: SearchDbPassword
                    name: datastewardship-secret
            - name: SearchDbUserName
              valueFrom:
                  secretKeyRef:
                    key: SearchDbUserName
                    name: datastewardship-secret
            - name: ApplicationInsights
              value: '{"InstrumentationKey": "SECRET_PLACEHOLDER", "EnableRequestBodyLogging": false, "EnableSearchResponseCountLogging": true}'
            - name: IdentityServer
              value: '{"Authority": "https://ids.artdatabanken.se", "Audience": "SOS.Observations", "RequireHttpsMetadata ": false}'
            - name: ProcessDbConfiguration
              value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Hosts": [{"Name": "artmongo2-1.artdata.slu.se", "Port": 27017}, {"Name": "artmongo2-2.artdata.slu.se", "Port": 27017}, {"Name": "artmongo2-3.artdata.slu.se", "Port": 27017}], "ReplicaSetName": "mongo-prod", "DatabaseName": "sos", "UseTls": false, "AuthenticationDb": "admin", "ReadBatchSize": 10000, "WriteBatchSize": 10000}'
            - name: SearchDbConfiguration
              value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Clusters": [{"Hosts": ["https://artsosdata2-1.artdata.slu.se:9200", "https://artsosdata2-2.artdata.slu.se:9200", "https://artsosdata2-3.artdata.slu.se:9200"]}, {"Hosts": ["https://artsosdata2-4.artdata.slu.se:9200", "https://artsosdata2-5.artdata.slu.se:9200", "https://artsosdata2-6.artdata.slu.se:9200"]}], "DebugMode": false, "IndexPrefix": "sos", "IndexSettings": [{"Name": "observation", "NumberOfReplicas": 0, "NumberOfShards": 15, "NumberOfShardsProtected": 3, "ReadBatchSize": 10000, "WriteBatchSize": 1000, "RequestTimeout": 300, "ScrollBatchSize": 5000, "ScrollTimeout": "300s"}, {"Name": "dataset", "NumberOfReplicas": 0, "NumberOfShards": 1, "ReadBatchSize": 10000, "WriteBatchSize": 1000, "RequestTimeout": 300, "ScrollBatchSize": 5000, "ScrollTimeout": "300s"}, {"Name": "event", "NumberOfReplicas": 0, "NumberOfShards": 3, "ReadBatchSize": 10000, "WriteBatchSize": 1000, "RequestTimeout": 300, "ScrollBatchSize": 5000, "ScrollTimeout": "300s"}]}'
            - name: UserServiceConfiguration
              value: '{"BaseAddress": "https://artdatauser.artdata.slu.se/api", "AcceptHeaderContentType": "application/json"}'
          image: reg.app.slu.se/k1003-1/datastewardship-api:$(Parameters.ImageTag)
          name: datastewardship-api
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
          readinessProbe: # ready to accept traffic, failure = stops routing traffic to this pod but does not restart the pod!
            httpGet:
              path: /healthz
              port: 5000
              httpHeaders:
              - name: Host
                value: KubernetesReadinessProbe
            initialDelaySeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 30 # runs every 30 seconds
          resources: {}
      restartPolicy: Always
      imagePullSecrets:
        - name: reg.app.slu.se-k1003-1-regcred
