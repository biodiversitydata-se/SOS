apiVersion: v1
kind: Service
metadata:
  labels:
    app: sosadminapi-api
  name: sosadminapi-api
  namespace: sosadminapi
spec:
  ports:
    - port: 5005
      targetPort: 5005
  selector:
    app: sosadminapi-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sosadminapi-api
  name: sosadminapi-api
  namespace: sosadminapi
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sosadminapi-api
  strategy: 
      type: Recreate
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/ca-cert: "/vault/tls/ca-bundle.crt"
        vault.hashicorp.com/tls-secret: "vault-ca-bundle"
        vault.hashicorp.com/role: "sosadminapi"
        vault.hashicorp.com/agent-inject-secret-env: "kv2/data/sosadminapi"
        vault.hashicorp.com/agent-inject-template-env: |
          {{- with secret "kv2/data/sosadminapi" -}}
            {{- range $k, $v := .Data.data -}}
              export {{ $k }}="{{ $v }}"
            {{ end }}
          {{- end }}
      labels:
        app: sosadminapi-api
    spec:
      serviceAccountName: sosadminapi-sa
      topologySpreadConstraints: # try to spread out api instances over available nodes
      - labelSelector:
          matchLabels:
            app: sosadminapi-api # pods labeled app: sosadminapi-api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname # 1 node = 1 topology
        whenUnsatisfiable: DoNotSchedule
      containers:
        - env:
          - name: ASPNETCORE_ENVIRONMENT
            value: prod
          - name: ApplicationInsights
            value: '{"InstrumentationKey": "SECRET_PLACEHOLDER", "EnableRequestBodyLogging": false, "EnableSearchResponseCountLogging": false}'
          - name: AllowedOrigins
            value: '*' 
          - name: SosApiConfiguration
            value: '???'
          - name: ProcessConfiguration
            value: '{"TaxonAttributeServiceConfiguration": {"BaseAddress": "https://taxonattributeservice.artdata.slu.se/api", "AcceptHeaderContentType": "application/json"}, "TaxonServiceConfiguration": {"BaseAddress": "https://taxonservice.artdata.slu.se/DarwinCore/DarwinCoreArchiveFile?version=custom", "AcceptHeaderContentType": "application/text", "TaxonApiAddress": "https://taxonapi.artdata.slu.se/darwincore/download?version=custom", "UseTaxonApi": true}}'
          - name: UserServiceConfiguration
            value: '{"BaseAddress": "https://artdatauser.artdata.slu.se/api","AcceptHeaderContentType": "application/json"}'
          - name: ImportConfiguration
            value: '{"ArtportalenConfiguration": {"ConnectionStringBackup": "Server=artsql2-12-test.ad.slu.se;Database=SpeciesObservationSwe_Backup;Integrated Security=sspi;MultipleActiveResultSets=true;Pooling=true;Max Pool Size=1000;Min Pool Size=0;Persist Security Info=false;TrustServerCertificate=true;ApplicationIntent=ReadOnly;Connection Timeout=30;Connection Lifetime=0;", "ConnectionStringLive": "Server=sql-artsql2-9\\inst1;Database=SpeciesObservationSwe;Integrated Security=sspi;MultipleActiveResultSets=true;Pooling=true;Max Pool Size=1000;Min Pool Size=0;Persist Security Info=false;TrustServerCertificate=true;ApplicationIntent=ReadOnly;Connection Timeout=30;Connection Lifetime=0;", "ChunkSize": 50000, "MaxNumberOfSightingsHarvested": null, "AddTestSightings": false}, "AreaHarvestConfiguration": {"UseGeoRegionApiHarvest": true}, "DwcaConfiguration": {"ImportPath": "\\\\storage-ua.slu.se\\ARTSOS_PROD$\\SOS\\Temp"}, "GeoRegionApiConfiguration": {"ApiUrl": "https://georegionapi.artdata.slu.se/"}}'
          - name: VerbatimDbConfiguration
            value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Hosts": [{"Name": "artsosagg2-2.ad.slu.se","Port": 27017}], "DatabaseName": "sos-harvest", "UseTls": false, "AuthenticationDb": "admin", "ReadBatchSize": 10000, "WriteBatchSize": 10000}'
          - name: ProcessDbConfiguration
            value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Hosts": [{"Name": "artmongo-1.artdata.slu.se", "Port": 27017}, {"Name": "artmongo-2.artdata.slu.se", "Port": 27017}, {"Name": "artmongo-3.artdata.slu.se", "Port": 27017}], "ReplicaSetName": "mongo-prod", "DatabaseName": "sos", "UseTls": false, "AuthenticationDb": "admin", "ReadBatchSize": 10000, "WriteBatchSize": 10000}'
          - name: HangfireDbConfiguration
            value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Hosts": [{"Name": "artmongo-1.artdata.slu.se", "Port": 27017}, {"Name": "artmongo-2.artdata.slu.se", "Port": 27017}, {"Name": "artmongo-3.artdata.slu.se", "Port": 27017}], "ReplicaSetName": "mongo-prod", "DatabaseName": "sos-hangfire", "UseTls": false, "AuthenticationDb": "admin", "JobExpirationDays": 7}'
          image: adbpocreg.azurecr.io/sosadminapi-api:$(Parameters.ImageTag)
          name: sosadminapi-api
          command: ["sh", "-c"]
          args: [". /vault/secrets/env && dotnet SOS.Administration.Api.dll"]
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5005
          readinessProbe: # ready to accept traffic, failure = stops routing traffic to this pod but does not restart the pod!
            httpGet:
              path: /healthz
              port: 5005
              httpHeaders:
              - name: Host
                value: KubernetesReadinessProbe
            initialDelaySeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 30 # runs every 30 seconds
          resources: {}
      restartPolicy: Always
      imagePullSecrets:
        - name: regcred
