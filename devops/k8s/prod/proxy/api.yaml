apiVersion: v1
kind: Service
metadata:
  labels:
    app: sos-proxy-api
  name: sos-proxy-api
  namespace: sos-proxy
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: sos-proxy-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sos-proxy-api
  name: sos-proxy-api
  namespace: sos-proxy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sos-proxy-api
  strategy: 
      type: Recreate
  template:
    metadata:
      annotations:
        logging: "true"
      labels:
        app: sos-proxy-api
    spec:
      topologySpreadConstraints: # try to spread out api instances over available nodes
      - labelSelector:
          matchLabels:
            app: sos-proxy-api # pods labeled app: sos-proxy-api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname # 1 node = 1 topology
        whenUnsatisfiable: DoNotSchedule
      containers:
        - env:
            - name: ASPNETCORE_ENVIRONMENT
              value: prod
            - name: InstrumentationKey
              valueFrom:
                  secretKeyRef:
                    key: InstrumentationKey
                    name: sos-proxy-secret
            - name: ProcessDbPassword
              valueFrom:
                  secretKeyRef:
                    key: ProcessDbPassword
                    name: sos-proxy-secret
            - name: ProcessDbUserName
              valueFrom:
                  secretKeyRef:
                    key: ProcessDbUserName
                    name: sos-proxy-secret
            - name: SearchDbPassword
              valueFrom:
                  secretKeyRef:
                    key: SearchDbPassword
                    name: sos-proxy-secret
            - name: SearchDbUserName
              valueFrom:
                  secretKeyRef:
                    key: SearchDbUserName
                    name: sos-proxy-secret
            - name: ApplicationInsights
              value: '{"InstrumentationKey": "SECRET_PLACEHOLDER"}'
            - name: ProcessDbConfiguration
              value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Hosts": [{"Name": "artmongo2-1.artdata.slu.se", "Port": 27017}, {"Name": "artmongo2-2.artdata.slu.se", "Port": 27017}, {"Name": "artmongo2-3.artdata.slu.se", "Port": 27017}], "ReplicaSetName": "mongo-prod", "DatabaseName": "sos", "UseTls": false, "AuthenticationDb": "admin"}'
            - name: SearchDbConfiguration
              value: '{"UserName": "SECRET_PLACEHOLDER", "Password": "SECRET_PLACEHOLDER", "Clusters": [{"Hosts": ["https://artsosdata2-1.artdata.slu.se:9200", "https://artsosdata2-2.artdata.slu.se:9200", "https://artsosdata2-3.artdata.slu.se:9200"]}, {"Hosts": ["https://artsosdata2-4.artdata.slu.se:9200", "https://artsosdata2-5.artdata.slu.se:9200", "https://artsosdata2-6.artdata.slu.se:9200"]}], "IndexPrefix": "sos", "IndexSettings": [{"Name": "observation", "RequestTimeout": 60}]}'
          image: adbpocreg.azurecr.io/sos-proxy-api:$(Parameters.ImageTag)
          name: sos-proxy-api
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
          readinessProbe: # ready to accept traffic, failure = stops routing traffic to this pod but does not restart the pod!
            httpGet:
              path: /healthz
              port: 5000
              httpHeaders:
              - name: Host
                value: KubernetesReadinessProbe
            initialDelaySeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 30 # runs every 30 seconds
          resources: {}
      restartPolicy: Always
      imagePullSecrets:
        - name: regcred
