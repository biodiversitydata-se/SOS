apiVersion: v1
kind: Service
metadata:
  labels:
    app: sos-observations-api
  name: sos-observations-api
  namespace: sos-observations-dev
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: sos-observations-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sos-observations-api
  name: sos-observations-api
  namespace: sos-observations-dev
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sos-observations-api
  strategy: 
      type: Recreate
  template:
    metadata:
      annotations:
        logging: "true"
      labels:
        app: sos-observations-api
    spec:
      topologySpreadConstraints: # try to spread out api instances over available nodes
      - labelSelector:
          matchLabels:
            app: sos-observations-api # pods labeled app: sos-observations-api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname # 1 node = 1 topology
        whenUnsatisfiable: DoNotSchedule
      containers:
        - env:
          - name: ASPNETCORE_ENVIRONMENT
            value: dev
          - name: AzureSubscriptionKey
            valueFrom:
                secretKeyRef:
                  key: AzureSubscriptionKey
                  name: sos-observations-secret
          - name: BlobStorageConnectionString
            valueFrom:
                secretKeyRef:
                  key: BlobStorageConnectionString
                  name: sos-observations-secret
          - name: BlobStorageKey
            valueFrom:
                secretKeyRef:
                  key: BlobStorageKey
                  name: sos-observations-secret
          - name: ClientSecret
            valueFrom:
                secretKeyRef:
                  key: ClientSecret
                  name: sos-observations-secret
          - name: Salt
            valueFrom:
                secretKeyRef:
                  key: Salt
                  name: sos-observations-secret
          - name: Password
            valueFrom:
                secretKeyRef:
                  key: Password
                  name: sos-observations-secret
          - name: InstrumentationKey
            valueFrom:
                secretKeyRef:
                  key: InstrumentationKey
                  name: sos-observations-secret
          - name: ProcessDbPassword
            valueFrom:
                secretKeyRef:
                  key: ProcessDbPassword
                  name: sos-observations-secret
          - name: ProcessDbUserName
            valueFrom:
                secretKeyRef:
                  key: ProcessDbUserName
                  name: sos-observations-secret
          - name: SearchDbPassword
            valueFrom:
                secretKeyRef:
                  key: SearchDbPassword
                  name: sos-observations-secret
          - name: SearchDbUserName
            valueFrom:
                secretKeyRef:
                  key: SearchDbUserName
                  name: sos-observations-secret
          - name: HangfireDbPassword
            valueFrom:
                secretKeyRef:
                  key: HangfireDbPassword
                  name: sos-observations-secret
          - name: HangfireDbUserName
            valueFrom:
                secretKeyRef:
                  key: HangfireDbUserName
                  name: sos-observations-secret
          - name: CorsAllowAny
            value: "true"
          image: adbpocreg.azurecr.io/sos-observations-api:$(Build.BuildId)
          name: sos-observations-api
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
          startupProbe: 
            httpGet:
              path: /healthz
              port: 5000
            failureThreshold: 5
            periodSeconds: 10
          readinessProbe: 
            httpGet:
              path: /healthz
              port: 5000
              httpHeaders:
              - name: Host
                value: KubernetesReadinessProbe
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /healthz
              port: 5000
            failureThreshold: 3
            periodSeconds: 10
          resources: {}
      restartPolicy: Always
      imagePullSecrets:
        - name: regcred
